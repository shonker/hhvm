These are the options that exists for HHVM

If you add a new section you need to update generate_configs in
hphp/runtime/base/configs/TARGETS

The format can be found in hphp/tools/configs/generate-configs.rs

# Autoload

- std::string Autoload.DB.Path = "", UNKNOWN
- bool Autoload.EnableExternFactExtractor = true, UNKNOWN
- std::string Autoload.UpdateSuppressionPath = "", UNKNOWN

  If this option is nonempty, Facts will check if a file exists at the
  given path. If such a file does exist, Facts will not update.

- bool Autoload.DB.CanCreate = true, UNKNOWN

  If true, and if a Facts DB doesn't already exist, native Facts will
  attempt to load the repo from scratch and create the DB. If the repo is
  very large, this may not be practical. Setting up the DB could grind the
  system to a halt, and you may have some other system to download a DB
  from saved state. You may rather prefer that requests fail until the
  saved state DB has been set up. Setting `AutoloadDBCanCreate=false`
  will prevent us from creating the DB if none exists, causing requests
  to fail in the meantime.

- std::string Autoload.DB.Perms = "0644", UNKNOWN
- std::string Autoload.DB.Group = "", UNKNOWN
- std::string Autoload.Logging = "hphp.runtime.ext.facts:=CRITICAL:slog;slog=hhvm", UNKNOWN
- uint32_t Autoload.DB.BlockingDbWaitTimeoutMs = 5000, UNKNOWN
- bool Autoload.DB.EnableBlockingDbWait = true, UNKNOWN
- bool Autoload.DB.UseSymbolMapForGetFilesWithAttributeAndAnyVal = true, UNKNOWN
- bool Autoload.AllowLoggingPropagation = false, UNKNOWN
- bool Autoload.RethrowExceptions = true, UNKNOWN
- uint32_t Autoload.PerfSampleRate = 0, UNKNOWN
- uint32_t Autoload.ErrorSampleRate = 1, UNKNOWN

  Sample rate for Autoload & Facts API latency logging

- std::string Autoload.Query = "", UNKNOWN, repooptionsflag(Autoload)|lookuppath(Query)
- std::string Autoload.TrustedDBPath = "", UNKNOWN, repooptionsflag(Autoload)|lookuppath(TrustedDBPath)
- std::vector<std::string> Autoload.IndexedMethodAttributes = {}, UNKNOWN, repooptionsflag(Autoload)|lookuppath(IndexedMethodAttributes)
- std::vector<std::string> Autoload.RepoBuildSearchDirs = {}, UNKNOWN, repooptionsflag(Autoload)|lookuppath(RepoBuildSearchDirs)

# Debugger (Eval.Debugger.)

- bool Debugger.EnableHphpd = false, UNKNOWN, lookuppath(Eval.Debugger.EnableDebugger)
- bool Debugger.EnableVSDebugger = Debugger.EnableVSDebugger, UNKNOWN, lookuppath(Eval.Debugger.VSDebugEnable)

  Yes the default value is itself. That is because between the static initiation and the
  Config::Bind call https://fburl.com/code/f7wryx1z sets it to a different value sometimes.

- int Debugger.VSDebuggerListenPort = -1, UNKNOWN, nobind
- std::string Debugger.VSDebuggerDomainSocketPath = "", UNKNOWN, nobind
- bool Debugger.VSDebuggerNoWait = false, UNKNOWN, nobind
- bool Debugger.EnableColor = true, UNKNOWN, lookuppath(Eval.Debugger.EnableDebuggerColor)
- bool Debugger.EnablePrompt = true, UNKNOWN, lookuppath(Eval.Debugger.EnableDebuggerPrompt)
- bool Debugger.EnableServer = false, UNKNOWN, lookuppath(Eval.Debugger.EnableDebuggerServer)
- bool Debugger.EnableUsageLog = false, UNKNOWN, lookuppath(Eval.Debugger.EnableDebuggerUsageLog)
- std::string Debugger.ServerIP = "", UNKNOWN, lookuppath(Eval.Debugger.IP)
- int Debugger.ServerPort = 8089, UNKNOWN, lookuppath(Eval.Debugger.Port)
- bool Debugger.DisableIPv6 = false, UNKNOWN
- std::string Debugger.DefaultSandboxPath = "", UNKNOWN
- std::string Debugger.StartupDocument = "", UNKNOWN
- int Debugger.SignalTimeout = 1, UNKNOWN
- std::string Debugger.Auth.TokenScriptBin = "", UNKNOWN
- std::string Debugger.Auth.SessionAuthScriptBin = "", UNKNOWN
- bool Debugger.LogBreakpointHitTime = false, UNKNOWN
- bool Debugger.LogEvaluationCommands = false, UNKNOWN

# ErrorHandling

- int ErrorHandling.UpgradeLevel = 0, UNKNOWN

  Bitmask of errors to upgrade to E_USER_ERROR

- int ErrorHandling.MaxSerializedStringSize = 64 * 1024 * 1024, UNKNOWN
- bool ErrorHandling.CallUserHandlerOnFatals = false, UNKNOWN
- bool ErrorHandling.ThrowExceptionOnBadMethodCall = true, UNKNOWN
- bool ErrorHandling.LogNativeStackOnOOM = false, UNKNOWN
- int64_t ErrorHandling.NoticeFrequency = 1, UNKNOWN
- int64_t ErrorHandling.WarningFrequency = 1, UNKNOWN
- bool ErrorHandling.VerboseCLIServerLogs = false, paulbiss

  When set print error log messages for each CLI-server request on start and
  finish. Otherwise logs are only generated for commands which exit with a
  non-zero return code.

# Eval

- int32_t Eval.CheckPropTypeHints = 3, UNKNOWN, globaldata|compileroption(CheckPropTypeHints)

  CheckPropTypeHints:
  0 - No checks or enforcement of property type hints.
  1 - Raises E_WARNING if a property type hint fails.
  2 - Raises E_RECOVERABLE_ERROR if regular property type hint fails, raises
      E_WARNING if soft property type hint fails. If a regular property type
      hint fails, it's possible for execution to resume normally if the user
      error handler doesn't throw and returns something other than boolean
      false.
  3 - Same as 2, except if a regular property type hint fails the runtime will
      not allow execution to resume normally; if the user error handler
      returns something other than boolean false, the runtime will throw a
      fatal error.

- bool Eval.EmitClsMethPointers = true, UNKNOWN, globaldata|unitcacheflag|hackc(hhbc)
- uint32_t Eval.RaiseClassConversionNoticeSampleRate = 0, UNKNOWN, globaldata

  Whether implicit class conversions can raise a notice.

- uint32_t Eval.DynamicallyReferencedNoticeSampleRate = 0, UNKNOWN, globaldata

  Whether classname_to_class raises notice if <<__DynamicallyReferenced>>
  is missing on a class definition.

- uint32_t Eval.RaiseStrToClsConversionNoticeSampleRate = 0, UNKNOWN, globaldata

  Whether operations like $c::foo() raise a notice when $c is a string

- uint32_t Eval.ClassStringHintNoticesSampleRate = 0, UNKNOWN, globaldata

  Raise a notice if a Class type is passed to function that expects a
  string

- bool Eval.StringPassesClass = true, UNKNOWN, globaldata|unitcacheflag

  When this options is on, class type-hints accept strings

- bool Eval.ClassPassesClassname = true, UNKNOWN, globaldata|unitcacheflag

  When this options is on, classname type-hints accepts classes

- bool Eval.ClassIsStringNotices = false, UNKNOWN, globaldata

  Raise a notice if a Class type is passed to is_string

- uint32_t Eval.ClassnameNoticesSampleRate = 0, UNKNOWN, globaldata

  Raise notice if a Class type is passed to a classname type-hint

- uint32_t Eval.ClassNoticesSampleRate = 0, UNKNOWN, globaldata

  Raise notice if a string type is passed to a class type-hint

- bool Eval.TreatCaseTypesAsMixed = false, UNKNOWN, globaldata|unitcacheflag

  Treats caseType int | bool as mixed

- bool Eval.DiamondTraitMethods = false, UNKNOWN, globaldata|unitcacheflag

  Enable a method defined in a trait to be imported multiple times
  along trait use paths

- bool Eval.EmitBespokeTypeStructures = false, UNKNOWN, globaldata

  Whether bespoke type structures should be used

- bool Eval.ModuleLevelTraits = false, UNKNOWN, globaldata|unitcacheflag

  Enable the "Module level traits" semantics: methods defined in a trait
  that belongs to module A, are considered as belonging to module A
  even if the trait is used by a class that lives in module B.

- bool Eval.TraitConstantInterfaceBehavior = false, UNKNOWN, globaldata|unitcacheflag

  Constants from traits behave like constants from interfaces (error on conflict)

- std::string Eval.ActiveDeployment = "", UNKNOWN, globaldata|compileroption(ActiveDeployment)

  Describes the active deployment for selecting the set of packages
  Value is only read in repo authoritative or cli mode.

- bool Eval.EnableIntrinsicsExtension = Eval.EnableIntrinsicsExtension, UNKNOWN, globaldata|unitcacheflag|hackc(hhbc, false)

  Should the extension containing HHVM intrinsics be enabled?
  This is used by HackC to turn on / off magic decl driven bytecode functions like
  `HH\embed_type_decl`

- uint32_t Eval.LogTsameCollisions = 0, UNKNOWN, globaldata

  0 = No notices, 1 = Log case collisions, 2 = Reject case insensitive

- bool Eval.BuildMayNoticeOnMethCallerHelperIsObject = false, UNKNOWN, globaldata

  When Eval.NoticeOnMethCallerHelperIsObject is set calling is_object
  on instance of MethCallerHelper will raise notices.
  In Repo.Authoritative mode, Eval.NoticeOnMethCallerHelperIsObject
  can only be set if the repo was built with the option
  Eval.BuildMayNoticeOnMethCallerHelperIsObject set to true.

- int32_t Eval.ForbidDynamicCallsToFunc = 0, UNKNOWN, globaldata(onlyhhbbc)|compileroption(ForbidDynamicCallsToFunc)|unitcacheflag

  Control dynamic calls to functions and dynamic constructs of
  classes which haven't opted into being called that way.
  0 - Do nothing
  1 - Warn if target is not annotated
  2 - Throw exception if target is not annotated; warn if dynamic
      callsite is using a raw string or array (depending on
      ForbidDynamicCallsWithAttr setting)
  3 - Throw exception

- int32_t Eval.ForbidDynamicCallsToClsMeth = 0, UNKNOWN, globaldata(onlyhhbbc)|compileroption(ForbidDynamicCallsToClsMeth)|unitcacheflag

  See Eval.ForbidDynamicCallsToFunc

- int32_t Eval.ForbidDynamicCallsToInstMeth = 0, UNKNOWN, globaldata(onlyhhbbc)|compileroption(ForbidDynamicCallsToInstMeth)|unitcacheflag

  See Eval.ForbidDynamicCallsToFunc

- int32_t Eval.ForbidDynamicConstructs = 0, UNKNOWN, globaldata(onlyhhbbc)|compileroption(ForbidDynamicConstructs)|unitcacheflag

  See Eval.ForbidDynamicCallsToFunc

- bool Eval.ForbidDynamicCallsWithAttr = true, UNKNOWN, globaldata|compileroption(ForbidDynamicCallsWithAttr)|unitcacheflag

  Keep logging dynamic calls according to Eval.ForbidDynamic... above even if
  __DynamicallyCallable attribute is present at declaration.

- uint32_t Eval.InitialStaticStringTableSize = Eval.InitialStaticStringTableSize, UNKNOWN, globaldata(noload)|staticdefault(500000)

- uint32_t Eval.InitialTypeTableSize = Eval.InitialTypeTableSize, UNKNOWN, globaldata(noload)|staticdefault(30000)|lookuppath(Eval.InitialNamedEntityTableSize)

- uint32_t Eval.InitialFuncTableSize = Eval.InitialFuncTableSize, UNKNOWN, globaldata(noload)|staticdefault(3000)

- bool Eval.HackArrCompatSerializeNotices = false, UNKNOWN, globaldata(onlyhhbbc)|compileroption(HackArrCompatSerializeNotices)|unitcacheflag

- bool Eval.LogKnownMethodsAsDynamicCalls = true, UNKNOWN, globaldata(onlyhhbbc)|compileroption(LogKnownMethodsAsDynamicCalls)|unitcacheflag

  If set to true calls to class methods of form $cls::meth() will not be
  logged as dynamic calls, which means behavior for such calls would be
  as if ForbidDynamicCallsToClsMeth was set to 0.

- bool Eval.IsVecNotices = false, UNKNOWN, globaldata(onlyhhbbc)

  Raise a notice if a ClsMeth type is passed to is_vec/is_array.
  hhbbc IsTypeX optimization may be disabled.

- bool Eval.NoticeOnBuiltinDynamicCalls = false, UNKNOWN, globaldata(onlyhhbbc)|compileroption(NoticeOnBuiltinDynamicCalls)|unitcacheflag

  Should the runtime emit notices whenever a builtin is called dynamically?

- std::set<std::string> Eval.RenamableFunctions = {}, UNKNOWN, globaldata

- std::set<std::string> Eval.NonInterceptableFunctions = {}, UNKNOWN, globaldata

- bool Eval.LogExternCompilerPerf = false, UNKNOWN, hackc(hhbc)

  Whether to log extern compiler performance

- bool Eval.FoldLazyClassKeys = true, UNKNOWN, unitcacheflag|hackc(hhbc)

- bool Eval.EmitNativeEnumClassLabels = true, UNKNOWN, unitcacheflag|hackc(hhbc)

# Hack.Lang

- bool Hack.Lang.DisableLvalAsAnExpression = false, UNKNOWN, repooptionsflag(Parser)|hackc(parser)
- bool Hack.Lang.ConstDefaultFuncArgs = false, UNKNOWN, repooptionsflag(Parser)|hackc(parser)
- bool Hack.Lang.ConstStaticProps = false, UNKNOWN, repooptionsflag(Parser)|hackc(parser)
- bool Hack.Lang.AbstractStaticProps = false, UNKNOWN, repooptionsflag(Parser)|hackc(parser)
- bool Hack.Lang.DisallowFuncPtrsInConstants = false, UNKNOWN, repooptionsflag(Parser)|hackc(parser)
- bool Hack.Lang.AllowUnstableFeatures = false, UNKNOWN, repooptionsflag(Parser)|hackc(parser)
- bool Hack.Lang.EnableXHPClassModifier = true, UNKNOWN, repooptionsflag(Parser)|hackc(parser)
- bool Hack.Lang.DisableXHPElementMangling = true, UNKNOWN, repooptionsflag(Parser)|hackc(parser)
- bool Hack.Lang.StressShallowDeclDeps = false, UNKNOWN, repooptionsflag(Parser)|hackc(hhbc)
- bool Hack.Lang.StressFoldedDeclDeps = false, UNKNOWN, repooptionsflag(Parser)|hackc(hhbc)
- bool Hack.Lang.OptimizeReifiedParamChecks = false, UNKNOWN, repooptionsflag(Parser)|hackc(hhbc)

  Emit specialized bytecodes when we an infer a typehint does not contain a
  reified generic bytecode, powered by decl directed bytecode

- bool Hack.Lang.DisallowDirectSuperglobalsRefs = false, UNKNOWN, repooptionsflag(Parser)|hackc(parser)

  Make it so referencing superglobals directly via their $_[A-Z]+ "variable"
  name hard-fails rather than emitting, e.g., CgetG

- std::map<std::string,std::string> Hack.Lang.AliasedNamespaces = {}, UNKNOWN, repooptionsflag(Parser)|lookuppath(AliasedNamespaces)

- bool Hack.Lang.OptimizeParamLifetimes = false, paulbiss, repooptionsflag(Parser)|hackc(hhbc)
- bool Hack.Lang.OptimizeLocalLifetimes = false, paulbiss, repooptionsflag(Parser)|hackc(hhbc)

  When set the frontend compiler will attempt to shorten the live ranges of
  parameter and non-parameter named locals when these flags are set. This may
  allow for better copy-on-write behavior of certain value types but will also
  mean that values that are no longer needed by the program may not be visible
  to the debugger anymore.

- bool Hack.Lang.OptimizeLocalIterators = false, paulbiss, repooptionsflag(Parser)|hackc(hhbc)

  When set the frontend will attempt to emit Iter bytecodes over an existing
  local rather than an unnamed one, if during the course of the loop the local
  is either not modified, or is only modified at the $key location.

- bool Hack.Lang.OptimizeIsTypeChecks = false, paulbiss, repooptionsflag(Parser)|hackc(hhbc)

  Controls whether hackc will attempt to emit IsTypeC instructions in place of
  IsTypeStructC for primitive types that are trivially checkable.

- bool Hack.Lang.LookForTypechecker = false, UNKNOWN
- bool Hack.Lang.AutoTypecheck = Hack.Lang.LookForTypechecker, UNKNOWN

  If you turn off LookForTypechecker, you probably want to turn this off
  too -- basically, make the two look like the same option to external
  users, unless you really explicitly want to set them differently for
  some reason.

- bool Hack.Lang.EnableClassLevelWhereClauses = false, UNKNOWN, unitcacheflag|hackc(parser)

  Enables the class-level where constraints
  true => allow the feature, false => disable the feature

- uint64_t Hack.Lang.Phpism.DisableCallUserFunc = 0, UNKNOWN

  Disables PHP's call_user_func function.
  Valid values are 0 => enabled (default), 1 => warning, 2 => error.

- uint64_t Hack.Lang.Phpism.DisableCallUserFuncArray = 0, UNKNOWN

  Disables PHP's call_user_func_array function.
  Valid values are 0 => enabled (default), 1 => warning, 2 => error.

- uint64_t Hack.Lang.Phpism.DisableConstant = 0, UNKNOWN

  Disables PHP's constant function
  Valid values are 0 => enabled (default), 1 => warning, 2 => error

# HHIR (Eval.HHIR)

- bool HHIR.Simplification = true, UNKNOWN
- bool HHIR.GenOpts = true, UNKNOWN
- bool HHIR.RefcountOpts = true, UNKNOWN
- bool HHIR.EnableGenTimeInlining = true, UNKNOWN
- uint32_t HHIR.InliningCostFactorMain = 100, UNKNOWN
- uint32_t HHIR.InliningCostFactorCold = 32, UNKNOWN
- uint32_t HHIR.InliningCostFactorFrozen = 10, UNKNOWN
- uint32_t HHIR.InliningVasmCostLimit = 80000, UNKNOWN
- uint32_t HHIR.InliningMinVasmCostLimit = 6500, UNKNOWN
- uint32_t HHIR.InliningMaxVasmCostLimit = 30000, UNKNOWN
- uint32_t HHIR.AlwaysInlineVasmCostLimit = 4800, UNKNOWN
- uint32_t HHIR.InliningMaxDepth = 5, UNKNOWN
- double HHIR.InliningVasmCallerExp = .5, UNKNOWN
- double HHIR.InliningVasmCalleeExp = .5, UNKNOWN
- double HHIR.InliningDepthExp = 0, UNKNOWN
- uint32_t HHIR.InliningMaxReturnDecRefs = 24, UNKNOWN
- uint32_t HHIR.InliningMaxReturnLocals = 40, UNKNOWN
- uint32_t HHIR.InliningMaxInitObjProps = 12, UNKNOWN
- bool HHIR.InliningIgnoreHints, UNKNOWN
- bool HHIR.InliningUseStackedCost = false, UNKNOWN
- bool HHIR.InliningUseLayoutBlocks = false, UNKNOWN
- bool HHIR.InliningAssertMemoryEffects = true, UNKNOWN
- bool HHIR.AlwaysInterpIgnoreHint, UNKNOWN
- bool HHIR.GenerateAsserts = false, UNKNOWN
- bool HHIR.DeadCodeElim = true, UNKNOWN
- bool HHIR.GlobalValueNumbering = true, UNKNOWN
- bool HHIR.PredictionOpts = true, UNKNOWN
- bool HHIR.OptimizeCheckTypes = true, UNKNOWN
- bool HHIR.MemoryOpts = true, UNKNOWN
- uint32_t HHIR.LoadElimMaxIters = 10, UNKNOWN
- bool HHIR.LoadEnableTeardownOpts = true, UNKNOWN
- uint32_t HHIR.LoadStackTeardownMaxDecrefs = 0, UNKNOWN
- uint32_t HHIR.LoadThrowMaxDecrefs = 0, UNKNOWN
- bool HHIR.StorePRE = true, UNKNOWN
- bool HHIR.SinkDefs = true, UNKNOWN
- bool HHIR.LowerBespokesPostIRGen = true, UNKNOWN
- bool HHIR.OutlineGenericIncDecRef = true, UNKNOWN
- uint32_t HHIR.MaxInlineInitPackedElements = 8, UNKNOWN

  How many elements to inline for packed array inits

- uint32_t HHIR.MaxInlineInitMixedElements = 4, UNKNOWN

  How many elements to inline for mixed array inits

- uint32_t HHIR.MaxInlineInitStructElements = 8, UNKNOWN

  How many elements to inline for struct array inits

- double HHIR.OffsetArrayProfileThreshold = 0.85, UNKNOWN
- double HHIR.COWArrayProfileThreshold = 0.85, UNKNOWN
- double HHIR.SmallArrayProfileThreshold = 0.8, UNKNOWN
- double HHIR.MissingArrayProfileThreshold = 0.8, UNKNOWN
- double HHIR.ExitArrayProfileThreshold = 0.98, UNKNOWN
- double HHIR.OffsetExitArrayProfileThreshold = 0.98, UNKNOWN
- double HHIR.IsTypeStructProfileThreshold = 0.95, UNKNOWN
- uint32_t HHIR.TypeProfileMinSamples = 10, UNKNOWN
- bool HHIR.EnablePreColoring = true, UNKNOWN
- bool HHIR.EnableCoalescing = true, UNKNOWN
- bool HHIR.AllocSIMDRegs = true, UNKNOWN
- uint32_t HHIR.SpecializedDestructorThreshold = 80, UNKNOWN

# Jit (Eval.Jit)

- bool Jit.Enabled = true, UNKNOWN, lookuppath(Eval.Jit)
- bool Jit.EvaledCode = true, UNKNOWN
- bool Jit.RequireWriteLease = false, UNKNOWN
- uint64_t Jit.RelocationSize = 1 << 20, UNKNOWN
- uint64_t Jit.MatureSize = 125 << 20, UNKNOWN
- bool Jit.MatureAfterWarmup = false, UNKNOWN
- double Jit.MaturityExponent = 1.0, UNKNOWN
- double Jit.MaturityProfWeight = 1.0, UNKNOWN
- bool Jit.Timer, UNKNOWN
- int Jit.Threads = 4, UNKNOWN
- int Jit.WorkerThreads, UNKNOWN
- int Jit.WorkerThreadsForSerdes = 0, UNKNOWN
- int Jit.WorkerArenas, UNKNOWN
- bool Jit.ParallelDeserialize = true, UNKNOWN
- int Jit.LdimmqSpan = 8, UNKNOWN
- int Jit.PrintOptimizedIR = 0, UNKNOWN
- int Jit.Concurrently = 1, UNKNOWN
- bool Jit.PGORacyProfiling = false, UNKNOWN
- bool Jit.AlwaysInterpOne = false, UNKNOWN
- uint32_t Jit.NopInterval = 0, UNKNOWN
- uint32_t Jit.MaxTranslations = 10, UNKNOWN
- uint32_t Jit.MaxProfileTranslations = 30, UNKNOWN
- uint32_t Jit.TraceletLiveLocsLimit = 2000, UNKNOWN
- uint32_t Jit.TraceletEagerGuardsLimit = 0, UNKNOWN
- uint32_t Jit.TraceletGuardsLimit = 5, UNKNOWN
- uint64_t Jit.GlobalTranslationLimit = -1, UNKNOWN
- int64_t Jit.MaxRequestTranslationTime = -1, UNKNOWN
- uint32_t Jit.MaxRegionInstrs = 3000, UNKNOWN
- uint32_t Jit.MaxLiveRegionInstrs = 50, UNKNOWN
- uint32_t Jit.MaxAwaitAllUnroll = 8, UNKNOWN
- bool Jit.ProfileWarmupRequests = false, UNKNOWN
- uint32_t Jit.ProfileRequests, UNKNOWN
- uint32_t Jit.ProfileBCSize, UNKNOWN
- uint32_t Jit.ResetProfCountersRequest, UNKNOWN
- uint32_t Jit.RetranslateAllRequest, UNKNOWN
- uint32_t Jit.RetranslateAllSeconds, UNKNOWN
- bool Jit.RerunRetranslateAll = false, UNKNOWN
- bool Jit.BuildOutliningHashes = false, UNKNOWN
- bool Jit.PGOLayoutSplitHotCold, UNKNOWN
- bool Jit.PGOVasmBlockCounters = true, UNKNOWN
- bool Jit.PGOVasmBlockCountersOptPrologue = true, UNKNOWN
- uint32_t Jit.PGOVasmBlockCountersMaxOpMismatches = 12, UNKNOWN
- uint32_t Jit.PGOVasmBlockCountersMinEntryValue, UNKNOWN
- double Jit.PGOVasmBlockCountersHotWeightMultiplier = 0, UNKNOWN
- bool Jit.LayoutSeparateZeroWeightBlocks = false, UNKNOWN
- bool Jit.LayoutPrologueSplitHotCold, UNKNOWN
- bool Jit.LayoutProfileSplitHotCold = true, UNKNOWN
- uint64_t Jit.LayoutMinHotThreshold = 0, UNKNOWN
- uint64_t Jit.LayoutMinColdThreshold = 0, UNKNOWN
- double Jit.LayoutHotThreshold = 0.01, UNKNOWN
- double Jit.LayoutColdThreshold = 0.0005, UNKNOWN
- int32_t Jit.LayoutMainFactor = 1000, UNKNOWN
- int32_t Jit.LayoutColdFactor = 5, UNKNOWN
- bool Jit.LayoutExtTSP = true, UNKNOWN
- bool Jit.LayoutExtTSPForPrologues = false, UNKNOWN
- double Jit.LayoutExtTSPMaxMergeDensityRatio = 25, UNKNOWN
- double Jit.LayoutMaxMergeRatio = 1000000, UNKNOWN
- bool Jit.LayoutPruneCatchArcs = true, UNKNOWN
- bool Jit.KeepDbgFiles = false, UNKNOWN
- uint32_t Jit.EnableRenameFunction = 0, UNKNOWN, globaldata|compileroption(JitEnableRenameFunction)|unitcacheflag

  This controls function renaming.
  0 - Renaming not allowed
  1 - All functions can be renamed
  2 - Functions in RenamableFunctions config list can be renamed

- uint32_t Jit.InterceptFunctionLogRate = 1000, UNKNOWN
- bool Jit.UseVtuneAPI = false, UNKNOWN
- bool Jit.DisabledByHphpd = false, UNKNOWN
- bool Jit.DisabledByVSDebug = true, UNKNOWN
- uint32_t Jit.WarmupStatusBytes = ((25 << 10) + 1), UNKNOWN
- uint32_t Jit.WarmupMaxCodeGenRate = 20000, UNKNOWN
- uint32_t Jit.WarmupRateSeconds = 64, UNKNOWN
- uint32_t Jit.WarmupMinFillFactor = 10, UNKNOWN
- uint32_t Jit.WriteLeaseExpiration = 1500, UNKNOWN

  In seconds

- int Jit.RetargetJumps = 1, UNKNOWN
- bool Jit.ForceVMRegSync = false, UNKNOWN

  Sync VM reg state for all native calls.

- std::string Jit.RegionSelector = "tracelet", UNKNOWN
- bool Jit.NoGdb = true, UNKNOWN
- bool Jit.PGO, UNKNOWN
- std::string Jit.PGORegionSelector = "hotcfg", UNKNOWN
- uint64_t Jit.PGOThreshold, UNKNOWN
- bool Jit.PGOOnly = false, UNKNOWN
- bool Jit.PGOUsePostConditions = true, UNKNOWN
- bool Jit.PGOUseAddrCountedCheck = false, UNKNOWN
- uint32_t Jit.PGOUnlikelyIncRefCountedPercent = 2, UNKNOWN
- uint32_t Jit.PGOUnlikelyIncRefIncrementPercent = 5, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefReleasePercent = 5, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefCountedPercent = 2, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefPersistPercent = 5, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefSurvivePercent = 5, UNKNOWN
- uint32_t Jit.PGOUnlikelyDecRefDecrementPercent = 5, UNKNOWN
- double Jit.PGODecRefNZReleasePercentCOW, UNKNOWN
- double Jit.PGODecRefNZReleasePercent, UNKNOWN
- double Jit.PGODecRefNopDecPercentCOW, UNKNOWN
- double Jit.PGODecRefNopDecPercent, UNKNOWN
- bool Jit.PGOArrayGetStress = false, UNKNOWN
- double Jit.PGOMinBlockCountPercent = 0.25, UNKNOWN

  Mininum weight of a tracelet to include it in HotCFG as a percentage
  of the weight of the first tracelet in the region. [0,100]

- double Jit.PGOMinArcProbability = 0.0, UNKNOWN

  Minimum probability of an arc to include it in HotCFG. [0,1]

- uint32_t Jit.PGORelaxPercent = 100, UNKNOWN
- double Jit.PGOCalledFuncCheckThreshold = 25, UNKNOWN
- double Jit.PGOCalledFuncExitThreshold = 99.9, UNKNOWN
- bool Jit.PGODumpCallGraph = false, UNKNOWN
- bool Jit.PGOOptCodeCallGraph = true, UNKNOWN
- bool Jit.PGOHFSortPlus = false, UNKNOWN
- uint8_t Jit.LiveThreshold, UNKNOWN
- uint8_t Jit.ProfileThreshold, UNKNOWN
- uint32_t Jit.MaxLiveMainUsage = 96 * 1024 * 1024, UNKNOWN
- uint32_t Jit.SampleRate = 0, UNKNOWN
- bool Jit.AlignMacroFusionPairs, UNKNOWN
- bool Jit.AlignUniqueStubs = true, UNKNOWN
- bool Jit.SerdesModeForceOff = false, UNKNOWN
- bool Jit.DesUnitPreload = false, UNKNOWN
- std::set<std::string> Jit.SerdesDebugFunctions = {}, UNKNOWN
- std::set<std::string> Jit.FuncBlockList = {}, UNKNOWN
- uint32_t Jit.SerializeOptProfSeconds, UNKNOWN
- uint32_t Jit.SerializeOptProfRequests = 0, UNKNOWN
- bool Jit.SerializeOptProfRestart = true, UNKNOWN
- bool Jit.ArmLse, UNKNOWN
- std::string Jit.LogAllInlineRegions = "", UNKNOWN

  Log the sizes and metadata for all translations in the TC broken
  down by function and inclusive/exclusive size for inlined regions.
  When set to "" TC size data will be sampled on a per function basis
  as determined by JitSampleRate. When set to a non-empty string all
  translations will be logged, and run_key column will be logged with
  the value of this option.

- bool Jit.ProfileGuardTypes = false, UNKNOWN
- uint32_t Jit.FilterLease = 1, UNKNOWN

# PCRE (Eval.PCRE)

- uint32_t PCRE.TableSize = PCRE.TableSize, UNKNOWN, staticdefault(96 * 1024)

  Need to be staticdefault because it is used in the init of a static
  variable. It will then be reinited after we read the config

- uint64_t PCRE.ExpireInterval = PCRE.ExpireInterval, UNKNOWN, staticdefault(2 * 60 * 60)

  Need to be staticdefault because it is used in the init of a static
  variable. It will then be reinited after we read the config

- std::string PCRE.CacheType = PCRE.CacheType, UNKNOWN, staticdefault("static")

  Need to be staticdefault because it is used in the init of a static
  variable. It will then be reinited after we read the config

- int64_t PCRE.BacktraceLimit = 1000000, UNKNOWN, private|lookuppath(Preg.BacktraceLimit)

  TODO: T58241504 delete this default once config is migrated.
  This one is just a misspelled version of Preg.BacktrackLimit

- int64_t PCRE.BacktrackLimit = PCRE.BacktraceLimit, UNKNOWN, staticdefault(1000000)|lookuppath(Preg.BacktrackLimit)

  It has to use static default because we read the value before configs has loaded.
  See BacktraceLimit for why it is the default value

- int64_t PCRE.RecursionLimit = PCRE.RecursionLimit, UNKNOWN, staticdefault(100000)|lookuppath(Preg.RecursionLimit)

  It has to use static default because we read the value before configs has loaded

- bool PCRE.ErrorLog = PCRE.ErrorLog, UNKNOWN, staticdefault(true)|lookuppath(Preg.ErrorLog)

# PageletServer

- int PageletServer.ThreadCount = 0, UNKNOWN
- int PageletServer.HugeThreadCount = 0, UNKNOWN
- int PageletServer.ThreadDropCacheTimeoutSeconds = 0, UNKNOWN
- int PageletServer.QueueLimit = 0, UNKNOWN
- bool PageletServer.ThreadDropStack = false, UNKNOWN
- uint64_t PageletServer.HeaderCheck = 0, UNKNOWN, lookuppath(Eval.PageletServerHeaderCheck)

  When starting a pagelet server the specified headers are passed as
  a dictionary that can contain both "key => value" fields and
  "#index => 'key: value'" fields from which key value pairs are
  parsed. The latter form is deprecated and this option controls
  errors and warnings for its use.
  0 - do nothing
  1 - raise a warning if a header is set via the deprecated "key: value"
      format
  2 - throw if any header is set using the deprecated "key: value"
      format

- uint64_t PageletServer.HeaderCollide = 0, UNKNOWN, lookuppath(Eval.PageletServerHeaderCollide)

  Similar to the above option this setting controls the behavior of
  hhvm when collisions occur in the pagelet header fields.
  0 - do nothing, favor last mentioned field in insertion order
  1 - raise a warning, preserve existing ordering
  2 - raise a warning, prefer the "key => value" field
  3 - throw an exception

# PHP7

- bool PHP7.all, UNKNOWN, private
- bool PHP7.NoHexNumerics = PHP7.all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether hex strings (e.g. "0x20") can be used for numeric
  operations, e.g. ("0x20" + 1)

- bool PHP7.Builtins = PHP7.all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether the repo was compiled with PHP7 builtins enabled.

- bool PHP7.EngineExceptions = PHP7.all, UNKNOWN
- bool PHP7.Substr = PHP7.all, UNKNOWN, globaldata|unitcacheflag

  Indicates whether the repo was compiled with PHP7 substr behavior which
  returns an empty string if the stringi length is equal to start characters
  long, instead of PHP5's false.

- bool PHP7.DisallowUnsafeCurlUploads = PHP7.all, UNKNOWN

- bool PHP7.UVS = PHP7.all, UNKNOWN, repooptionsflag(Parser, false)|hackc(hhbc, false)
- bool PHP7.LTRAssign = PHP7.all, UNKNOWN, repooptionsflag(Parser, false)|hackc(hhbc, false)

# Proxy

  Options related to reverse proxying. Origin and Percentage
  may be mutated by background threads and should only be read or written
  using the helper functions defined with HttpRequestHandler.

- std::string Proxy.Origin = "", UNKNOWN
- int Proxy.Percentage = 0, UNKNOWN
- int Proxy.Retry = 3, UNKNOWN
- std::set<std::string> Proxy.ServeURLs = {}, UNKNOWN
- bool Proxy.UseServeURLs = false, UNKNOWN, lookuppath(Proxy.ServeURLs)

  Loads from ServeURLs and check if config is non-empty

- std::set<std::string> Proxy.ProxyURLs = {}, UNKNOWN
- bool Proxy.UseProxyURLs = false, UNKNOWN, lookuppath(Proxy.ProxyURLs)

  Loads from ProxyURLs and check if config is non-empty

- std::vector<std::string> Proxy.ProxyPatterns = {}, UNKNOWN

# Server

- bool Server.Mode = false, UNKNOWN, nobind
- int Server.ThreadJobMaxQueuingMilliSeconds = -1, UNKNOWN
- bool Server.ThreadDropStack = false, UNKNOWN
- bool Server.HttpSafeMode = false, UNKNOWN
- bool Server.FixPathInfo = false, UNKNOWN
- bool Server.AddVaryEncoding = true, UNKNOWN
- bool Server.LogSettingsOnStartup = false, UNKNOWN
- bool Server.LogReorderProps = false, UNKNOWN
- bool Server.WarmupConcurrently = false, UNKNOWN
- bool Server.DedupeWarmupRequests = false, UNKNOWN
- int Server.WarmupThreadCount = 1, UNKNOWN
- int Server.ExtendedWarmup.ThreadCount = 1, UNKNOWN
- int Server.ExtendedWarmup.DelaySeconds = 60, UNKNOWN
- int Server.ExtendedWarmup.Repeat = 1, UNKNOWN
- std::vector<std::string> Server.WarmupRequests = {}, UNKNOWN
- std::vector<std::string> Server.ExtendedWarmup.Requests = {}, UNKNOWN
- std::string Server.CleanupRequest = "", UNKNOWN
- int Server.InternalWarmupThreads = 0, UNKNOWN
- boost::container::flat_set<std::string> Server.HighPriorityEndPoints = {}, UNKNOWN
- bool Server.ExitOnBindFail = false, UNKNOWN
- std::string Server.Host = "", UNKNOWN
- int Server.Port = 80, UNKNOWN
- int Server.PortFd = -1, UNKNOWN, nobind
- std::string Server.DefaultServerNameSuffix = "", UNKNOWN
- bool Server.AlwaysDecodePostDataDefault = true, UNKNOWN
- bool Server.SetChunkedTransferEncoding = true, UNKNOWN
- std::string Server.Type = "proxygen", UNKNOWN
- std::string Server.IP = "", UNKNOWN
- std::string Server.FileSocket = "", UNKNOWN
- int Server.SchedPolicy = -1, UNKNOWN
- int Server.SchedPriority = 0, UNKNOWN
- int Server.Backlog = 128, UNKNOWN
- int Server.ConnectionLimit = 0, UNKNOWN
- int Server.ThreadCount, UNKNOWN
- int Server.QueueCount = Server.ThreadCount, UNKNOWN
- int Server.IOThreadCount = 1, UNKNOWN
- int Server.HighQueueingThreshold = 60, UNKNOWN, nobind
- bool Server.LegacyBehavior = true, UNKNOWN
- int Server.HugeThreadCount = 0, UNKNOWN

  Number of worker threads with stack partially on huge pages

- int Server.HugeStackSizeKb = 384, UNKNOWN
- uint32_t Server.LoopSampleRate = 0, UNKNOWN
- int Server.WarmupThrottleRequestCount = 0, UNKNOWN
- int Server.WarmupThrottleThreadCount, UNKNOWN
- int Server.ThreadDropCacheTimeoutSeconds = 0, UNKNOWN
- int Server.RequestTimeoutSeconds = 0, UNKNOWN
- int64_t Server.MaxRequestAgeFactor = 0, UNKNOWN
- int Server.PspTimeoutSeconds = 0, UNKNOWN
- int Server.PspCpuTimeoutSeconds = 0, UNKNOWN
- int64_t Server.RequestHugeMaxBytes = 24LL << 20, UNKNOWN

  Approximate upper bound for thread heap that is backed by huge pages.
  This doesn't include the first slab colocated with thread stack, if any.

- int Server.GracefulShutdownWait = 0, UNKNOWN
- bool Server.HarshShutdown = true, UNKNOWN
- bool Server.KillOnTimeout = true, UNKNOWN
- bool Server.EvilShutdown = true, UNKNOWN
- int Server.PreShutdownWait = 0, UNKNOWN
- int Server.ShutdownListenWait = 0, UNKNOWN
- int Server.ShutdownEOMWait = 0, UNKNOWN
- int Server.PrepareToStopTimeout = 240, UNKNOWN
- int Server.PartialPostStatusCode = -1, UNKNOWN
- bool Server.StopOld = false, UNKNOWN

  If `StopOld` is set, we try to stop the old server running
  on the local host earlier when we initialize, and we do not start
  serving requests until we are confident that the system can give
  the new server `RSSNeededMb` resident memory, or till `StopOldWait`
  seconds passes after an effort to stop the old server is made.

- int Server.StopOldWait = 30, UNKNOWN
- int64_t Server.RSSNeededMb = 4096, UNKNOWN
- int64_t Server.CriticalFreeMb = 512, UNKNOWN
- int Server.CacheFreeFactor = 50, UNKNOWN, postprocess
- bool Server.Five0ThreeOnShutdownAbort = false, UNKNOWN, lookuppath(Server.503OnShutdownAbort)
- int Server.Five0ThreeRetryAfterSeconds = -1, UNKNOWN, lookuppath(Server.503RetryAfterSeconds)
- std::vector<std::string> Server.SSLNextProtocols = {}, UNKNOWN
- bool Server.EnableH2C = false, UNKNOWN
- bool Server.EnableKeepAlive = true, UNKNOWN
- bool Server.ExposeHPHP = true, UNKNOWN
- bool Server.ExposeXFBServer = false, UNKNOWN
- bool Server.ExposeXFBDebug = false, UNKNOWN
- std::string Server.XFBDebugSSLKey = "", UNKNOWN
- int Server.ConnectionTimeoutSeconds = -1, UNKNOWN
- bool Server.EnableOutputBuffering = false, UNKNOWN
- std::string Server.OutputHandler = "", UNKNOWN
- bool Server.ImplicitFlush = false, UNKNOWN
- bool Server.EnableEarlyFlush = true, UNKNOWN
- bool Server.ForceChunkedEncoding = false, UNKNOWN
- int64_t Server.MaxPostSize = 100, UNKNOWN, postprocess
- bool Server.AlwaysPopulateRawPostData = false, UNKNOWN
- std::string Server.TakeoverFilename = "", UNKNOWN
- bool Server.ExpiresActive = true, UNKNOWN
- int Server.ExpiresDefault = 2592000, UNKNOWN, postprocess
- std::string Server.DefaultCharsetName = "", UNKNOWN
- int64_t Server.RequestBodyReadLimit = -1, UNKNOWN

  If a request has a body over this limit, switch to on-demand reading.
  -1 for no limit.

- bool Server.AllowNonBlockingPosts = true, UNKNOWN

  Allow POST requests containing NonBlockingPost header to start execution
  without waiting for the entire POST body.

- bool Server.EnableSSL = false, UNKNOWN
- int Server.SSLPort = 443, UNKNOWN
- int Server.SSLPortFd = -1, UNKNOWN, nobind
- std::string Server.SSLCertificateFile = "", UNKNOWN
- std::string Server.SSLCertificateKeyFile = "", UNKNOWN
- std::string Server.SSLCertificateDir = "", UNKNOWN
- std::string Server.SSLTicketSeedFile = "", UNKNOWN
- bool Server.TLSDisableTLS1_2 = false, UNKNOWN
- std::string Server.TLSClientCipherSpec = "", UNKNOWN
- bool Server.EnableSSLWithPlainText = false, UNKNOWN
- int Server.SSLClientAuthLevel = 0, UNKNOWN, postprocess

  Level of TLS client auth. Valid values are
  0 => disabled (default)
  1 => optional (verify if client presents a cert)
  2 => required (client must present a valid cert)

- std::string Server.SSLClientCAFile = "", UNKNOWN, postprocess

  CA file to verify client cert against.

- std::string Server.ClientAuthAclIdentity = "", UNKNOWN

  Which ACL identity to check the client against.

- std::string Server.ClientAuthAclAction = "", UNKNOWN

  Which ACL action to check the client against.

- bool Server.ClientAuthFailClose = false, UNKNOWN

  If true, terminate connection immediately if a client fails ACL,
  otherwise log it and let in.

- uint32_t Server.ClientAuthLogSampleBase = 100, UNKNOWN, postprocess

  On average, sample X connections per ClientAuthLogSampleBase connections,
  where X is ClientAuthSuccessLogSampleRatio for client auth successes, and
  ClientAuthFailureLogSampleRatio for client auth failures. Set X to 0 to
  disable sampling.
  For example, if ClientAuthLogSampleBase = 100,
  ClientAuthSuccessLogSampleRatio = 0, and
  ClientAuthFailureLogSampleRatio = 50, then no (0/100) client auth successes
  and half (50/100) of client auth failures will be logged.

- uint32_t Server.ClientAuthSuccessLogSampleRatio = 0, UNKNOWN, postprocess

  See ClientAuthLogSampleBase

- uint32_t Server.ClientAuthFailureLogSampleRatio = 0, UNKNOWN, postprocess

  See ClientAuthLogSampleBase

- std::string Server.FileCache = "", UNKNOWN
- std::string Server.DefaultDocument = "index.php", UNKNOWN
- std::string Server.GlobalDocument = "", UNKNOWN
- std::string Server.ErrorDocument404 = "", UNKNOWN, postprocess
- bool Server.ForbiddenAs404 = false, UNKNOWN
- std::string Server.ErrorDocument500 = "", UNKNOWN, postprocess
- std::string Server.FatalErrorMessage = "", UNKNOWN
- bool Server.EnableStaticContentFromDisk = true, UNKNOWN
- bool Server.Utf8izeReplace = true, UNKNOWN
- std::string Server.RequestInitFunction = "", UNKNOWN
- std::string Server.RequestInitDocument = "", UNKNOWN
- bool Server.ThreadJobLIFO = false, UNKNOWN
- int Server.ThreadJobLIFOSwitchThreshold, UNKNOWN
- std::vector<std::string> Server.IncludeSearchPaths = {}, UNKNOWN
- std::string Server.FontPath = "", UNKNOWN
- uint64_t Server.RequestMemoryOOMKillBytes = 128ULL << 20, UNKNOWN
- std::string Server.SourceRoot, UNKNOWN
- bool Server.SafeFileAccess = false, UNKNOWN
- std::vector<std::string> Server.AllowedDirectories = {}, UNKNOWN
- bool Server.UnserializationWhitelistCheck = false, UNKNOWN
- bool Server.UnserializationWhitelistCheckWarningOnly = true, UNKNOWN
- int64_t Server.UnserializationBigMapThreshold = 1 << 16, UNKNOWN
- std::set<std::string> Server.AllowedFiles = {}, UNKNOWN
- std::set<std::string> Server.ForbiddenFileExtensions = {}, UNKNOWN
- bool Server.LockCodeMemory = false, UNKNOWN
- int Server.MaxArrayChain = INT_MAX, UNKNOWN, postprocess
- bool Server.WarnOnCollectionToArray = false, UNKNOWN
- bool Server.UseDirectCopy = false, UNKNOWN
- bool Server.AlwaysUseRelativePath = false, UNKNOWN
- bool Server.ApplySecondaryQueuePenalty = false, UNKNOWN

  Loadhint queue penalty

- bool Server.Forking.Enabled = true, UNKNOWN
- bool Server.Forking.LogForkAttempts = false, UNKNOWN
- std::string Server.LightProcessFilePrefix = "./lightprocess", UNKNOWN

  The file name that is used by LightProcess to bind the socket
  is the following prefix followed by the pid of the hphp process.

- int Server.LightProcessCount = 0, UNKNOWN
- bool Server.LightProcessStrictUser = false, UNKNOWN
- bool Server.ForceServerNameToHeader = false, UNKNOWN
- bool Server.PathDebug = false, UNKNOWN
- std::string Server.User = "", UNKNOWN

  Run server under this user account

- bool Server.AllowRunAsRoot = false, UNKNOWN

  Allow running hhvm as root

- int64_t Server.RequestMemoryMaxBytes = 16LL << 30, UNKNOWN, staticdefault(INT64_MAX)
- int64_t Server.LowestMaxPostSize = INT64_MAX, UNKNOWN, nobind
- int64_t Server.Upload.MaxFileSize = 100, UNKNOWN, postprocess|lookuppath(Server.Upload.UploadMaxFileSize)
- std::string Server.Upload.TmpDir = "/tmp", UNKNOWN, lookuppath(Server.Upload.UploadsTmpDir)
- bool Server.Upload.EnableFileUploads = true, UNKNOWN
- int64_t Server.Upload.MaxFileUploads = 20, UNKNOWN
- bool Server.Upload.EnableUploadProgress = false, UNKNOWN
- int Server.Upload.Rfc1867Freq = 256 * 1024, UNKNOWN, postprocess
- std::string Server.Upload.Rfc1867Prefix = "vupload_", UNKNOWN
- std::string Server.Upload.Rfc1867Name = "video_ptoken", UNKNOWN
- int64_t Server.ImageMemoryMaxBytes = 0, UNKNOWN, postprocess
- int Server.BrotliCompressionEnabled = -1, UNKNOWN
- int Server.BrotliChunkedCompressionEnabled = -1, UNKNOWN
- int Server.BrotliCompressionLgWindowSize = 20, UNKNOWN

  Base 2 logarithm of the sliding window size. Range is 10-24.

- int Server.BrotliCompressionMode = 0, UNKNOWN
- int Server.BrotliCompressionQuality = 6, UNKNOWN
- bool Server.BrotliUseLocalArena = false, UNKNOWN
- int Server.ZstdCompressionEnabled = -1, UNKNOWN
- int Server.ZstdCompressionLevel = 3, UNKNOWN
- int Server.ZstdWindowLog = 0, UNKNOWN, nobind

  For some reason you can't set this in hdf. I think that is just a mistake but
  for now I'm keeping the behavior

- int Server.ZstdTargetBlockSize = 0, UNKNOWN, nobind

  For some reason you can't set this in hdf. I think that is just a mistake but
  for now I'm keeping the behavior

- int Server.ZstdChecksumRate = 0, UNKNOWN
- bool Server.ZstdUseLocalArena = false, UNKNOWN
- int Server.GzipCompressionLevel = 3, UNKNOWN
- int Server.GzipMaxCompressionLevel = 9, UNKNOWN
- bool Server.GzipUseLocalArena = false, UNKNOWN

  Enable additional for config.hdf overwrite inputs to scuba:hhvm_config_hdf_logs (eg. machine, cpu, tier, tag etc)

- bool Server.LogTierOverwriteInputs = false, ffledgling

# Xbox

- int Xbox.ServerInfo.ThreadCount = 10, UNKNOWN
- int Xbox.ServerInfo.MaxQueueLength = INT_MAX, UNKNOWN, postprocess
- std::string Xbox.ServerInfo.RequestInitFunction = "", UNKNOWN
- std::string Xbox.ServerInfo.RequestInitDocument = "", UNKNOWN
- bool Xbox.ServerInfo.LogInfo = false, UNKNOWN
- std::string Xbox.ProcessMessageFunc = "xbox_process_message", UNKNOWN
