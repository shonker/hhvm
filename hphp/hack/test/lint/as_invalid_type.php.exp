File "as_invalid_type.php", line 51, characters 10-28:
This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `int` which shares no values with `bool`. (Lint[5629])
File "as_invalid_type.php", line 51, characters 10-28:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 52, characters 10-29:
This `as` assertion will always succeed and hence is redundant. The expression on the left has a type `bool` which is a subtype of `bool`. (Lint[5628])
File "as_invalid_type.php", line 52, characters 10-29:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 53, characters 10-29:
This `as` assertion will always succeed and hence is redundant. The expression on the left has a type `float` which is a subtype of `num`. (Lint[5628])
File "as_invalid_type.php", line 53, characters 10-29:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 54, characters 10-29:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 55, characters 10-29:
This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `float` which shares no values with `int`. (Lint[5629])
File "as_invalid_type.php", line 55, characters 10-29:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 56, characters 10-32:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 57, characters 10-35:
This `as` assertion will always succeed and hence is redundant. The expression on the left has a type `string` which is a subtype of `arraykey`. (Lint[5628])
File "as_invalid_type.php", line 57, characters 10-35:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 58, characters 10-30:
This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `string` which shares no values with `int`. (Lint[5629])
File "as_invalid_type.php", line 58, characters 10-30:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 59, characters 10-29:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 60, characters 10-29:
This `as` assertion will always succeed and hence is redundant. The expression on the left has a type `int` which is a subtype of `mixed`. (Lint[5628])
File "as_invalid_type.php", line 60, characters 10-29:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 61, characters 10-51:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 62, characters 10-50:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 63, characters 10-47:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 64, characters 10-37:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 65, characters 10-38:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 66, characters 10-34:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 67, characters 10-30:
This `as` assertion will always succeed and hence is redundant. The expression on the left has a type `null` which is a subtype of `mixed`. (Lint[5628])
File "as_invalid_type.php", line 67, characters 10-30:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 68, characters 10-29:
This `as` assertion will always succeed and hence is redundant. The expression on the left has a type `null` which is a subtype of `null`. (Lint[5628])
File "as_invalid_type.php", line 68, characters 10-29:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 69, characters 10-29:
This `as` assertion will always succeed and hence is redundant. The expression on the left has a type `null` which is a subtype of `?int`. (Lint[5628])
File "as_invalid_type.php", line 69, characters 10-29:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 70, characters 10-44:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 71, characters 10-28:
This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `null` which shares no values with `int`. (Lint[5629])
File "as_invalid_type.php", line 71, characters 10-28:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
File "as_invalid_type.php", line 72, characters 10-28:
This `as` assertion will always fail and lead to an exception at runtime. The expression on the left has type `int` which shares no values with `null`. (Lint[5629])
File "as_invalid_type.php", line 72, characters 10-28:
This expression has a type lie that makes Hack type checker think it is a different type than what it inferred. It is achieved using a type assertion through `as`. This can lead to fatals or subtle and latent behaviour changes. Even if the code is correct at the moment, the type checker won't produce any signal when the prerequisites for correctness change. (Lint[5808])
