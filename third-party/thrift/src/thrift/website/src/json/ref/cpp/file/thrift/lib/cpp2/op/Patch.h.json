{
  "refid": "op_2Patch_8h",
  "kind": "file",
  "language": "C++",
  "compoundname_html": "Patch.h",
  "includes": [
    {
      "local": "no",
      "text_html": "type_traits"
    },
    {
      "local": "no",
      "text_html": "fmt/core.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/Thrift.h"
    },
    {
      "refid": "Encode_8h",
      "local": "no",
      "text_html": "thrift/lib/cpp2/op/Encode.h"
    },
    {
      "refid": "op_2detail_2Patch_8h",
      "local": "no",
      "text_html": "thrift/lib/cpp2/op/detail/Patch.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/protocol/DebugProtocol.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/type/Tag.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/thrift/gen-cpp2/patch_types.h"
    }
  ],
  "innerclass": [
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType",
      "href": "/ref/cpp/struct/apache/thrift/op/detail/PatchType",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1bool__t_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::bool_t &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1bool__t_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1byte__t_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::byte_t &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1byte__t_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1i16__t_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::i16_t &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1i16__t_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1i32__t_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::i32_t &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1i32__t_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1i64__t_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::i64_t &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1i64__t_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1float__t_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::float_t &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1float__t_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1double__t_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::double_t &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1double__t_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1string__t_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::string_t &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1string__t_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1binary__t_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::binary_t &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1binary__t_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1struct__t_3_01T_01_4_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::struct_t&lt; T &gt; &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1struct__t_3_01T_01_4_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1union__t_3_01T_01_4_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::PatchType&lt; type::union_t&lt; T &gt; &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1PatchType_3_01type_1_1union__t_3_01T_01_4_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1SafePatchType",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::SafePatchType",
      "href": "/ref/cpp/struct/apache/thrift/op/detail/SafePatchType",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1SafePatchType_3_01type_1_1struct__t_3_01T_01_4_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::SafePatchType&lt; type::struct_t&lt; T &gt; &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1SafePatchType_3_01type_1_1struct__t_3_01T_01_4_01_4",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1op_1_1detail_1_1SafePatchType_3_01type_1_1union__t_3_01T_01_4_01_4",
      "prot": "public",
      "text_html": "apache::thrift::op::detail::SafePatchType&lt; type::union_t&lt; T &gt; &gt;",
      "href": "/ref/cpp/struct/special/structapache_1_1thrift_1_1op_1_1detail_1_1SafePatchType_3_01type_1_1union__t_3_01T_01_4_01_4",
      "is_transitive_innerclass": false
    }
  ],
  "innernamespace": [
    {
      "refid": "namespaceapache",
      "text_html": "apache"
    },
    {
      "refid": "namespaceapache_1_1thrift",
      "text_html": "apache::thrift"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op",
      "text_html": "apache::thrift::op"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1_1detail",
      "text_html": "apache::thrift::op::detail"
    }
  ],
  "file_location": {
    "file": "fbcode/thrift/lib/cpp2/op/Patch.h"
  },
  "filepath": "file/thrift/lib/cpp2/op/Patch.h",
  "href": "/ref/cpp/thrift/lib/cpp2/op/Patch.h",
  "free_vars": [
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1a55a41500349ce62466d2fea612949a05",
      "prot": "public",
      "static": "no",
      "constexpr": "yes",
      "mutable": "no",
      "tparams": [
        {
          "type_html": "typename T"
        },
        {
          "type_html": "typename",
          "defval_html": "void"
        }
      ],
      "type_html": "constexpr bool",
      "definition_html": "constexpr bool apache::thrift::op::is_patch_v",
      "argsstring_html": "",
      "name_html": "is_patch_v",
      "initializer_html": "= false",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "line": "129",
        "column": "23",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "bodystart": "129",
        "bodyend": "-1"
      }
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1a48ab84534ed520fc59217cbe3e2bbafc",
      "prot": "public",
      "static": "no",
      "constexpr": "yes",
      "mutable": "no",
      "tparams": [
        {
          "type_html": "typename T"
        }
      ],
      "type_html": "constexpr bool",
      "definition_html": "constexpr bool apache::thrift::op::is_assign_only_patch_v&lt; detail::AssignPatch&lt; T &gt; &gt;",
      "argsstring_html": "",
      "name_html": "is_assign_only_patch_v",
      "initializer_html": "= false",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "line": "137",
        "column": "23",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "bodystart": "137",
        "bodyend": "-1"
      }
    }
  ],
  "free_functions": [
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1a04018433197eac61800d5d528dcfe195",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename T"
        }
      ],
      "type_html": "std::string",
      "definition_html": "std::string apache::thrift::op::prettyPrintPatch",
      "argsstring_html": "(const T &amp;obj, DebugProtocolWriter::Options options=DebugProtocolWriter::Options::simple())",
      "name_html": "prettyPrintPatch",
      "param": [
        {
          "type_html": "const T &amp;",
          "declname_html": "obj"
        },
        {
          "type_html": "DebugProtocolWriter::Options",
          "declname_html": "options",
          "defval_html": "DebugProtocolWriter::Options::simple()"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "line": "142",
        "column": "13",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "bodystart": "142",
        "bodyend": "148"
      },
      "definition": {
        "simple_html": "template &lt;typename T&gt;\nstd::string prettyPrintPatch(\n    const T&amp; obj,\n    DebugProtocolWriter::Options options =\n        DebugProtocolWriter::Options::simple())",
        "simple_raw": "template <typename T>\nstd::string prettyPrintPatch(\n    const T& obj,\n    DebugProtocolWriter::Options options =\n        DebugProtocolWriter::Options::simple())",
        "detailed_html": "template &lt;typename T&gt;\nstd::string prettyPrintPatch(\n    const T&amp; obj,\n    DebugProtocolWriter::Options options =\n        DebugProtocolWriter::Options::simple())",
        "detailed_raw": "template <typename T>\nstd::string prettyPrintPatch(\n    const T& obj,\n    DebugProtocolWriter::Options options =\n        DebugProtocolWriter::Options::simple())",
        "original_definition_html": "std::string apache::thrift::op::prettyPrintPatch",
        "original_argsstring_html": "(const T &amp;obj, DebugProtocolWriter::Options options=DebugProtocolWriter::Options::simple())"
      },
      "compoundname_html": "apache::thrift::op::prettyPrintPatch",
      "namespace_html": "apache::thrift::op"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1a27d1e7c0cbbfd21b97490e1d0c41af11",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename T"
        },
        {
          "type_html": "typename Tag",
          "defval_html": "type::infer_tag&lt;T&gt;"
        }
      ],
      "type_html": "<code>op::patch_type</code>&lt; Tag &gt;",
      "definition_html": "op::patch_type&lt;Tag&gt; apache::thrift::op::fromSafePatch",
      "argsstring_html": "(const op::safe_patch_type&lt; Tag &gt; &amp;safePatch)",
      "name_html": "fromSafePatch",
      "param": [
        {
          "type_html": "const <code>op::safe_patch_type</code>&lt; Tag &gt; &amp;",
          "declname_html": "safePatch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "line": "159",
        "column": "16",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "bodystart": "159",
        "bodyend": "172"
      },
      "definition": {
        "simple_html": "template &lt;typename T, typename Tag = type::infer_tag&lt;T&gt;&gt;\nop::patch_type&lt;Tag&gt; fromSafePatch(const op::safe_patch_type&lt;Tag&gt;&amp; safePatch)",
        "simple_raw": "template <typename T, typename Tag = type::infer_tag<T>>\nop::patch_type<Tag> fromSafePatch(const op::safe_patch_type<Tag>& safePatch)",
        "detailed_html": "template &lt;typename T, typename Tag = type::infer_tag&lt;T&gt;&gt;\nop::patch_type&lt;Tag&gt; fromSafePatch(const op::safe_patch_type&lt;Tag&gt;&amp; safePatch)",
        "detailed_raw": "template <typename T, typename Tag = type::infer_tag<T>>\nop::patch_type<Tag> fromSafePatch(const op::safe_patch_type<Tag>& safePatch)",
        "original_definition_html": "op::patch_type&lt;Tag&gt; apache::thrift::op::fromSafePatch",
        "original_argsstring_html": "(const op::safe_patch_type&lt; Tag &gt; &amp;safePatch)"
      },
      "description": {
        "exception": [
          {
            "names_html": [
              "std::runtime_error"
            ],
            "description_html": "<p>if the given <code>SafePatch</code> cannot be successfully decoded or safely applied in this process (eg. if the version of the Thrift Patch library in this process is not compatible with the minimum version required by <code>SafePatch</code>). </p>"
          }
        ],
        "detailed_html": "<p>Returns a Thrift Patch instance corresponding to the (decoded) <code>SafePatch</code>.</p>\n<p>\n</p>"
      },
      "compoundname_html": "apache::thrift::op::fromSafePatch",
      "namespace_html": "apache::thrift::op"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1a24931c8e04a3e9bd00d0f0cc94e2c9f5",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename T"
        },
        {
          "type_html": "typename Tag",
          "defval_html": "type::infer_tag&lt;T&gt;"
        }
      ],
      "type_html": "<code>op::safe_patch_type</code>&lt; Tag &gt;",
      "definition_html": "op::safe_patch_type&lt;Tag&gt; apache::thrift::op::toSafePatch",
      "argsstring_html": "(const op::patch_type&lt; Tag &gt; &amp;patch)",
      "name_html": "toSafePatch",
      "param": [
        {
          "type_html": "const <code>op::patch_type</code>&lt; Tag &gt; &amp;",
          "declname_html": "patch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "line": "178",
        "column": "21",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "bodystart": "178",
        "bodyend": "189"
      },
      "definition": {
        "simple_html": "template &lt;typename T, typename Tag = type::infer_tag&lt;T&gt;&gt;\nop::safe_patch_type&lt;Tag&gt; toSafePatch(const op::patch_type&lt;Tag&gt;&amp; patch)",
        "simple_raw": "template <typename T, typename Tag = type::infer_tag<T>>\nop::safe_patch_type<Tag> toSafePatch(const op::patch_type<Tag>& patch)",
        "detailed_html": "template &lt;typename T, typename Tag = type::infer_tag&lt;T&gt;&gt;\nop::safe_patch_type&lt;Tag&gt; toSafePatch(const op::patch_type&lt;Tag&gt;&amp; patch)",
        "detailed_raw": "template <typename T, typename Tag = type::infer_tag<T>>\nop::safe_patch_type<Tag> toSafePatch(const op::patch_type<Tag>& patch)",
        "original_definition_html": "op::safe_patch_type&lt;Tag&gt; apache::thrift::op::toSafePatch",
        "original_argsstring_html": "(const op::patch_type&lt; Tag &gt; &amp;patch)"
      },
      "description": {
        "detailed_html": "<p>Returns a <code>SafePatch</code> instance corresponding to the encoded Thrift Patch. </p>"
      },
      "compoundname_html": "apache::thrift::op::toSafePatch",
      "namespace_html": "apache::thrift::op"
    }
  ],
  "free_typedefs": [
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1ad0a8015f9fb4f475432e75c55bde0ae8",
      "prot": "public",
      "tparams": [
        {
          "type_html": "typename T"
        }
      ],
      "type_html": "typename <a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/op/detail/SafePatchType\">detail::SafePatchType</a>&lt;type::infer_tag&lt;T&gt;&gt;::type",
      "definition_html": "using apache::thrift::op::safe_patch_type = typedef typename detail::SafePatchType&lt;type::infer_tag&lt;T&gt; &gt;::type",
      "argsstring_html": "",
      "name_html": "safe_patch_type",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "line": "105",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "bodystart": "106",
        "bodyend": "-1"
      },
      "description": {
        "detailed_html": "<p>The safe patch represenations for the base thrift types.</p>\n<p>Safe patch provides versioning to indicate the minimum Thrift Patch version required to safely and successfully process that patch as well as opaque storage that is resilient to Thrift schema compatibility. </p>"
      }
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1a53b7bf73ef642578e12f77a24a36ef6e",
      "prot": "public",
      "tparams": [
        {
          "type_html": "typename T"
        }
      ],
      "type_html": "typename <a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/op/detail/PatchType\">detail::PatchType</a>&lt;type::infer_tag&lt;T&gt;&gt;::type",
      "definition_html": "using apache::thrift::op::patch_type = typedef typename detail::PatchType&lt;type::infer_tag&lt;T&gt; &gt;::type",
      "argsstring_html": "",
      "name_html": "patch_type",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "line": "126",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
        "bodystart": "126",
        "bodyend": "-1"
      },
      "description": {
        "detailed_html": "<p>The patch represenations for the base thrift types.</p>\n<p>All patch types support the following methods:<ul>\n<li><p>empty() - Returns true iff the patch is a noop.</p>\n</li><li><p>reset() - Makes the patch a noop.</p>\n</li><li><p>apply(T&amp;&amp; value) - Applies the patch to the given value, in place.</p>\n</li><li><p>merge(P&amp;&amp; next) - Merges the 'next' patch into this one, such that the result is equivalent to applying this and next in sequence.</p>\n</li><li><p>assign(U&amp;&amp; value) - Updates the patch to assign the given value.</p>\n</li><li><p>operator=(U&amp;&amp; value) - An alias for assign.</p>\n</li><li><p><code>get()</code> - Returns the underlying Thrift representation for the patch.</p>\n</li></ul>\n</p>\n<p>For example:<ul>\n<li><p>int32_t value = 1;</p>\n</li><li><p>I32Patch patch;</p>\n</li><li><p>patch = 2; // Equivalent to calling patch.assign(2).</p>\n</li><li><p>patch.apply(value); // Sets value to 2; </p>\n</li></ul>\n</p>"
      }
    }
  ],
  "free_overloadgroups": [
    {
      "groupname_html": "",
      "overloadsets": [
        {
          "kind": "overloadset",
          "name_html": "prettyPrintPatch",
          "compoundname_html": "apache::thrift::op::prettyPrintPatch",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1op_1a04018433197eac61800d5d528dcfe195",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename T"
                }
              ],
              "type_html": "std::string",
              "definition_html": "std::string apache::thrift::op::prettyPrintPatch",
              "argsstring_html": "(const T &amp;obj, DebugProtocolWriter::Options options=DebugProtocolWriter::Options::simple())",
              "name_html": "prettyPrintPatch",
              "param": [
                {
                  "type_html": "const T &amp;",
                  "declname_html": "obj"
                },
                {
                  "type_html": "DebugProtocolWriter::Options",
                  "declname_html": "options",
                  "defval_html": "DebugProtocolWriter::Options::simple()"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
                "line": "142",
                "column": "13",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
                "bodystart": "142",
                "bodyend": "148"
              },
              "definition": {
                "simple_html": "template &lt;typename T&gt;\nstd::string prettyPrintPatch(\n    const T&amp; obj,\n    DebugProtocolWriter::Options options =\n        DebugProtocolWriter::Options::simple())",
                "simple_raw": "template <typename T>\nstd::string prettyPrintPatch(\n    const T& obj,\n    DebugProtocolWriter::Options options =\n        DebugProtocolWriter::Options::simple())",
                "detailed_html": "template &lt;typename T&gt;\nstd::string prettyPrintPatch(\n    const T&amp; obj,\n    DebugProtocolWriter::Options options =\n        DebugProtocolWriter::Options::simple())",
                "detailed_raw": "template <typename T>\nstd::string prettyPrintPatch(\n    const T& obj,\n    DebugProtocolWriter::Options options =\n        DebugProtocolWriter::Options::simple())",
                "original_definition_html": "std::string apache::thrift::op::prettyPrintPatch",
                "original_argsstring_html": "(const T &amp;obj, DebugProtocolWriter::Options options=DebugProtocolWriter::Options::simple())"
              },
              "compoundname_html": "apache::thrift::op::prettyPrintPatch",
              "namespace_html": "apache::thrift::op"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/op/Patch.h/prettyPrintPatch",
          "namespace_html": "apache::thrift::op",
          "minprot": "public",
          "displayname_html": "prettyPrintPatch",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Patch.h/prettyPrintPatch",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Patch.h/prettyPrintPatch"
        },
        {
          "kind": "overloadset",
          "name_html": "fromSafePatch",
          "compoundname_html": "apache::thrift::op::fromSafePatch",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1op_1a27d1e7c0cbbfd21b97490e1d0c41af11",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename T"
                },
                {
                  "type_html": "typename Tag",
                  "defval_html": "type::infer_tag&lt;T&gt;"
                }
              ],
              "type_html": "<code>op::patch_type</code>&lt; Tag &gt;",
              "definition_html": "op::patch_type&lt;Tag&gt; apache::thrift::op::fromSafePatch",
              "argsstring_html": "(const op::safe_patch_type&lt; Tag &gt; &amp;safePatch)",
              "name_html": "fromSafePatch",
              "param": [
                {
                  "type_html": "const <code>op::safe_patch_type</code>&lt; Tag &gt; &amp;",
                  "declname_html": "safePatch"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
                "line": "159",
                "column": "16",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
                "bodystart": "159",
                "bodyend": "172"
              },
              "definition": {
                "simple_html": "template &lt;typename T, typename Tag = type::infer_tag&lt;T&gt;&gt;\nop::patch_type&lt;Tag&gt; fromSafePatch(const op::safe_patch_type&lt;Tag&gt;&amp; safePatch)",
                "simple_raw": "template <typename T, typename Tag = type::infer_tag<T>>\nop::patch_type<Tag> fromSafePatch(const op::safe_patch_type<Tag>& safePatch)",
                "detailed_html": "template &lt;typename T, typename Tag = type::infer_tag&lt;T&gt;&gt;\nop::patch_type&lt;Tag&gt; fromSafePatch(const op::safe_patch_type&lt;Tag&gt;&amp; safePatch)",
                "detailed_raw": "template <typename T, typename Tag = type::infer_tag<T>>\nop::patch_type<Tag> fromSafePatch(const op::safe_patch_type<Tag>& safePatch)",
                "original_definition_html": "op::patch_type&lt;Tag&gt; apache::thrift::op::fromSafePatch",
                "original_argsstring_html": "(const op::safe_patch_type&lt; Tag &gt; &amp;safePatch)"
              },
              "description": {
                "exception": [
                  {
                    "names_html": [
                      "std::runtime_error"
                    ],
                    "description_html": "<p>if the given <code>SafePatch</code> cannot be successfully decoded or safely applied in this process (eg. if the version of the Thrift Patch library in this process is not compatible with the minimum version required by <code>SafePatch</code>). </p>"
                  }
                ],
                "detailed_html": "<p>Returns a Thrift Patch instance corresponding to the (decoded) <code>SafePatch</code>.</p>\n<p>\n</p>"
              },
              "compoundname_html": "apache::thrift::op::fromSafePatch",
              "namespace_html": "apache::thrift::op"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/op/Patch.h/fromSafePatch",
          "namespace_html": "apache::thrift::op",
          "minprot": "public",
          "displayname_html": "fromSafePatch",
          "brief_html": "<p>Returns a Thrift Patch instance corresponding to the (decoded) <code>SafePatch</code>.</p>\n",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Patch.h/fromSafePatch",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Patch.h/fromSafePatch"
        },
        {
          "kind": "overloadset",
          "name_html": "toSafePatch",
          "compoundname_html": "apache::thrift::op::toSafePatch",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1op_1a24931c8e04a3e9bd00d0f0cc94e2c9f5",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "typename T"
                },
                {
                  "type_html": "typename Tag",
                  "defval_html": "type::infer_tag&lt;T&gt;"
                }
              ],
              "type_html": "<code>op::safe_patch_type</code>&lt; Tag &gt;",
              "definition_html": "op::safe_patch_type&lt;Tag&gt; apache::thrift::op::toSafePatch",
              "argsstring_html": "(const op::patch_type&lt; Tag &gt; &amp;patch)",
              "name_html": "toSafePatch",
              "param": [
                {
                  "type_html": "const <code>op::patch_type</code>&lt; Tag &gt; &amp;",
                  "declname_html": "patch"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/op/Patch.h",
                "line": "178",
                "column": "21",
                "bodyfile": "fbcode/thrift/lib/cpp2/op/Patch.h",
                "bodystart": "178",
                "bodyend": "189"
              },
              "definition": {
                "simple_html": "template &lt;typename T, typename Tag = type::infer_tag&lt;T&gt;&gt;\nop::safe_patch_type&lt;Tag&gt; toSafePatch(const op::patch_type&lt;Tag&gt;&amp; patch)",
                "simple_raw": "template <typename T, typename Tag = type::infer_tag<T>>\nop::safe_patch_type<Tag> toSafePatch(const op::patch_type<Tag>& patch)",
                "detailed_html": "template &lt;typename T, typename Tag = type::infer_tag&lt;T&gt;&gt;\nop::safe_patch_type&lt;Tag&gt; toSafePatch(const op::patch_type&lt;Tag&gt;&amp; patch)",
                "detailed_raw": "template <typename T, typename Tag = type::infer_tag<T>>\nop::safe_patch_type<Tag> toSafePatch(const op::patch_type<Tag>& patch)",
                "original_definition_html": "op::safe_patch_type&lt;Tag&gt; apache::thrift::op::toSafePatch",
                "original_argsstring_html": "(const op::patch_type&lt; Tag &gt; &amp;patch)"
              },
              "description": {
                "detailed_html": "<p>Returns a <code>SafePatch</code> instance corresponding to the encoded Thrift Patch. </p>"
              },
              "compoundname_html": "apache::thrift::op::toSafePatch",
              "namespace_html": "apache::thrift::op"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/op/Patch.h/toSafePatch",
          "namespace_html": "apache::thrift::op",
          "minprot": "public",
          "displayname_html": "toSafePatch",
          "brief_html": "<p>Returns a <code>SafePatch</code> instance corresponding to the encoded Thrift Patch. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Patch.h/toSafePatch",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/op/Patch.h/toSafePatch"
        }
      ]
    }
  ]
}