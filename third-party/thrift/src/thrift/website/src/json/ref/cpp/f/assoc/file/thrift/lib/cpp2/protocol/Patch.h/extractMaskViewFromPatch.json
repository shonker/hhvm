{
  "kind": "overloadset",
  "name_html": "extractMaskViewFromPatch",
  "compoundname_html": "apache::thrift::protocol::extractMaskViewFromPatch",
  "functions": [
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1ad9a97ec06ca019a9abe0204c93d4107d",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasksFromPatch\">ExtractedMasksFromPatch</a>",
      "definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
      "argsstring_html": "(const protocol::Object &amp;patch)",
      "name_html": "extractMaskViewFromPatch",
      "param": [
        {
          "type_html": "const protocol::Object &amp;",
          "declname_html": "patch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "89",
        "column": "25",
        "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "declline": "89",
        "declcolumn": "25"
      },
      "definition": {
        "simple_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object&amp; patch)",
        "simple_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object& patch)",
        "detailed_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object&amp; patch)",
        "detailed_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object& patch)",
        "original_definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
        "original_argsstring_html": "(const protocol::Object &amp;patch)"
      },
      "description": {
        "detailed_html": "<p>Constructs read and write Thrift Mask that only contain fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it uses the address of Value key as the key for the integer map mask. Note that Mask contains pointer to <code>protocol::Value</code> in patch, so caller needs to make sure Patch has longer lifetime than the mask. </p>"
      },
      "compoundname_html": "apache::thrift::protocol::extractMaskViewFromPatch",
      "namespace_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1a3889323db56acfc545877a9ffb33462c",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasksFromPatch\">ExtractedMasksFromPatch</a>",
      "definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
      "argsstring_html": "(Object &amp;&amp;patch)=delete",
      "name_html": "extractMaskViewFromPatch",
      "param": [
        {
          "type_html": "Object &amp;&amp;",
          "declname_html": "patch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "92",
        "column": "25",
        "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "declline": "92",
        "declcolumn": "25"
      },
      "definition": {
        "simple_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&amp;&amp; patch)",
        "simple_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&& patch)",
        "detailed_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&amp;&amp; patch) = delete",
        "detailed_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&& patch) = delete",
        "original_definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
        "original_argsstring_html": "(Object &amp;&amp;patch)=delete"
      },
      "compoundname_html": "apache::thrift::protocol::extractMaskViewFromPatch",
      "namespace_html": "apache::thrift::protocol"
    }
  ],
  "filepath": "f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskViewFromPatch",
  "namespace_html": "apache::thrift::protocol",
  "minprot": "public",
  "displayname_html": "extractMaskViewFromPatch",
  "brief_html": "<p>Constructs read and write Thrift Mask that only contain fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it uses the address of Value key as the key for the integer map mask. Note that Mask contains pointer to <code>protocol::Value</code> in patch, so caller needs to make sure Patch has longer lifetime than the mask. </p>",
  "groupname_html": "",
  "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskViewFromPatch",
  "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskViewFromPatch"
}