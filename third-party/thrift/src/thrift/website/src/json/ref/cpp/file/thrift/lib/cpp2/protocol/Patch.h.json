{
  "refid": "protocol_2Patch_8h",
  "kind": "file",
  "language": "C++",
  "compoundname_html": "Patch.h",
  "includes": [
    {
      "local": "no",
      "text_html": "folly/Portability.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/cpp2/protocol/Object.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/thrift/detail/protocol.h"
    },
    {
      "local": "no",
      "text_html": "thrift/lib/thrift/gen-cpp2/field_mask_types.h"
    }
  ],
  "innerclass": [
    {
      "refid": "structapache_1_1thrift_1_1protocol_1_1detail_1_1ApplyPatch",
      "prot": "public",
      "text_html": "apache::thrift::protocol::detail::ApplyPatch",
      "href": "/ref/cpp/struct/apache/thrift/protocol/detail/ApplyPatch",
      "is_transitive_innerclass": false
    },
    {
      "refid": "structapache_1_1thrift_1_1protocol_1_1ExtractedMasksFromPatch",
      "prot": "public",
      "text_html": "apache::thrift::protocol::ExtractedMasksFromPatch",
      "href": "/ref/cpp/struct/apache/thrift/protocol/ExtractedMasksFromPatch",
      "is_transitive_innerclass": false
    }
  ],
  "innernamespace": [
    {
      "refid": "namespaceapache",
      "text_html": "apache"
    },
    {
      "refid": "namespaceapache_1_1thrift",
      "text_html": "apache::thrift"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op",
      "text_html": "apache::thrift::op"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1op_1_1detail",
      "text_html": "apache::thrift::op::detail"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol",
      "text_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1_1detail",
      "text_html": "apache::thrift::protocol::detail"
    }
  ],
  "file_location": {
    "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h"
  },
  "filepath": "file/thrift/lib/cpp2/protocol/Patch.h",
  "href": "/ref/cpp/thrift/lib/cpp2/protocol/Patch.h",
  "free_vars": [
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1aee49be5c7ac3e8bd072811583d2167a8",
      "prot": "public",
      "static": "no",
      "constexpr": "yes",
      "mutable": "no",
      "type_html": "constexpr <a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/detail/ApplyPatch\">detail::ApplyPatch</a>",
      "definition_html": "constexpr detail::ApplyPatch apache::thrift::protocol::applyPatch",
      "argsstring_html": "",
      "name_html": "applyPatch",
      "initializer_html": "{}",
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "68",
        "column": "37",
        "bodyfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "bodystart": "68",
        "bodyend": "-1"
      },
      "description": {
        "param": [
          {
            "names_html": [
              "patch"
            ],
            "description_html": "<p>Object </p>"
          },
          {
            "names_html": [
              "value"
            ],
            "description_html": "<p>to be patched </p>"
          }
        ],
        "detailed_html": "<p>Takes protocol Object and targer protocol Value. Makes sure that Object represents a Patch and tries to apply this patch to the target Value.</p>\n<p>\n</p>"
      }
    }
  ],
  "free_functions": [
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1ad9a97ec06ca019a9abe0204c93d4107d",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasksFromPatch\">ExtractedMasksFromPatch</a>",
      "definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
      "argsstring_html": "(const protocol::Object &amp;patch)",
      "name_html": "extractMaskViewFromPatch",
      "param": [
        {
          "type_html": "const protocol::Object &amp;",
          "declname_html": "patch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "89",
        "column": "25",
        "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "declline": "89",
        "declcolumn": "25"
      },
      "definition": {
        "simple_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object&amp; patch)",
        "simple_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object& patch)",
        "detailed_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object&amp; patch)",
        "detailed_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object& patch)",
        "original_definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
        "original_argsstring_html": "(const protocol::Object &amp;patch)"
      },
      "description": {
        "detailed_html": "<p>Constructs read and write Thrift Mask that only contain fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it uses the address of Value key as the key for the integer map mask. Note that Mask contains pointer to <code>protocol::Value</code> in patch, so caller needs to make sure Patch has longer lifetime than the mask. </p>"
      },
      "compoundname_html": "apache::thrift::protocol::extractMaskViewFromPatch",
      "namespace_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1a3889323db56acfc545877a9ffb33462c",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasksFromPatch\">ExtractedMasksFromPatch</a>",
      "definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
      "argsstring_html": "(Object &amp;&amp;patch)=delete",
      "name_html": "extractMaskViewFromPatch",
      "param": [
        {
          "type_html": "Object &amp;&amp;",
          "declname_html": "patch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "92",
        "column": "25",
        "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "declline": "92",
        "declcolumn": "25"
      },
      "definition": {
        "simple_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&amp;&amp; patch)",
        "simple_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&& patch)",
        "detailed_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&amp;&amp; patch) = delete",
        "detailed_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&& patch) = delete",
        "original_definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
        "original_argsstring_html": "(Object &amp;&amp;patch)=delete"
      },
      "compoundname_html": "apache::thrift::protocol::extractMaskViewFromPatch",
      "namespace_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1a112b8d1c4057e25841d53011ef06d80c",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasksFromPatch\">ExtractedMasksFromPatch</a>",
      "definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskFromPatch",
      "argsstring_html": "(const protocol::Object &amp;patch)",
      "name_html": "extractMaskFromPatch",
      "param": [
        {
          "type_html": "const protocol::Object &amp;",
          "declname_html": "patch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "98",
        "column": "25",
        "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "declline": "98",
        "declcolumn": "25"
      },
      "definition": {
        "simple_html": "ExtractedMasksFromPatch extractMaskFromPatch(const protocol::Object&amp; patch)",
        "simple_raw": "ExtractedMasksFromPatch extractMaskFromPatch(const protocol::Object& patch)",
        "detailed_html": "ExtractedMasksFromPatch extractMaskFromPatch(const protocol::Object&amp; patch)",
        "detailed_raw": "ExtractedMasksFromPatch extractMaskFromPatch(const protocol::Object& patch)",
        "original_definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskFromPatch",
        "original_argsstring_html": "(const protocol::Object &amp;patch)"
      },
      "description": {
        "detailed_html": "<p>Constructs read and write Thrift Mask that only contain fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it only supports integer or string key. If the type of key map is not integer or string, it throws. </p>"
      },
      "compoundname_html": "apache::thrift::protocol::extractMaskFromPatch",
      "namespace_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1aeb772a322907969f91a113868e4f1175",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "type::StandardProtocol",
          "declname_html": "Protocol",
          "defname_html": "Protocol"
        }
      ],
      "type_html": "std::unique_ptr&lt; folly::IOBuf &gt;",
      "definition_html": "std::unique_ptr&lt;folly::IOBuf&gt; apache::thrift::protocol::applyPatchToSerializedData",
      "argsstring_html": "(const protocol::Object &amp;patch, const folly::IOBuf &amp;buf)",
      "name_html": "applyPatchToSerializedData",
      "param": [
        {
          "type_html": "const protocol::Object &amp;",
          "declname_html": "patch"
        },
        {
          "type_html": "const folly::IOBuf &amp;",
          "declname_html": "buf"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "101",
        "column": "17",
        "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "declline": "101",
        "declcolumn": "17"
      },
      "definition": {
        "simple_html": "template &lt;type::StandardProtocol Protocol&gt;\nstd::unique_ptr&lt;folly::IOBuf&gt; applyPatchToSerializedData(\n    const protocol::Object&amp; patch, const folly::IOBuf&amp; buf)",
        "simple_raw": "template <type::StandardProtocol Protocol>\nstd::unique_ptr<folly::IOBuf> applyPatchToSerializedData(\n    const protocol::Object& patch, const folly::IOBuf& buf)",
        "detailed_html": "template &lt;type::StandardProtocol Protocol&gt;\nstd::unique_ptr&lt;folly::IOBuf&gt; applyPatchToSerializedData(\n    const protocol::Object&amp; patch, const folly::IOBuf&amp; buf)",
        "detailed_raw": "template <type::StandardProtocol Protocol>\nstd::unique_ptr<folly::IOBuf> applyPatchToSerializedData(\n    const protocol::Object& patch, const folly::IOBuf& buf)",
        "original_definition_html": "std::unique_ptr&lt;folly::IOBuf&gt; apache::thrift::protocol::applyPatchToSerializedData",
        "original_argsstring_html": "(const protocol::Object &amp;patch, const folly::IOBuf &amp;buf)"
      },
      "compoundname_html": "apache::thrift::protocol::applyPatchToSerializedData",
      "namespace_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1a0153f0f835a499b2b261584cb1e8412a",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "Object",
      "definition_html": "Object apache::thrift::protocol::fromSafePatch",
      "argsstring_html": "(const protocol::Object &amp;safePatch)",
      "name_html": "fromSafePatch",
      "param": [
        {
          "type_html": "const protocol::Object &amp;",
          "declname_html": "safePatch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "114",
        "column": "8",
        "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "declline": "114",
        "declcolumn": "8"
      },
      "definition": {
        "simple_html": "Object fromSafePatch(const protocol::Object&amp; safePatch)",
        "simple_raw": "Object fromSafePatch(const protocol::Object& safePatch)",
        "detailed_html": "Object fromSafePatch(const protocol::Object&amp; safePatch)",
        "detailed_raw": "Object fromSafePatch(const protocol::Object& safePatch)",
        "original_definition_html": "Object apache::thrift::protocol::fromSafePatch",
        "original_argsstring_html": "(const protocol::Object &amp;safePatch)"
      },
      "description": {
        "exception": [
          {
            "names_html": [
              "std::runtime_error"
            ],
            "description_html": "<p>if the given <code>SafePatch</code> cannot be successfully decoded or safely applied in this process (eg. if the version of the Thrift Patch library in this process is not compatible with the minimum version required by <code>SafePatch</code>). </p>"
          }
        ],
        "detailed_html": "<p>Returns a Thrift Dynamic Patch instance corresponding to the (decoded) <code>SafePatch</code> in Protocol Object. Note, <code>SafePatch</code> needs to be converted to Thrift Dynamic Patch before applying or extracting field mask.</p>\n<p>\n</p>"
      },
      "compoundname_html": "apache::thrift::protocol::fromSafePatch",
      "namespace_html": "apache::thrift::protocol"
    },
    {
      "refid": "namespaceapache_1_1thrift_1_1protocol_1abd6c88cfb7e0336c08d825e35e70bcc3",
      "prot": "public",
      "static": "no",
      "const": "no",
      "explicit": "no",
      "inline": "no",
      "virtual": "non-virtual",
      "type_html": "Object",
      "definition_html": "Object apache::thrift::protocol::toSafePatch",
      "argsstring_html": "(const protocol::Object &amp;patch)",
      "name_html": "toSafePatch",
      "param": [
        {
          "type_html": "const protocol::Object &amp;",
          "declname_html": "patch"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "line": "120",
        "column": "8",
        "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
        "declline": "120",
        "declcolumn": "8"
      },
      "definition": {
        "simple_html": "Object toSafePatch(const protocol::Object&amp; patch)",
        "simple_raw": "Object toSafePatch(const protocol::Object& patch)",
        "detailed_html": "Object toSafePatch(const protocol::Object&amp; patch)",
        "detailed_raw": "Object toSafePatch(const protocol::Object& patch)",
        "original_definition_html": "Object apache::thrift::protocol::toSafePatch",
        "original_argsstring_html": "(const protocol::Object &amp;patch)"
      },
      "description": {
        "detailed_html": "<p>Returns a <code>SafePatch</code> instance in Protocol Object corresponding to the encoded Thrift Dynamic Patch. </p>"
      },
      "compoundname_html": "apache::thrift::protocol::toSafePatch",
      "namespace_html": "apache::thrift::protocol"
    }
  ],
  "free_overloadgroups": [
    {
      "groupname_html": "",
      "overloadsets": [
        {
          "kind": "overloadset",
          "name_html": "extractMaskViewFromPatch",
          "compoundname_html": "apache::thrift::protocol::extractMaskViewFromPatch",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1protocol_1ad9a97ec06ca019a9abe0204c93d4107d",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasksFromPatch\">ExtractedMasksFromPatch</a>",
              "definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
              "argsstring_html": "(const protocol::Object &amp;patch)",
              "name_html": "extractMaskViewFromPatch",
              "param": [
                {
                  "type_html": "const protocol::Object &amp;",
                  "declname_html": "patch"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "line": "89",
                "column": "25",
                "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "declline": "89",
                "declcolumn": "25"
              },
              "definition": {
                "simple_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object&amp; patch)",
                "simple_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object& patch)",
                "detailed_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object&amp; patch)",
                "detailed_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(const protocol::Object& patch)",
                "original_definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
                "original_argsstring_html": "(const protocol::Object &amp;patch)"
              },
              "description": {
                "detailed_html": "<p>Constructs read and write Thrift Mask that only contain fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it uses the address of Value key as the key for the integer map mask. Note that Mask contains pointer to <code>protocol::Value</code> in patch, so caller needs to make sure Patch has longer lifetime than the mask. </p>"
              },
              "compoundname_html": "apache::thrift::protocol::extractMaskViewFromPatch",
              "namespace_html": "apache::thrift::protocol"
            },
            {
              "refid": "namespaceapache_1_1thrift_1_1protocol_1a3889323db56acfc545877a9ffb33462c",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasksFromPatch\">ExtractedMasksFromPatch</a>",
              "definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
              "argsstring_html": "(Object &amp;&amp;patch)=delete",
              "name_html": "extractMaskViewFromPatch",
              "param": [
                {
                  "type_html": "Object &amp;&amp;",
                  "declname_html": "patch"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "line": "92",
                "column": "25",
                "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "declline": "92",
                "declcolumn": "25"
              },
              "definition": {
                "simple_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&amp;&amp; patch)",
                "simple_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&& patch)",
                "detailed_html": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&amp;&amp; patch) = delete",
                "detailed_raw": "ExtractedMasksFromPatch extractMaskViewFromPatch(Object&& patch) = delete",
                "original_definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskViewFromPatch",
                "original_argsstring_html": "(Object &amp;&amp;patch)=delete"
              },
              "compoundname_html": "apache::thrift::protocol::extractMaskViewFromPatch",
              "namespace_html": "apache::thrift::protocol"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskViewFromPatch",
          "namespace_html": "apache::thrift::protocol",
          "minprot": "public",
          "displayname_html": "extractMaskViewFromPatch",
          "brief_html": "<p>Constructs read and write Thrift Mask that only contain fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it uses the address of Value key as the key for the integer map mask. Note that Mask contains pointer to <code>protocol::Value</code> in patch, so caller needs to make sure Patch has longer lifetime than the mask. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskViewFromPatch",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskViewFromPatch"
        },
        {
          "kind": "overloadset",
          "name_html": "extractMaskFromPatch",
          "compoundname_html": "apache::thrift::protocol::extractMaskFromPatch",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1protocol_1a112b8d1c4057e25841d53011ef06d80c",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "<a href=\"https://www.internalfb.com/intern/staticdocs/fbcref/ref/cpp/struct/apache/thrift/protocol/ExtractedMasksFromPatch\">ExtractedMasksFromPatch</a>",
              "definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskFromPatch",
              "argsstring_html": "(const protocol::Object &amp;patch)",
              "name_html": "extractMaskFromPatch",
              "param": [
                {
                  "type_html": "const protocol::Object &amp;",
                  "declname_html": "patch"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "line": "98",
                "column": "25",
                "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "declline": "98",
                "declcolumn": "25"
              },
              "definition": {
                "simple_html": "ExtractedMasksFromPatch extractMaskFromPatch(const protocol::Object&amp; patch)",
                "simple_raw": "ExtractedMasksFromPatch extractMaskFromPatch(const protocol::Object& patch)",
                "detailed_html": "ExtractedMasksFromPatch extractMaskFromPatch(const protocol::Object&amp; patch)",
                "detailed_raw": "ExtractedMasksFromPatch extractMaskFromPatch(const protocol::Object& patch)",
                "original_definition_html": "ExtractedMasksFromPatch apache::thrift::protocol::extractMaskFromPatch",
                "original_argsstring_html": "(const protocol::Object &amp;patch)"
              },
              "description": {
                "detailed_html": "<p>Constructs read and write Thrift Mask that only contain fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it only supports integer or string key. If the type of key map is not integer or string, it throws. </p>"
              },
              "compoundname_html": "apache::thrift::protocol::extractMaskFromPatch",
              "namespace_html": "apache::thrift::protocol"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskFromPatch",
          "namespace_html": "apache::thrift::protocol",
          "minprot": "public",
          "displayname_html": "extractMaskFromPatch",
          "brief_html": "<p>Constructs read and write Thrift Mask that only contain fields that are modified by the Patch. It will construct nested Mask for map and object patches. For map, it only supports integer or string key. If the type of key map is not integer or string, it throws. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskFromPatch",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/extractMaskFromPatch"
        },
        {
          "kind": "overloadset",
          "name_html": "applyPatchToSerializedData",
          "compoundname_html": "apache::thrift::protocol::applyPatchToSerializedData",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1protocol_1aeb772a322907969f91a113868e4f1175",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "tparams": [
                {
                  "type_html": "type::StandardProtocol",
                  "declname_html": "Protocol",
                  "defname_html": "Protocol"
                }
              ],
              "type_html": "std::unique_ptr&lt; folly::IOBuf &gt;",
              "definition_html": "std::unique_ptr&lt;folly::IOBuf&gt; apache::thrift::protocol::applyPatchToSerializedData",
              "argsstring_html": "(const protocol::Object &amp;patch, const folly::IOBuf &amp;buf)",
              "name_html": "applyPatchToSerializedData",
              "param": [
                {
                  "type_html": "const protocol::Object &amp;",
                  "declname_html": "patch"
                },
                {
                  "type_html": "const folly::IOBuf &amp;",
                  "declname_html": "buf"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "line": "101",
                "column": "17",
                "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "declline": "101",
                "declcolumn": "17"
              },
              "definition": {
                "simple_html": "template &lt;type::StandardProtocol Protocol&gt;\nstd::unique_ptr&lt;folly::IOBuf&gt; applyPatchToSerializedData(\n    const protocol::Object&amp; patch, const folly::IOBuf&amp; buf)",
                "simple_raw": "template <type::StandardProtocol Protocol>\nstd::unique_ptr<folly::IOBuf> applyPatchToSerializedData(\n    const protocol::Object& patch, const folly::IOBuf& buf)",
                "detailed_html": "template &lt;type::StandardProtocol Protocol&gt;\nstd::unique_ptr&lt;folly::IOBuf&gt; applyPatchToSerializedData(\n    const protocol::Object&amp; patch, const folly::IOBuf&amp; buf)",
                "detailed_raw": "template <type::StandardProtocol Protocol>\nstd::unique_ptr<folly::IOBuf> applyPatchToSerializedData(\n    const protocol::Object& patch, const folly::IOBuf& buf)",
                "original_definition_html": "std::unique_ptr&lt;folly::IOBuf&gt; apache::thrift::protocol::applyPatchToSerializedData",
                "original_argsstring_html": "(const protocol::Object &amp;patch, const folly::IOBuf &amp;buf)"
              },
              "compoundname_html": "apache::thrift::protocol::applyPatchToSerializedData",
              "namespace_html": "apache::thrift::protocol"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/applyPatchToSerializedData",
          "namespace_html": "apache::thrift::protocol",
          "minprot": "public",
          "displayname_html": "applyPatchToSerializedData",
          "brief_html": "",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/applyPatchToSerializedData",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/applyPatchToSerializedData"
        },
        {
          "kind": "overloadset",
          "name_html": "fromSafePatch",
          "compoundname_html": "apache::thrift::protocol::fromSafePatch",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1protocol_1a0153f0f835a499b2b261584cb1e8412a",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "Object",
              "definition_html": "Object apache::thrift::protocol::fromSafePatch",
              "argsstring_html": "(const protocol::Object &amp;safePatch)",
              "name_html": "fromSafePatch",
              "param": [
                {
                  "type_html": "const protocol::Object &amp;",
                  "declname_html": "safePatch"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "line": "114",
                "column": "8",
                "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "declline": "114",
                "declcolumn": "8"
              },
              "definition": {
                "simple_html": "Object fromSafePatch(const protocol::Object&amp; safePatch)",
                "simple_raw": "Object fromSafePatch(const protocol::Object& safePatch)",
                "detailed_html": "Object fromSafePatch(const protocol::Object&amp; safePatch)",
                "detailed_raw": "Object fromSafePatch(const protocol::Object& safePatch)",
                "original_definition_html": "Object apache::thrift::protocol::fromSafePatch",
                "original_argsstring_html": "(const protocol::Object &amp;safePatch)"
              },
              "description": {
                "exception": [
                  {
                    "names_html": [
                      "std::runtime_error"
                    ],
                    "description_html": "<p>if the given <code>SafePatch</code> cannot be successfully decoded or safely applied in this process (eg. if the version of the Thrift Patch library in this process is not compatible with the minimum version required by <code>SafePatch</code>). </p>"
                  }
                ],
                "detailed_html": "<p>Returns a Thrift Dynamic Patch instance corresponding to the (decoded) <code>SafePatch</code> in Protocol Object. Note, <code>SafePatch</code> needs to be converted to Thrift Dynamic Patch before applying or extracting field mask.</p>\n<p>\n</p>"
              },
              "compoundname_html": "apache::thrift::protocol::fromSafePatch",
              "namespace_html": "apache::thrift::protocol"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/fromSafePatch",
          "namespace_html": "apache::thrift::protocol",
          "minprot": "public",
          "displayname_html": "fromSafePatch",
          "brief_html": "<p>Returns a Thrift Dynamic Patch instance corresponding to the (decoded) <code>SafePatch</code> in Protocol Object. Note, <code>SafePatch</code> needs to be converted to Thrift Dynamic Patch before applying or extracting field mask.</p>\n",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/fromSafePatch",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/fromSafePatch"
        },
        {
          "kind": "overloadset",
          "name_html": "toSafePatch",
          "compoundname_html": "apache::thrift::protocol::toSafePatch",
          "functions": [
            {
              "refid": "namespaceapache_1_1thrift_1_1protocol_1abd6c88cfb7e0336c08d825e35e70bcc3",
              "prot": "public",
              "static": "no",
              "const": "no",
              "explicit": "no",
              "inline": "no",
              "virtual": "non-virtual",
              "type_html": "Object",
              "definition_html": "Object apache::thrift::protocol::toSafePatch",
              "argsstring_html": "(const protocol::Object &amp;patch)",
              "name_html": "toSafePatch",
              "param": [
                {
                  "type_html": "const protocol::Object &amp;",
                  "declname_html": "patch"
                }
              ],
              "location": {
                "file": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "line": "120",
                "column": "8",
                "declfile": "fbcode/thrift/lib/cpp2/protocol/Patch.h",
                "declline": "120",
                "declcolumn": "8"
              },
              "definition": {
                "simple_html": "Object toSafePatch(const protocol::Object&amp; patch)",
                "simple_raw": "Object toSafePatch(const protocol::Object& patch)",
                "detailed_html": "Object toSafePatch(const protocol::Object&amp; patch)",
                "detailed_raw": "Object toSafePatch(const protocol::Object& patch)",
                "original_definition_html": "Object apache::thrift::protocol::toSafePatch",
                "original_argsstring_html": "(const protocol::Object &amp;patch)"
              },
              "description": {
                "detailed_html": "<p>Returns a <code>SafePatch</code> instance in Protocol Object corresponding to the encoded Thrift Dynamic Patch. </p>"
              },
              "compoundname_html": "apache::thrift::protocol::toSafePatch",
              "namespace_html": "apache::thrift::protocol"
            }
          ],
          "filepath": "f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/toSafePatch",
          "namespace_html": "apache::thrift::protocol",
          "minprot": "public",
          "displayname_html": "toSafePatch",
          "brief_html": "<p>Returns a <code>SafePatch</code> instance in Protocol Object corresponding to the encoded Thrift Dynamic Patch. </p>",
          "groupname_html": "",
          "href": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/toSafePatch",
          "refid": "/ref/cpp/f/assoc/file/thrift/lib/cpp2/protocol/Patch.h/toSafePatch"
        }
      ]
    }
  ]
}