
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/py3/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/py3/gen-python-capi/module/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_module__thrift_types_capi));
  return import();
}
  static constexpr std::int16_t _fbthrift__SimpleException__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__OptionalRefStruct__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__SimpleStruct__tuple_pos[8] = {
    1, 2, 3, 4, 5, 6, 7, 8
  };
  static constexpr std::int16_t _fbthrift__HiddenException__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__BinaryUnionStruct__tuple_pos[1] = {
    1
  };
} // namespace

ExtractorResult<::py3::simple::SimpleException>
Extractor<::py3::simple::SimpleException>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a SimpleException");
      }
      return extractorError<::py3::simple::SimpleException>(
          "Marshal error: SimpleException");
  }
  StrongRef fbThriftData(getExceptionThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::py3::simple::SimpleException>>{}(*fbThriftData);
}

ExtractorResult<::py3::simple::SimpleException>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::py3::simple::SimpleException>>::operator()(PyObject* fbThriftData) {
  ::py3::simple::SimpleException cpp;
  std::optional<std::string_view> error;
  Extractor<int16_t>{}.extractInto(
      cpp.err_code_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__SimpleException__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::py3::simple::SimpleException>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__SimpleException(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: SimpleException");
  }
  return result;
}


PyObject* Constructor<::py3::simple::SimpleException>::operator()(
    const ::py3::simple::SimpleException& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleException>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__module__SimpleException(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleException>>::operator()(
    [[maybe_unused]] const ::py3::simple::SimpleException& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__err_code(
    Constructor<int16_t>{}
    .constructFrom(val.err_code_ref()));
  if (!_fbthrift__err_code ||
      setStructField(
          *fbthrift_data,
          _fbthrift__SimpleException__tuple_pos[0],
          *_fbthrift__err_code) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::py3::simple::OptionalRefStruct>
Extractor<::py3::simple::OptionalRefStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a OptionalRefStruct");
      }
      return extractorError<::py3::simple::OptionalRefStruct>(
          "Marshal error: OptionalRefStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::py3::simple::OptionalRefStruct>>{}(*fbThriftData);
}

ExtractorResult<::py3::simple::OptionalRefStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::py3::simple::OptionalRefStruct>>::operator()(PyObject* fbThriftData) {
  ::py3::simple::OptionalRefStruct cpp;
  std::optional<std::string_view> error;
  Extractor<std::unique_ptr<folly::IOBuf>>{}.extractInto(
      cpp.optional_blob_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__OptionalRefStruct__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::py3::simple::OptionalRefStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__OptionalRefStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: OptionalRefStruct");
  }
  return result;
}


PyObject* Constructor<::py3::simple::OptionalRefStruct>::operator()(
    const ::py3::simple::OptionalRefStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::OptionalRefStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__module__OptionalRefStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::OptionalRefStruct>>::operator()(
    [[maybe_unused]] const ::py3::simple::OptionalRefStruct& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__optional_blob(
    Constructor<std::unique_ptr<folly::IOBuf>>{}
    .constructFrom(val.optional_blob_ref()));
  if (_fbthrift__optional_blob.isNone()) {
    Py_INCREF(Py_None);
    PyTuple_SET_ITEM(
      *fbthrift_data,
      _fbthrift__OptionalRefStruct__tuple_pos[0],
      Py_None);
  } else
  if (!_fbthrift__optional_blob ||
      setStructField(
          *fbthrift_data,
          _fbthrift__OptionalRefStruct__tuple_pos[0],
          *_fbthrift__optional_blob) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::py3::simple::SimpleStruct>
Extractor<::py3::simple::SimpleStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a SimpleStruct");
      }
      return extractorError<::py3::simple::SimpleStruct>(
          "Marshal error: SimpleStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::py3::simple::SimpleStruct>>{}(*fbThriftData);
}

ExtractorResult<::py3::simple::SimpleStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::py3::simple::SimpleStruct>>::operator()(PyObject* fbThriftData) {
  ::py3::simple::SimpleStruct cpp;
  std::optional<std::string_view> error;
  Extractor<bool>{}.extractInto(
      cpp.is_on_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__SimpleStruct__tuple_pos[0]),
      error);
  Extractor<int8_t>{}.extractInto(
      cpp.tiny_int_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__SimpleStruct__tuple_pos[1]),
      error);
  Extractor<int16_t>{}.extractInto(
      cpp.small_int_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__SimpleStruct__tuple_pos[2]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.nice_sized_int_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__SimpleStruct__tuple_pos[3]),
      error);
  Extractor<int64_t>{}.extractInto(
      cpp.big_int_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__SimpleStruct__tuple_pos[4]),
      error);
  Extractor<double>{}.extractInto(
      cpp.real_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__SimpleStruct__tuple_pos[5]),
      error);
  Extractor<float>{}.extractInto(
      cpp.smaller_real_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__SimpleStruct__tuple_pos[6]),
      error);
  Extractor<int16_t>{}.extractInto(
      cpp.hidden_field_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__SimpleStruct__tuple_pos[7]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::py3::simple::SimpleStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__SimpleStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: SimpleStruct");
  }
  return result;
}


PyObject* Constructor<::py3::simple::SimpleStruct>::operator()(
    const ::py3::simple::SimpleStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__module__SimpleStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::SimpleStruct>>::operator()(
    [[maybe_unused]] const ::py3::simple::SimpleStruct& val) {
  StrongRef fbthrift_data(createStructTuple(8));
  StrongRef _fbthrift__is_on(
    Constructor<bool>{}
    .constructFrom(val.is_on_ref()));
  if (!_fbthrift__is_on ||
      setStructField(
          *fbthrift_data,
          _fbthrift__SimpleStruct__tuple_pos[0],
          *_fbthrift__is_on) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__tiny_int(
    Constructor<int8_t>{}
    .constructFrom(val.tiny_int_ref()));
  if (!_fbthrift__tiny_int ||
      setStructField(
          *fbthrift_data,
          _fbthrift__SimpleStruct__tuple_pos[1],
          *_fbthrift__tiny_int) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__small_int(
    Constructor<int16_t>{}
    .constructFrom(val.small_int_ref()));
  if (!_fbthrift__small_int ||
      setStructField(
          *fbthrift_data,
          _fbthrift__SimpleStruct__tuple_pos[2],
          *_fbthrift__small_int) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__nice_sized_int(
    Constructor<int32_t>{}
    .constructFrom(val.nice_sized_int_ref()));
  if (!_fbthrift__nice_sized_int ||
      setStructField(
          *fbthrift_data,
          _fbthrift__SimpleStruct__tuple_pos[3],
          *_fbthrift__nice_sized_int) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__big_int(
    Constructor<int64_t>{}
    .constructFrom(val.big_int_ref()));
  if (!_fbthrift__big_int ||
      setStructField(
          *fbthrift_data,
          _fbthrift__SimpleStruct__tuple_pos[4],
          *_fbthrift__big_int) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__real(
    Constructor<double>{}
    .constructFrom(val.real_ref()));
  if (!_fbthrift__real ||
      setStructField(
          *fbthrift_data,
          _fbthrift__SimpleStruct__tuple_pos[5],
          *_fbthrift__real) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__smaller_real(
    Constructor<float>{}
    .constructFrom(val.smaller_real_ref()));
  if (!_fbthrift__smaller_real ||
      setStructField(
          *fbthrift_data,
          _fbthrift__SimpleStruct__tuple_pos[6],
          *_fbthrift__smaller_real) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__hidden_field(
    Constructor<int16_t>{}
    .constructFrom(val.hidden_field_ref()));
  if (!_fbthrift__hidden_field ||
      setStructField(
          *fbthrift_data,
          _fbthrift__SimpleStruct__tuple_pos[7],
          *_fbthrift__hidden_field) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::py3::simple::HiddenTypeFieldsStruct>
Extractor<::py3::simple::HiddenTypeFieldsStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::py3::simple::HiddenTypeFieldsStruct>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__HiddenTypeFieldsStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::py3::simple::HiddenTypeFieldsStruct>(
        "Thrift serialize error: HiddenTypeFieldsStruct");
  }
  return detail::deserialize_iobuf<::py3::simple::HiddenTypeFieldsStruct>(std::move(val));
}


ExtractorResult<::py3::simple::HiddenTypeFieldsStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::py3::simple::HiddenTypeFieldsStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::py3::simple::HiddenTypeFieldsStruct>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__HiddenTypeFieldsStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::py3::simple::HiddenTypeFieldsStruct>(
          "Init from fbthrift error: HiddenTypeFieldsStruct");
  }
  return Extractor<::py3::simple::HiddenTypeFieldsStruct>{}(*obj);
}

int Extractor<::py3::simple::HiddenTypeFieldsStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__HiddenTypeFieldsStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: HiddenTypeFieldsStruct");
  }
  return result;
}


PyObject* Constructor<::py3::simple::HiddenTypeFieldsStruct>::operator()(
    const ::py3::simple::HiddenTypeFieldsStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  ::std::unique_ptr<::folly::IOBuf> serialized;
  try {
    serialized = detail::serialize_to_iobuf(val);
  } catch (const apache::thrift::TProtocolException& e) {
    detail::handle_protocol_error(e);
    return nullptr;
  }
  DCHECK(serialized);
  auto ptr = construct__module__HiddenTypeFieldsStruct(std::move(serialized));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenTypeFieldsStruct>>::operator()(
    const ::py3::simple::HiddenTypeFieldsStruct& val) {
  auto obj = StrongRef(Constructor<::py3::simple::HiddenTypeFieldsStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::py3::simple::detail::AdaptedUnion>
Extractor<::py3::simple::detail::AdaptedUnion>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a AdaptedUnion");
      }
      return extractorError<::py3::simple::detail::AdaptedUnion>(
          "Marshal error: AdaptedUnion");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::py3::simple::detail::AdaptedUnion>>{}(*fbThriftData);
}

ExtractorResult<::py3::simple::detail::AdaptedUnion>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::py3::simple::detail::AdaptedUnion>>::operator()(PyObject* fbThriftData) {
  ::py3::simple::detail::AdaptedUnion cpp;
  std::optional<std::string_view> error;
  auto type_tag = Extractor<int64_t>{}(PyTuple_GET_ITEM(fbThriftData, 0));
  if (type_tag.hasError()) {
    return folly::makeUnexpected(type_tag.error());
  }
  switch (*type_tag) {
    case 0:
      break; // union is unset
    case 1:
      Extractor<int16_t>{}.extractInto(
          cpp.best_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
  }
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::py3::simple::detail::AdaptedUnion>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__AdaptedUnion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AdaptedUnion");
  }
  return result;
}


PyObject* Constructor<::py3::simple::detail::AdaptedUnion>::operator()(
    const ::py3::simple::detail::AdaptedUnion& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::detail::AdaptedUnion>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__module__AdaptedUnion(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::detail::AdaptedUnion>>::operator()(
    [[maybe_unused]] const ::py3::simple::detail::AdaptedUnion& val) {
  int64_t type_key = static_cast<int64_t>(val.getType());
  StrongRef py_val;
  switch (type_key) {
    case 0:
      Py_INCREF(Py_None);
      py_val = StrongRef(Py_None);
      break;
    case 1:
      py_val = StrongRef(
          Constructor<int16_t>{}
          .constructFrom(val.best_ref()));
      break;
  }
  if (!py_val) {
    return nullptr;
  }
  return unionTupleFromValue(type_key, *py_val);
}


ExtractorResult<::py3::simple::HiddenException>
Extractor<::py3::simple::HiddenException>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a HiddenException");
      }
      return extractorError<::py3::simple::HiddenException>(
          "Marshal error: HiddenException");
  }
  StrongRef fbThriftData(getExceptionThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::py3::simple::HiddenException>>{}(*fbThriftData);
}

ExtractorResult<::py3::simple::HiddenException>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::py3::simple::HiddenException>>::operator()(PyObject* fbThriftData) {
  ::py3::simple::HiddenException cpp;
  std::optional<std::string_view> error;
  Extractor<int16_t>{}.extractInto(
      cpp.test_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__HiddenException__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::py3::simple::HiddenException>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__HiddenException(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: HiddenException");
  }
  return result;
}


PyObject* Constructor<::py3::simple::HiddenException>::operator()(
    const ::py3::simple::HiddenException& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenException>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__module__HiddenException(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::HiddenException>>::operator()(
    [[maybe_unused]] const ::py3::simple::HiddenException& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__test(
    Constructor<int16_t>{}
    .constructFrom(val.test_ref()));
  if (!_fbthrift__test ||
      setStructField(
          *fbthrift_data,
          _fbthrift__HiddenException__tuple_pos[0],
          *_fbthrift__test) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::py3::simple::ComplexStruct>
Extractor<::py3::simple::ComplexStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::py3::simple::ComplexStruct>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__ComplexStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::py3::simple::ComplexStruct>(
        "Thrift serialize error: ComplexStruct");
  }
  return detail::deserialize_iobuf<::py3::simple::ComplexStruct>(std::move(val));
}


ExtractorResult<::py3::simple::ComplexStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::py3::simple::ComplexStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::py3::simple::ComplexStruct>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__ComplexStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::py3::simple::ComplexStruct>(
          "Init from fbthrift error: ComplexStruct");
  }
  return Extractor<::py3::simple::ComplexStruct>{}(*obj);
}

int Extractor<::py3::simple::ComplexStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__ComplexStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ComplexStruct");
  }
  return result;
}


PyObject* Constructor<::py3::simple::ComplexStruct>::operator()(
    const ::py3::simple::ComplexStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  ::std::unique_ptr<::folly::IOBuf> serialized;
  try {
    serialized = detail::serialize_to_iobuf(val);
  } catch (const apache::thrift::TProtocolException& e) {
    detail::handle_protocol_error(e);
    return nullptr;
  }
  DCHECK(serialized);
  auto ptr = construct__module__ComplexStruct(std::move(serialized));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::ComplexStruct>>::operator()(
    const ::py3::simple::ComplexStruct& val) {
  auto obj = StrongRef(Constructor<::py3::simple::ComplexStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::py3::simple::BinaryUnion>
Extractor<::py3::simple::BinaryUnion>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a BinaryUnion");
      }
      return extractorError<::py3::simple::BinaryUnion>(
          "Marshal error: BinaryUnion");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::py3::simple::BinaryUnion>>{}(*fbThriftData);
}

ExtractorResult<::py3::simple::BinaryUnion>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::py3::simple::BinaryUnion>>::operator()(PyObject* fbThriftData) {
  ::py3::simple::BinaryUnion cpp;
  std::optional<std::string_view> error;
  auto type_tag = Extractor<int64_t>{}(PyTuple_GET_ITEM(fbThriftData, 0));
  if (type_tag.hasError()) {
    return folly::makeUnexpected(type_tag.error());
  }
  switch (*type_tag) {
    case 0:
      break; // union is unset
    case 1:
      Extractor<folly::IOBuf>{}.extractInto(
          cpp.iobuf_val_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
  }
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::py3::simple::BinaryUnion>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__BinaryUnion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: BinaryUnion");
  }
  return result;
}


PyObject* Constructor<::py3::simple::BinaryUnion>::operator()(
    const ::py3::simple::BinaryUnion& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnion>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__module__BinaryUnion(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnion>>::operator()(
    [[maybe_unused]] const ::py3::simple::BinaryUnion& val) {
  int64_t type_key = static_cast<int64_t>(val.getType());
  StrongRef py_val;
  switch (type_key) {
    case 0:
      Py_INCREF(Py_None);
      py_val = StrongRef(Py_None);
      break;
    case 1:
      py_val = StrongRef(
          Constructor<folly::IOBuf>{}
          .constructFrom(val.iobuf_val_ref()));
      break;
  }
  if (!py_val) {
    return nullptr;
  }
  return unionTupleFromValue(type_key, *py_val);
}


ExtractorResult<::py3::simple::BinaryUnionStruct>
Extractor<::py3::simple::BinaryUnionStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a BinaryUnionStruct");
      }
      return extractorError<::py3::simple::BinaryUnionStruct>(
          "Marshal error: BinaryUnionStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::py3::simple::BinaryUnionStruct>>{}(*fbThriftData);
}

ExtractorResult<::py3::simple::BinaryUnionStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::py3::simple::BinaryUnionStruct>>::operator()(PyObject* fbThriftData) {
  ::py3::simple::BinaryUnionStruct cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedStruct<::py3::simple::BinaryUnion>>{}.extractInto(
      cpp.u_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__BinaryUnionStruct__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::py3::simple::BinaryUnionStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__BinaryUnionStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: BinaryUnionStruct");
  }
  return result;
}


PyObject* Constructor<::py3::simple::BinaryUnionStruct>::operator()(
    const ::py3::simple::BinaryUnionStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnionStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__module__BinaryUnionStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::py3::simple::BinaryUnionStruct>>::operator()(
    [[maybe_unused]] const ::py3::simple::BinaryUnionStruct& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__u(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::py3::simple::BinaryUnion>>{}
    .constructFrom(val.u_ref()));
  if (!_fbthrift__u ||
      setStructField(
          *fbthrift_data,
          _fbthrift__BinaryUnionStruct__tuple_pos[0],
          *_fbthrift__u) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::py3::simple::AnEnum>
Extractor<::py3::simple::AnEnum>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::py3::simple::AnEnum>(
        "Error getting python int value: AnEnum");
  }
  return static_cast<::py3::simple::AnEnum>(val);
}

int Extractor<::py3::simple::AnEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__AnEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AnEnum");
  }
  return result;
}


PyObject* Constructor<::py3::simple::AnEnum>::operator()(
    ::py3::simple::AnEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__AnEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::py3::simple::AnEnumRenamed>
Extractor<::py3::simple::AnEnumRenamed>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::py3::simple::AnEnumRenamed>(
        "Error getting python int value: AnEnumRenamed");
  }
  return static_cast<::py3::simple::AnEnumRenamed>(val);
}

int Extractor<::py3::simple::AnEnumRenamed>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__AnEnumRenamed(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AnEnumRenamed");
  }
  return result;
}


PyObject* Constructor<::py3::simple::AnEnumRenamed>::operator()(
    ::py3::simple::AnEnumRenamed val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__AnEnumRenamed(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::py3::simple::Flags>
Extractor<::py3::simple::Flags>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::py3::simple::Flags>(
        "Error getting python int value: Flags");
  }
  return static_cast<::py3::simple::Flags>(val);
}

int Extractor<::py3::simple::Flags>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__Flags(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Flags");
  }
  return result;
}


PyObject* Constructor<::py3::simple::Flags>::operator()(
    ::py3::simple::Flags val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__Flags(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
