/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/py3/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/py3/gen-py3cpp/module_types.h"
#include "thrift/compiler/test/fixtures/py3/gen-py3cpp/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/py3/gen-py3cpp/module_data.h"


namespace apache { namespace thrift {

folly::Range<::py3::simple::AnEnum const*> const TEnumTraits<::py3::simple::AnEnum>::values = folly::range(TEnumDataStorage<::py3::simple::AnEnum>::values);
folly::Range<std::string_view const*> const TEnumTraits<::py3::simple::AnEnum>::names = folly::range(TEnumDataStorage<::py3::simple::AnEnum>::names);

bool TEnumTraits<::py3::simple::AnEnum>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::AnEnum>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

folly::Range<::py3::simple::AnEnumRenamed const*> const TEnumTraits<::py3::simple::AnEnumRenamed>::values = folly::range(TEnumDataStorage<::py3::simple::AnEnumRenamed>::values);
folly::Range<std::string_view const*> const TEnumTraits<::py3::simple::AnEnumRenamed>::names = folly::range(TEnumDataStorage<::py3::simple::AnEnumRenamed>::names);

bool TEnumTraits<::py3::simple::AnEnumRenamed>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::AnEnumRenamed>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

folly::Range<::py3::simple::Flags const*> const TEnumTraits<::py3::simple::Flags>::values = folly::range(TEnumDataStorage<::py3::simple::Flags>::values);
folly::Range<std::string_view const*> const TEnumTraits<::py3::simple::Flags>::names = folly::range(TEnumDataStorage<::py3::simple::Flags>::names);

bool TEnumTraits<::py3::simple::Flags>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::Flags>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::SimpleException>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::SimpleException>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3::simple {

std::string_view SimpleException::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SimpleException>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SimpleException::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SimpleException>::name;
}

SimpleException::SimpleException(const SimpleException&) = default;
SimpleException& SimpleException::operator=(const SimpleException&) = default;
SimpleException::SimpleException() :
      __fbthrift_field_err_code() {
}


SimpleException::~SimpleException() {}

SimpleException::SimpleException([[maybe_unused]] SimpleException&& other) noexcept :
    __fbthrift_field_err_code(std::move(other.__fbthrift_field_err_code)),
    __isset(other.__isset) {
}

SimpleException& SimpleException::operator=([[maybe_unused]] SimpleException&& other) noexcept {
    this->__fbthrift_field_err_code = std::move(other.__fbthrift_field_err_code);
    __isset = other.__isset;
    return *this;
}


SimpleException::SimpleException(apache::thrift::FragileConstructor, ::std::int16_t err_code__arg) :
    __fbthrift_field_err_code(std::move(err_code__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void SimpleException::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_err_code = ::std::int16_t();
  __isset = {};
}

void SimpleException::__fbthrift_clear_terse_fields() {
}

bool SimpleException::__fbthrift_is_empty() const {
  return false;
}

bool SimpleException::operator==([[maybe_unused]] const SimpleException& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SimpleException::operator<([[maybe_unused]] const SimpleException& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] SimpleException& a, [[maybe_unused]] SimpleException& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_err_code, b.__fbthrift_field_err_code);
  swap(a.__isset, b.__isset);
}

template void SimpleException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SimpleException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SimpleException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SimpleException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::OptionalRefStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::OptionalRefStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3::simple {

std::string_view OptionalRefStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<OptionalRefStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view OptionalRefStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<OptionalRefStruct>::name;
}

OptionalRefStruct::OptionalRefStruct(const OptionalRefStruct& srcObj) :
    __fbthrift_field_optional_blob(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::binary>(srcObj.__fbthrift_field_optional_blob)),
    __isset(srcObj.__isset) {
}

static void __fbthrift_swap(OptionalRefStruct& lhs, OptionalRefStruct& rhs) { swap(lhs, rhs); }
OptionalRefStruct& OptionalRefStruct::operator=(const OptionalRefStruct& other) {
  OptionalRefStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

OptionalRefStruct::OptionalRefStruct() {
}


OptionalRefStruct::~OptionalRefStruct() {}

OptionalRefStruct::OptionalRefStruct([[maybe_unused]] OptionalRefStruct&& other) noexcept :
    __fbthrift_field_optional_blob(std::move(other.__fbthrift_field_optional_blob)),
    __isset(other.__isset) {
}

OptionalRefStruct& OptionalRefStruct::operator=([[maybe_unused]] OptionalRefStruct&& other) noexcept {
    this->__fbthrift_field_optional_blob = std::move(other.__fbthrift_field_optional_blob);
    __isset = other.__isset;
    return *this;
}


OptionalRefStruct::OptionalRefStruct(apache::thrift::FragileConstructor, ::py3::simple::IOBufPtr optional_blob__arg) :
    __fbthrift_field_optional_blob(std::move(optional_blob__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void OptionalRefStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_optional_blob = apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::fromStringLiteral("");
  __isset = {};
}

void OptionalRefStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalRefStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0));
}

bool OptionalRefStruct::operator==([[maybe_unused]] const OptionalRefStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool OptionalRefStruct::operator<([[maybe_unused]] const OptionalRefStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] OptionalRefStruct& a, [[maybe_unused]] OptionalRefStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_optional_blob, b.__fbthrift_field_optional_blob);
  swap(a.__isset, b.__isset);
}

template void OptionalRefStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalRefStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalRefStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalRefStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalRefStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalRefStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalRefStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalRefStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::SimpleStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::SimpleStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3::simple {

std::string_view SimpleStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SimpleStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view SimpleStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SimpleStruct>::name;
}

SimpleStruct::SimpleStruct(const SimpleStruct&) = default;
SimpleStruct& SimpleStruct::operator=(const SimpleStruct&) = default;
SimpleStruct::SimpleStruct([[maybe_unused]] SimpleStruct&& other) noexcept :
    __fbthrift_field_is_on(std::move(other.__fbthrift_field_is_on)),
    __fbthrift_field_tiny_int(std::move(other.__fbthrift_field_tiny_int)),
    __fbthrift_field_small_int(std::move(other.__fbthrift_field_small_int)),
    __fbthrift_field_nice_sized_int(std::move(other.__fbthrift_field_nice_sized_int)),
    __fbthrift_field_big_int(std::move(other.__fbthrift_field_big_int)),
    __fbthrift_field_real(std::move(other.__fbthrift_field_real)),
    __fbthrift_field_smaller_real(std::move(other.__fbthrift_field_smaller_real)),
    __fbthrift_field_hidden_field(std::move(other.__fbthrift_field_hidden_field)),
    __isset(other.__isset) {
}

SimpleStruct& SimpleStruct::operator=([[maybe_unused]] SimpleStruct&& other) noexcept {
    this->__fbthrift_field_is_on = std::move(other.__fbthrift_field_is_on);
    this->__fbthrift_field_tiny_int = std::move(other.__fbthrift_field_tiny_int);
    this->__fbthrift_field_small_int = std::move(other.__fbthrift_field_small_int);
    this->__fbthrift_field_nice_sized_int = std::move(other.__fbthrift_field_nice_sized_int);
    this->__fbthrift_field_big_int = std::move(other.__fbthrift_field_big_int);
    this->__fbthrift_field_real = std::move(other.__fbthrift_field_real);
    this->__fbthrift_field_smaller_real = std::move(other.__fbthrift_field_smaller_real);
    this->__fbthrift_field_hidden_field = std::move(other.__fbthrift_field_hidden_field);
    __isset = other.__isset;
    return *this;
}


SimpleStruct::SimpleStruct(apache::thrift::FragileConstructor, bool is_on__arg, ::std::int8_t tiny_int__arg, ::std::int16_t small_int__arg, ::std::int32_t nice_sized_int__arg, ::std::int64_t big_int__arg, double real__arg, float smaller_real__arg, ::std::int16_t hidden_field__arg) :
    __fbthrift_field_is_on(std::move(is_on__arg)),
    __fbthrift_field_tiny_int(std::move(tiny_int__arg)),
    __fbthrift_field_small_int(std::move(small_int__arg)),
    __fbthrift_field_nice_sized_int(std::move(nice_sized_int__arg)),
    __fbthrift_field_big_int(std::move(big_int__arg)),
    __fbthrift_field_real(std::move(real__arg)),
    __fbthrift_field_smaller_real(std::move(smaller_real__arg)),
    __fbthrift_field_hidden_field(std::move(hidden_field__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
}


void SimpleStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_is_on = bool();
  this->__fbthrift_field_tiny_int = ::std::int8_t();
  this->__fbthrift_field_small_int = ::std::int16_t();
  this->__fbthrift_field_nice_sized_int = ::std::int32_t();
  this->__fbthrift_field_big_int = ::std::int64_t();
  this->__fbthrift_field_real = double();
  this->__fbthrift_field_smaller_real = float();
  this->__fbthrift_field_hidden_field = ::std::int16_t();
  __isset = {};
}

void SimpleStruct::__fbthrift_clear_terse_fields() {
}

bool SimpleStruct::__fbthrift_is_empty() const {
  return false;
}

bool SimpleStruct::operator==([[maybe_unused]] const SimpleStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool SimpleStruct::operator<([[maybe_unused]] const SimpleStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] SimpleStruct& a, [[maybe_unused]] SimpleStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_is_on, b.__fbthrift_field_is_on);
  swap(a.__fbthrift_field_tiny_int, b.__fbthrift_field_tiny_int);
  swap(a.__fbthrift_field_small_int, b.__fbthrift_field_small_int);
  swap(a.__fbthrift_field_nice_sized_int, b.__fbthrift_field_nice_sized_int);
  swap(a.__fbthrift_field_big_int, b.__fbthrift_field_big_int);
  swap(a.__fbthrift_field_real, b.__fbthrift_field_real);
  swap(a.__fbthrift_field_smaller_real, b.__fbthrift_field_smaller_real);
  swap(a.__fbthrift_field_hidden_field, b.__fbthrift_field_hidden_field);
  swap(a.__isset, b.__isset);
}

template void SimpleStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SimpleStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SimpleStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SimpleStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::HiddenTypeFieldsStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::HiddenTypeFieldsStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3::simple {

std::string_view HiddenTypeFieldsStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<HiddenTypeFieldsStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view HiddenTypeFieldsStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<HiddenTypeFieldsStruct>::name;
}

HiddenTypeFieldsStruct::HiddenTypeFieldsStruct(const HiddenTypeFieldsStruct& srcObj) :
    __fbthrift_field_field1(srcObj.__fbthrift_field_field1),
    __fbthrift_field_field2(srcObj.__fbthrift_field_field2),
    __fbthrift_field_field3(srcObj.__fbthrift_field_field3),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<Adapter, 1>(__fbthrift_field_field1, *this);
}

static void __fbthrift_swap(HiddenTypeFieldsStruct& lhs, HiddenTypeFieldsStruct& rhs) { swap(lhs, rhs); }
HiddenTypeFieldsStruct& HiddenTypeFieldsStruct::operator=(const HiddenTypeFieldsStruct& other) {
  HiddenTypeFieldsStruct tmp(other);
  __fbthrift_swap(*this, tmp);
  return *this;
}

HiddenTypeFieldsStruct::HiddenTypeFieldsStruct() {
  ::apache::thrift::adapt_detail::construct<Adapter, 1>(__fbthrift_field_field1, *this);
}


HiddenTypeFieldsStruct::~HiddenTypeFieldsStruct() {}

HiddenTypeFieldsStruct::HiddenTypeFieldsStruct([[maybe_unused]] HiddenTypeFieldsStruct&& other) noexcept :
    __fbthrift_field_field1(std::move(other.__fbthrift_field_field1)),
    __fbthrift_field_field2(std::move(other.__fbthrift_field_field2)),
    __fbthrift_field_field3(std::move(other.__fbthrift_field_field3)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<Adapter, 1>(__fbthrift_field_field1, *this);
}

HiddenTypeFieldsStruct& HiddenTypeFieldsStruct::operator=([[maybe_unused]] HiddenTypeFieldsStruct&& other) noexcept {
    this->__fbthrift_field_field1 = std::move(other.__fbthrift_field_field1);
    this->__fbthrift_field_field2 = std::move(other.__fbthrift_field_field2);
    this->__fbthrift_field_field3 = std::move(other.__fbthrift_field_field3);
    __isset = other.__isset;
    return *this;
}


HiddenTypeFieldsStruct::HiddenTypeFieldsStruct(apache::thrift::FragileConstructor, ::py3::simple::AdaptedTypeDef field1__arg, ::std::vector<::py3::simple::AdaptedTypeDef> field2__arg, ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef> field3__arg) :
    __fbthrift_field_field1(std::move(field1__arg)),
    __fbthrift_field_field2(std::move(field2__arg)),
    __fbthrift_field_field3(std::move(field3__arg)) { 
  ::apache::thrift::adapt_detail::construct<Adapter, 1>(__fbthrift_field_field1, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void HiddenTypeFieldsStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<Adapter, 1>(__fbthrift_field_field1, *this);
  this->__fbthrift_field_field2.clear();
  this->__fbthrift_field_field3.clear();
  __isset = {};
}

void HiddenTypeFieldsStruct::__fbthrift_clear_terse_fields() {
}

bool HiddenTypeFieldsStruct::__fbthrift_is_empty() const {
  return false;
}

bool HiddenTypeFieldsStruct::operator==([[maybe_unused]] const HiddenTypeFieldsStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

const ::std::vector<::py3::simple::AdaptedTypeDef>& HiddenTypeFieldsStruct::get_field2() const& {
  return __fbthrift_field_field2;
}

::std::vector<::py3::simple::AdaptedTypeDef> HiddenTypeFieldsStruct::get_field2() && {
  return std::move(__fbthrift_field_field2);
}

const ::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef>& HiddenTypeFieldsStruct::get_field3() const& {
  return __fbthrift_field_field3;
}

::std::unordered_map<::std::int32_t, ::py3::simple::AdaptedTypeDef> HiddenTypeFieldsStruct::get_field3() && {
  return std::move(__fbthrift_field_field3);
}


void swap([[maybe_unused]] HiddenTypeFieldsStruct& a, [[maybe_unused]] HiddenTypeFieldsStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_field1, b.__fbthrift_field_field1);
  swap(a.__fbthrift_field_field2, b.__fbthrift_field_field2);
  swap(a.__fbthrift_field_field3, b.__fbthrift_field_field3);
  swap(a.__isset, b.__isset);
}

template void HiddenTypeFieldsStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t HiddenTypeFieldsStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t HiddenTypeFieldsStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t HiddenTypeFieldsStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void HiddenTypeFieldsStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t HiddenTypeFieldsStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t HiddenTypeFieldsStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t HiddenTypeFieldsStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        HiddenTypeFieldsStruct,
        ::apache::thrift::type_class::structure,
        ::py3::simple::AdaptedTypeDef>,
    "inconsistent use of json option");

} // namespace py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::detail::AdaptedUnion>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::detail::AdaptedUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

folly::Range<::py3::simple::detail::AdaptedUnion::Type const*> const TEnumTraits<::py3::simple::detail::AdaptedUnion::Type>::values = folly::range(TEnumDataStorage<::py3::simple::detail::AdaptedUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::py3::simple::detail::AdaptedUnion::Type>::names = folly::range(TEnumDataStorage<::py3::simple::detail::AdaptedUnion::Type>::names);

bool TEnumTraits<::py3::simple::detail::AdaptedUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::detail::AdaptedUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace py3::simple {namespace detail {


std::string_view AdaptedUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AdaptedUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view AdaptedUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AdaptedUnion>::name;
}

void AdaptedUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::best:
      ::std::destroy_at(::std::addressof(value_.best));
      break;
    default:
      assert(false);
      break;
  }
}

void AdaptedUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  type_ = folly::to_underlying(Type::__EMPTY__);
}


bool AdaptedUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  AdaptedUnion::AdaptedUnion(const AdaptedUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::best:
        set_best(rhs.value_.best);
        break;
      default:
        assert(false);
    }
  }

    AdaptedUnion&AdaptedUnion::operator=(const AdaptedUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::best:
        set_best(rhs.value_.best);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }


bool AdaptedUnion::operator==(const AdaptedUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool AdaptedUnion::operator<([[maybe_unused]] const AdaptedUnion& rhs) const {
  return ::apache::thrift::op::detail::UnionLessThan{}(*this, rhs);
}

void swap(AdaptedUnion& a, AdaptedUnion& b) {
  AdaptedUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void AdaptedUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AdaptedUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AdaptedUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AdaptedUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AdaptedUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptedUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptedUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptedUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
} // namespace py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::HiddenException>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::HiddenException>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3::simple {

std::string_view HiddenException::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<HiddenException>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view HiddenException::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<HiddenException>::name;
}

HiddenException::HiddenException(const HiddenException&) = default;
HiddenException& HiddenException::operator=(const HiddenException&) = default;
HiddenException::HiddenException() :
      __fbthrift_field_test() {
}


HiddenException::~HiddenException() {}

HiddenException::HiddenException([[maybe_unused]] HiddenException&& other) noexcept :
    __fbthrift_field_test(std::move(other.__fbthrift_field_test)),
    __isset(other.__isset) {
}

HiddenException& HiddenException::operator=([[maybe_unused]] HiddenException&& other) noexcept {
    this->__fbthrift_field_test = std::move(other.__fbthrift_field_test);
    __isset = other.__isset;
    return *this;
}


HiddenException::HiddenException(apache::thrift::FragileConstructor, ::std::int16_t test__arg) :
    __fbthrift_field_test(std::move(test__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void HiddenException::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_test = ::std::int16_t();
  __isset = {};
}

void HiddenException::__fbthrift_clear_terse_fields() {
}

bool HiddenException::__fbthrift_is_empty() const {
  return false;
}

bool HiddenException::operator==([[maybe_unused]] const HiddenException& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool HiddenException::operator<([[maybe_unused]] const HiddenException& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap([[maybe_unused]] HiddenException& a, [[maybe_unused]] HiddenException& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_test, b.__fbthrift_field_test);
  swap(a.__isset, b.__isset);
}

template void HiddenException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t HiddenException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t HiddenException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t HiddenException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void HiddenException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t HiddenException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t HiddenException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t HiddenException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::ComplexStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::ComplexStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3::simple {

std::string_view ComplexStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ComplexStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view ComplexStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ComplexStruct>::name;
}

ComplexStruct::ComplexStruct(const ComplexStruct&) = default;
ComplexStruct& ComplexStruct::operator=(const ComplexStruct&) = default;
ComplexStruct::ComplexStruct() :
      __fbthrift_field_an_integer(),
      __fbthrift_field_an_enum() {
}


ComplexStruct::~ComplexStruct() {}

ComplexStruct::ComplexStruct([[maybe_unused]] ComplexStruct&& other) noexcept :
    __fbthrift_field_structOne(std::move(other.__fbthrift_field_structOne)),
    __fbthrift_field_structTwo(std::move(other.__fbthrift_field_structTwo)),
    __fbthrift_field_an_integer(std::move(other.__fbthrift_field_an_integer)),
    __fbthrift_field_name(std::move(other.__fbthrift_field_name)),
    __fbthrift_field_an_enum(std::move(other.__fbthrift_field_an_enum)),
    __fbthrift_field_some_bytes(std::move(other.__fbthrift_field_some_bytes)),
    __fbthrift_field_from(std::move(other.__fbthrift_field_from)),
    __fbthrift_field_cdef(std::move(other.__fbthrift_field_cdef)),
    __fbthrift_field_bytes_with_cpp_type(std::move(other.__fbthrift_field_bytes_with_cpp_type)),
    __isset(other.__isset) {
}

ComplexStruct& ComplexStruct::operator=([[maybe_unused]] ComplexStruct&& other) noexcept {
    this->__fbthrift_field_structOne = std::move(other.__fbthrift_field_structOne);
    this->__fbthrift_field_structTwo = std::move(other.__fbthrift_field_structTwo);
    this->__fbthrift_field_an_integer = std::move(other.__fbthrift_field_an_integer);
    this->__fbthrift_field_name = std::move(other.__fbthrift_field_name);
    this->__fbthrift_field_an_enum = std::move(other.__fbthrift_field_an_enum);
    this->__fbthrift_field_some_bytes = std::move(other.__fbthrift_field_some_bytes);
    this->__fbthrift_field_from = std::move(other.__fbthrift_field_from);
    this->__fbthrift_field_cdef = std::move(other.__fbthrift_field_cdef);
    this->__fbthrift_field_bytes_with_cpp_type = std::move(other.__fbthrift_field_bytes_with_cpp_type);
    __isset = other.__isset;
    return *this;
}


ComplexStruct::ComplexStruct(apache::thrift::FragileConstructor, ::py3::simple::SimpleStruct structOne__arg, ::py3::simple::SimpleStruct structTwo__arg, ::std::int32_t an_integer__arg, ::std::string name__arg, ::py3::simple::AnEnum an_enum__arg, ::std::string some_bytes__arg, ::std::string from__arg, ::std::string cdef__arg, ::py3::simple::foo_bar bytes_with_cpp_type__arg) :
    __fbthrift_field_structOne(std::move(structOne__arg)),
    __fbthrift_field_structTwo(std::move(structTwo__arg)),
    __fbthrift_field_an_integer(std::move(an_integer__arg)),
    __fbthrift_field_name(std::move(name__arg)),
    __fbthrift_field_an_enum(std::move(an_enum__arg)),
    __fbthrift_field_some_bytes(std::move(some_bytes__arg)),
    __fbthrift_field_from(std::move(from__arg)),
    __fbthrift_field_cdef(std::move(cdef__arg)),
    __fbthrift_field_bytes_with_cpp_type(std::move(bytes_with_cpp_type__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}


void ComplexStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_structOne);
  ::apache::thrift::clear(this->__fbthrift_field_structTwo);
  this->__fbthrift_field_an_integer = ::std::int32_t();
  this->__fbthrift_field_name = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_an_enum = ::py3::simple::AnEnum();
  this->__fbthrift_field_some_bytes = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_from = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_cdef = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_bytes_with_cpp_type = apache::thrift::StringTraits<foo::Bar>::fromStringLiteral("");
  __isset = {};
}

void ComplexStruct::__fbthrift_clear_terse_fields() {
}

bool ComplexStruct::__fbthrift_is_empty() const {
  return false;
}

bool ComplexStruct::operator==([[maybe_unused]] const ComplexStruct& rhs) const {
  return ::apache::thrift::op::detail::StructEquality{}(*this, rhs);
}

bool ComplexStruct::operator<([[maybe_unused]] const ComplexStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::py3::simple::SimpleStruct& ComplexStruct::get_structOne() const& {
  return __fbthrift_field_structOne;
}

::py3::simple::SimpleStruct ComplexStruct::get_structOne() && {
  return std::move(__fbthrift_field_structOne);
}

const ::py3::simple::SimpleStruct& ComplexStruct::get_structTwo() const& {
  return __fbthrift_field_structTwo;
}

::py3::simple::SimpleStruct ComplexStruct::get_structTwo() && {
  return std::move(__fbthrift_field_structTwo);
}


void swap([[maybe_unused]] ComplexStruct& a, [[maybe_unused]] ComplexStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_structOne, b.__fbthrift_field_structOne);
  swap(a.__fbthrift_field_structTwo, b.__fbthrift_field_structTwo);
  swap(a.__fbthrift_field_an_integer, b.__fbthrift_field_an_integer);
  swap(a.__fbthrift_field_name, b.__fbthrift_field_name);
  swap(a.__fbthrift_field_an_enum, b.__fbthrift_field_an_enum);
  swap(a.__fbthrift_field_some_bytes, b.__fbthrift_field_some_bytes);
  swap(a.__fbthrift_field_from, b.__fbthrift_field_from);
  swap(a.__fbthrift_field_cdef, b.__fbthrift_field_cdef);
  swap(a.__fbthrift_field_bytes_with_cpp_type, b.__fbthrift_field_bytes_with_cpp_type);
  swap(a.__isset, b.__isset);
}

template void ComplexStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ComplexStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ComplexStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComplexStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ComplexStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexStruct,
        ::apache::thrift::type_class::structure,
        ::py3::simple::SimpleStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexStruct,
        ::apache::thrift::type_class::structure,
        ::py3::simple::SimpleStruct>,
    "inconsistent use of json option");

} // namespace py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::BinaryUnion>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::BinaryUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

folly::Range<::py3::simple::BinaryUnion::Type const*> const TEnumTraits<::py3::simple::BinaryUnion::Type>::values = folly::range(TEnumDataStorage<::py3::simple::BinaryUnion::Type>::values);
folly::Range<std::string_view const*> const TEnumTraits<::py3::simple::BinaryUnion::Type>::names = folly::range(TEnumDataStorage<::py3::simple::BinaryUnion::Type>::names);

bool TEnumTraits<::py3::simple::BinaryUnion::Type>::findName(type value, std::string_view* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::py3::simple::BinaryUnion::Type>::findValue(std::string_view name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace py3::simple {

std::string_view BinaryUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BinaryUnion>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view BinaryUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<BinaryUnion>::name;
}

void BinaryUnion::__fbthrift_destruct() {
  switch(getType()) {
    case Type::__EMPTY__:
      break;
    case Type::iobuf_val:
      ::std::destroy_at(::std::addressof(value_.iobuf_val));
      break;
    default:
      assert(false);
      break;
  }
}

void BinaryUnion::__fbthrift_clear() {
  __fbthrift_destruct();
  type_ = folly::to_underlying(Type::__EMPTY__);
}

  BinaryUnion::~BinaryUnion() {
    __fbthrift_destruct();
  }

bool BinaryUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}
  BinaryUnion::BinaryUnion(const BinaryUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        return;
      case Type::iobuf_val:
        set_iobuf_val(rhs.value_.iobuf_val);
        break;
      default:
        assert(false);
    }
  }

    BinaryUnion&BinaryUnion::operator=(const BinaryUnion& rhs) {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
        __fbthrift_clear();
        return *this;
      case Type::iobuf_val:
        set_iobuf_val(rhs.value_.iobuf_val);
        break;
      default:
        __fbthrift_clear();
        assert(false);
    }
    return *this;
  }



void swap(BinaryUnion& a, BinaryUnion& b) {
  BinaryUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void BinaryUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BinaryUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BinaryUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BinaryUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BinaryUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BinaryUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BinaryUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BinaryUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace py3::simple

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::py3::simple::BinaryUnionStruct>::translateFieldName(
    std::string_view _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::py3::simple::BinaryUnionStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace py3::simple {

std::string_view BinaryUnionStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<BinaryUnionStruct>::fields_names[folly::to_underlying(ord) - 1];
}
std::string_view BinaryUnionStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<BinaryUnionStruct>::name;
}

BinaryUnionStruct::BinaryUnionStruct(const BinaryUnionStruct&) = default;
BinaryUnionStruct& BinaryUnionStruct::operator=(const BinaryUnionStruct&) = default;
BinaryUnionStruct::BinaryUnionStruct([[maybe_unused]] BinaryUnionStruct&& other) noexcept :
    __fbthrift_field_u(std::move(other.__fbthrift_field_u)),
    __isset(other.__isset) {
}

BinaryUnionStruct& BinaryUnionStruct::operator=([[maybe_unused]] BinaryUnionStruct&& other) noexcept {
    this->__fbthrift_field_u = std::move(other.__fbthrift_field_u);
    __isset = other.__isset;
    return *this;
}


BinaryUnionStruct::BinaryUnionStruct(apache::thrift::FragileConstructor, ::py3::simple::BinaryUnion u__arg) :
    __fbthrift_field_u(std::move(u__arg)) { 
  __isset.set(folly::index_constant<0>(), true);
}


void BinaryUnionStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::clear(this->__fbthrift_field_u);
  __isset = {};
}

void BinaryUnionStruct::__fbthrift_clear_terse_fields() {
}

bool BinaryUnionStruct::__fbthrift_is_empty() const {
  return false;
}



const ::py3::simple::BinaryUnion& BinaryUnionStruct::get_u() const& {
  return __fbthrift_field_u;
}

::py3::simple::BinaryUnion BinaryUnionStruct::get_u() && {
  return std::move(__fbthrift_field_u);
}


void swap([[maybe_unused]] BinaryUnionStruct& a, [[maybe_unused]] BinaryUnionStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_u, b.__fbthrift_field_u);
  swap(a.__isset, b.__isset);
}

template void BinaryUnionStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BinaryUnionStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BinaryUnionStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BinaryUnionStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void BinaryUnionStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t BinaryUnionStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BinaryUnionStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BinaryUnionStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        BinaryUnionStruct,
        ::apache::thrift::type_class::variant,
        ::py3::simple::BinaryUnion>,
    "inconsistent use of json option");

} // namespace py3::simple

namespace py3::simple { namespace {
[[maybe_unused]] FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<Adapter, 1, ::py3::simple::SimpleStruct, ::py3::simple::HiddenTypeFieldsStruct>();
  ::apache::thrift::adapt_detail::validateAdapter<Adapter, ::py3::simple::detail::AdaptedUnion>();
}
}} // namespace py3::simple
namespace apache::thrift::detail::annotation {
}
