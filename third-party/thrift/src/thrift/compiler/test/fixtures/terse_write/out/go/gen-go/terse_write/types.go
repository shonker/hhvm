// Autogenerated by Thrift for thrift/compiler/test/fixtures/terse_write/src/terse_write.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package terse_write

import (
    "fmt"
    "strings"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = strings.Split
var _ = thrift.ZERO


type MyInteger = int32

func NewMyInteger() MyInteger {
    return 0
}

func WriteMyInteger(item MyInteger, p thrift.Format) error {
    if err := p.WriteI32(item); err != nil {
    return err
}
    return nil
}

func ReadMyInteger(p thrift.Format) (MyInteger, error) {
    var decodeResult MyInteger
    decodeErr := func() error {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type MyEnum int32

const (
    MyEnum_ME0 MyEnum = 0
    MyEnum_ME1 MyEnum = 1
)

// Enum value maps for MyEnum
var (
    MyEnumToName = map[MyEnum]string {
        MyEnum_ME0: "ME0",
        MyEnum_ME1: "ME1",
    }

    MyEnumToValue = map[string]MyEnum {
        "ME0": MyEnum_ME0,
        "ME1": MyEnum_ME1,
    }
)

func (x MyEnum) String() string {
    if v, ok := MyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x MyEnum) Ptr() *MyEnum {
    return &x
}

// Deprecated: Use MyEnumToValue instead (e.g. `x, ok := MyEnumToValue["name"]`).
func MyEnumFromString(s string) (MyEnum, error) {
    if v, ok := MyEnumToValue[s]; ok {
        return v, nil
    }
    return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}


type MyStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStruct)(nil)

func NewMyStruct() *MyStruct {
    return (&MyStruct{})
}



func (x *MyStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStruct({")
    sb.WriteString("})")

    return sb.String()
}

type MyUnion struct {
    BoolField *bool `thrift:"bool_field,1" json:"bool_field,omitempty" db:"bool_field"`
    ByteField *int8 `thrift:"byte_field,2" json:"byte_field,omitempty" db:"byte_field"`
    ShortField *int16 `thrift:"short_field,3" json:"short_field,omitempty" db:"short_field"`
    IntField *int32 `thrift:"int_field,4" json:"int_field,omitempty" db:"int_field"`
    LongField *int64 `thrift:"long_field,5" json:"long_field,omitempty" db:"long_field"`
    FloatField *float32 `thrift:"float_field,6" json:"float_field,omitempty" db:"float_field"`
    DoubleField *float64 `thrift:"double_field,7" json:"double_field,omitempty" db:"double_field"`
    StringField *string `thrift:"string_field,8" json:"string_field,omitempty" db:"string_field"`
    BinaryField []byte `thrift:"binary_field,9" json:"binary_field,omitempty" db:"binary_field"`
    EnumField *MyEnum `thrift:"enum_field,10" json:"enum_field,omitempty" db:"enum_field"`
    ListField []int16 `thrift:"list_field,11" json:"list_field,omitempty" db:"list_field"`
    SetField []int16 `thrift:"set_field,12" json:"set_field,omitempty" db:"set_field"`
    MapField map[int16]int16 `thrift:"map_field,13" json:"map_field,omitempty" db:"map_field"`
    StructField *MyStruct `thrift:"struct_field,14" json:"struct_field,omitempty" db:"struct_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyUnion)(nil)

func NewMyUnion() *MyUnion {
    return (&MyUnion{})
}

func (x *MyUnion) GetBoolField() bool {
    if !x.IsSetBoolField() {
        return false
    }

    return *x.BoolField
}

func (x *MyUnion) GetByteField() int8 {
    if !x.IsSetByteField() {
        return 0
    }

    return *x.ByteField
}

func (x *MyUnion) GetShortField() int16 {
    if !x.IsSetShortField() {
        return 0
    }

    return *x.ShortField
}

func (x *MyUnion) GetIntField() int32 {
    if !x.IsSetIntField() {
        return 0
    }

    return *x.IntField
}

func (x *MyUnion) GetLongField() int64 {
    if !x.IsSetLongField() {
        return 0
    }

    return *x.LongField
}

func (x *MyUnion) GetFloatField() float32 {
    if !x.IsSetFloatField() {
        return 0.0
    }

    return *x.FloatField
}

func (x *MyUnion) GetDoubleField() float64 {
    if !x.IsSetDoubleField() {
        return 0.0
    }

    return *x.DoubleField
}

func (x *MyUnion) GetStringField() string {
    if !x.IsSetStringField() {
        return ""
    }

    return *x.StringField
}

func (x *MyUnion) GetBinaryField() []byte {
    if !x.IsSetBinaryField() {
        return []byte("")
    }

    return x.BinaryField
}

func (x *MyUnion) GetEnumField() MyEnum {
    if !x.IsSetEnumField() {
        return 0
    }

    return *x.EnumField
}

func (x *MyUnion) GetListField() []int16 {
    if !x.IsSetListField() {
        return make([]int16, 0)
    }

    return x.ListField
}

func (x *MyUnion) GetSetField() []int16 {
    if !x.IsSetSetField() {
        return make([]int16, 0)
    }

    return x.SetField
}

func (x *MyUnion) GetMapField() map[int16]int16 {
    if !x.IsSetMapField() {
        return make(map[int16]int16)
    }

    return x.MapField
}

func (x *MyUnion) GetStructField() *MyStruct {
    if !x.IsSetStructField() {
        return nil
    }

    return x.StructField
}

func (x *MyUnion) SetBoolFieldNonCompat(value bool) *MyUnion {
    x.BoolField = &value
    return x
}

func (x *MyUnion) SetBoolField(value *bool) *MyUnion {
    x.BoolField = value
    return x
}

func (x *MyUnion) SetByteFieldNonCompat(value int8) *MyUnion {
    x.ByteField = &value
    return x
}

func (x *MyUnion) SetByteField(value *int8) *MyUnion {
    x.ByteField = value
    return x
}

func (x *MyUnion) SetShortFieldNonCompat(value int16) *MyUnion {
    x.ShortField = &value
    return x
}

func (x *MyUnion) SetShortField(value *int16) *MyUnion {
    x.ShortField = value
    return x
}

func (x *MyUnion) SetIntFieldNonCompat(value int32) *MyUnion {
    x.IntField = &value
    return x
}

func (x *MyUnion) SetIntField(value *int32) *MyUnion {
    x.IntField = value
    return x
}

func (x *MyUnion) SetLongFieldNonCompat(value int64) *MyUnion {
    x.LongField = &value
    return x
}

func (x *MyUnion) SetLongField(value *int64) *MyUnion {
    x.LongField = value
    return x
}

func (x *MyUnion) SetFloatFieldNonCompat(value float32) *MyUnion {
    x.FloatField = &value
    return x
}

func (x *MyUnion) SetFloatField(value *float32) *MyUnion {
    x.FloatField = value
    return x
}

func (x *MyUnion) SetDoubleFieldNonCompat(value float64) *MyUnion {
    x.DoubleField = &value
    return x
}

func (x *MyUnion) SetDoubleField(value *float64) *MyUnion {
    x.DoubleField = value
    return x
}

func (x *MyUnion) SetStringFieldNonCompat(value string) *MyUnion {
    x.StringField = &value
    return x
}

func (x *MyUnion) SetStringField(value *string) *MyUnion {
    x.StringField = value
    return x
}

func (x *MyUnion) SetBinaryFieldNonCompat(value []byte) *MyUnion {
    x.BinaryField = value
    return x
}

func (x *MyUnion) SetBinaryField(value []byte) *MyUnion {
    x.BinaryField = value
    return x
}

func (x *MyUnion) SetEnumFieldNonCompat(value MyEnum) *MyUnion {
    x.EnumField = &value
    return x
}

func (x *MyUnion) SetEnumField(value *MyEnum) *MyUnion {
    x.EnumField = value
    return x
}

func (x *MyUnion) SetListFieldNonCompat(value []int16) *MyUnion {
    x.ListField = value
    return x
}

func (x *MyUnion) SetListField(value []int16) *MyUnion {
    x.ListField = value
    return x
}

func (x *MyUnion) SetSetFieldNonCompat(value []int16) *MyUnion {
    x.SetField = value
    return x
}

func (x *MyUnion) SetSetField(value []int16) *MyUnion {
    x.SetField = value
    return x
}

func (x *MyUnion) SetMapFieldNonCompat(value map[int16]int16) *MyUnion {
    x.MapField = value
    return x
}

func (x *MyUnion) SetMapField(value map[int16]int16) *MyUnion {
    x.MapField = value
    return x
}

func (x *MyUnion) SetStructFieldNonCompat(value MyStruct) *MyUnion {
    x.StructField = &value
    return x
}

func (x *MyUnion) SetStructField(value *MyStruct) *MyUnion {
    x.StructField = value
    return x
}

func (x *MyUnion) IsSetBoolField() bool {
    return x != nil && x.BoolField != nil
}

func (x *MyUnion) IsSetByteField() bool {
    return x != nil && x.ByteField != nil
}

func (x *MyUnion) IsSetShortField() bool {
    return x != nil && x.ShortField != nil
}

func (x *MyUnion) IsSetIntField() bool {
    return x != nil && x.IntField != nil
}

func (x *MyUnion) IsSetLongField() bool {
    return x != nil && x.LongField != nil
}

func (x *MyUnion) IsSetFloatField() bool {
    return x != nil && x.FloatField != nil
}

func (x *MyUnion) IsSetDoubleField() bool {
    return x != nil && x.DoubleField != nil
}

func (x *MyUnion) IsSetStringField() bool {
    return x != nil && x.StringField != nil
}

func (x *MyUnion) IsSetBinaryField() bool {
    return x != nil && x.BinaryField != nil
}

func (x *MyUnion) IsSetEnumField() bool {
    return x != nil && x.EnumField != nil
}

func (x *MyUnion) IsSetListField() bool {
    return x != nil && x.ListField != nil
}

func (x *MyUnion) IsSetSetField() bool {
    return x != nil && x.SetField != nil
}

func (x *MyUnion) IsSetMapField() bool {
    return x != nil && x.MapField != nil
}

func (x *MyUnion) IsSetStructField() bool {
    return x != nil && x.StructField != nil
}

func (x *MyUnion) writeField1(p thrift.Format) error {  // BoolField
    if !x.IsSetBoolField() {
        return nil
    }

    if err := p.WriteFieldBegin("bool_field", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.BoolField
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField2(p thrift.Format) error {  // ByteField
    if !x.IsSetByteField() {
        return nil
    }

    if err := p.WriteFieldBegin("byte_field", thrift.BYTE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.ByteField
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField3(p thrift.Format) error {  // ShortField
    if !x.IsSetShortField() {
        return nil
    }

    if err := p.WriteFieldBegin("short_field", thrift.I16, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.ShortField
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField4(p thrift.Format) error {  // IntField
    if !x.IsSetIntField() {
        return nil
    }

    if err := p.WriteFieldBegin("int_field", thrift.I32, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.IntField
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField5(p thrift.Format) error {  // LongField
    if !x.IsSetLongField() {
        return nil
    }

    if err := p.WriteFieldBegin("long_field", thrift.I64, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.LongField
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField6(p thrift.Format) error {  // FloatField
    if !x.IsSetFloatField() {
        return nil
    }

    if err := p.WriteFieldBegin("float_field", thrift.FLOAT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.FloatField
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField7(p thrift.Format) error {  // DoubleField
    if !x.IsSetDoubleField() {
        return nil
    }

    if err := p.WriteFieldBegin("double_field", thrift.DOUBLE, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.DoubleField
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField8(p thrift.Format) error {  // StringField
    if !x.IsSetStringField() {
        return nil
    }

    if err := p.WriteFieldBegin("string_field", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.StringField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField9(p thrift.Format) error {  // BinaryField
    if !x.IsSetBinaryField() {
        return nil
    }

    if err := p.WriteFieldBegin("binary_field", thrift.STRING, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BinaryField
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField10(p thrift.Format) error {  // EnumField
    if !x.IsSetEnumField() {
        return nil
    }

    if err := p.WriteFieldBegin("enum_field", thrift.I32, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.EnumField
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField11(p thrift.Format) error {  // ListField
    if !x.IsSetListField() {
        return nil
    }

    if err := p.WriteFieldBegin("list_field", thrift.LIST, 11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ListField
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField12(p thrift.Format) error {  // SetField
    if !x.IsSetSetField() {
        return nil
    }

    if err := p.WriteFieldBegin("set_field", thrift.SET, 12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SetField
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField13(p thrift.Format) error {  // MapField
    if !x.IsSetMapField() {
        return nil
    }

    if err := p.WriteFieldBegin("map_field", thrift.MAP, 13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MapField
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField14(p thrift.Format) error {  // StructField
    if !x.IsSetStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("struct_field", thrift.STRUCT, 14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructField
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) readField1(p thrift.Format) error {  // BoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.BoolField = &result
    return nil
}

func (x *MyUnion) readField2(p thrift.Format) error {  // ByteField
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.ByteField = &result
    return nil
}

func (x *MyUnion) readField3(p thrift.Format) error {  // ShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.ShortField = &result
    return nil
}

func (x *MyUnion) readField4(p thrift.Format) error {  // IntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.IntField = &result
    return nil
}

func (x *MyUnion) readField5(p thrift.Format) error {  // LongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.LongField = &result
    return nil
}

func (x *MyUnion) readField6(p thrift.Format) error {  // FloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.FloatField = &result
    return nil
}

func (x *MyUnion) readField7(p thrift.Format) error {  // DoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.DoubleField = &result
    return nil
}

func (x *MyUnion) readField8(p thrift.Format) error {  // StringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.StringField = &result
    return nil
}

func (x *MyUnion) readField9(p thrift.Format) error {  // BinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.BinaryField = result
    return nil
}

func (x *MyUnion) readField10(p thrift.Format) error {  // EnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.EnumField = &result
    return nil
}

func (x *MyUnion) readField11(p thrift.Format) error {  // ListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.ListField = result
    return nil
}

func (x *MyUnion) readField12(p thrift.Format) error {  // SetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetField = result
    return nil
}

func (x *MyUnion) readField13(p thrift.Format) error {  // MapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.MapField = result
    return nil
}

func (x *MyUnion) readField14(p thrift.Format) error {  // StructField
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructField = &result
    return nil
}

func (x *MyUnion) toString1() string {  // BoolField
    if x.IsSetBoolField() {
        return fmt.Sprintf("%v", *x.BoolField)
    }
    return fmt.Sprintf("%v", x.BoolField)
}

func (x *MyUnion) toString2() string {  // ByteField
    if x.IsSetByteField() {
        return fmt.Sprintf("%v", *x.ByteField)
    }
    return fmt.Sprintf("%v", x.ByteField)
}

func (x *MyUnion) toString3() string {  // ShortField
    if x.IsSetShortField() {
        return fmt.Sprintf("%v", *x.ShortField)
    }
    return fmt.Sprintf("%v", x.ShortField)
}

func (x *MyUnion) toString4() string {  // IntField
    if x.IsSetIntField() {
        return fmt.Sprintf("%v", *x.IntField)
    }
    return fmt.Sprintf("%v", x.IntField)
}

func (x *MyUnion) toString5() string {  // LongField
    if x.IsSetLongField() {
        return fmt.Sprintf("%v", *x.LongField)
    }
    return fmt.Sprintf("%v", x.LongField)
}

func (x *MyUnion) toString6() string {  // FloatField
    if x.IsSetFloatField() {
        return fmt.Sprintf("%v", *x.FloatField)
    }
    return fmt.Sprintf("%v", x.FloatField)
}

func (x *MyUnion) toString7() string {  // DoubleField
    if x.IsSetDoubleField() {
        return fmt.Sprintf("%v", *x.DoubleField)
    }
    return fmt.Sprintf("%v", x.DoubleField)
}

func (x *MyUnion) toString8() string {  // StringField
    if x.IsSetStringField() {
        return fmt.Sprintf("%v", *x.StringField)
    }
    return fmt.Sprintf("%v", x.StringField)
}

func (x *MyUnion) toString9() string {  // BinaryField
    return fmt.Sprintf("%v", x.BinaryField)
}

func (x *MyUnion) toString10() string {  // EnumField
    if x.IsSetEnumField() {
        return fmt.Sprintf("%v", *x.EnumField)
    }
    return fmt.Sprintf("%v", x.EnumField)
}

func (x *MyUnion) toString11() string {  // ListField
    return fmt.Sprintf("%v", x.ListField)
}

func (x *MyUnion) toString12() string {  // SetField
    return fmt.Sprintf("%v", x.SetField)
}

func (x *MyUnion) toString13() string {  // MapField
    return fmt.Sprintf("%v", x.MapField)
}

func (x *MyUnion) toString14() string {  // StructField
    return fmt.Sprintf("%v", x.StructField)
}










// Deprecated: Use NewMyUnion().GetStructField() instead.
func (x *MyUnion) DefaultGetStructField() *MyStruct {
    if !x.IsSetStructField() {
        return NewMyStruct()
    }
    return x.StructField
}

func (x *MyUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetBoolField()) {
        count++
    }
    if (x.IsSetByteField()) {
        count++
    }
    if (x.IsSetShortField()) {
        count++
    }
    if (x.IsSetIntField()) {
        count++
    }
    if (x.IsSetLongField()) {
        count++
    }
    if (x.IsSetFloatField()) {
        count++
    }
    if (x.IsSetDoubleField()) {
        count++
    }
    if (x.IsSetStringField()) {
        count++
    }
    if (x.IsSetBinaryField()) {
        count++
    }
    if (x.IsSetEnumField()) {
        count++
    }
    if (x.IsSetListField()) {
        count++
    }
    if (x.IsSetSetField()) {
        count++
    }
    if (x.IsSetMapField()) {
        count++
    }
    if (x.IsSetStructField()) {
        count++
    }
    return count
}

func (x *MyUnion) CountSetFieldsMyUnion() int {
    return x.countSetFields()
}



func (x *MyUnion) Write(p thrift.Format) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("MyUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := x.writeField11(p); err != nil {
        return err
    }

    if err := x.writeField12(p); err != nil {
        return err
    }

    if err := x.writeField13(p); err != nil {
        return err
    }

    if err := x.writeField14(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.BOOL)):  // bool_field
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BYTE)):  // byte_field
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.I16)):  // short_field
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.I32)):  // int_field
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.I64)):  // long_field
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.FLOAT)):  // float_field
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.DOUBLE)):  // double_field
            if err := x.readField7(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.STRING)):  // string_field
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.STRING)):  // binary_field
            if err := x.readField9(p); err != nil {
                return err
            }
        case (id == 10 && wireType == thrift.Type(thrift.I32)):  // enum_field
            if err := x.readField10(p); err != nil {
                return err
            }
        case (id == 11 && wireType == thrift.Type(thrift.LIST)):  // list_field
            if err := x.readField11(p); err != nil {
                return err
            }
        case (id == 12 && wireType == thrift.Type(thrift.SET)):  // set_field
            if err := x.readField12(p); err != nil {
                return err
            }
        case (id == 13 && wireType == thrift.Type(thrift.MAP)):  // map_field
            if err := x.readField13(p); err != nil {
                return err
            }
        case (id == 14 && wireType == thrift.Type(thrift.STRUCT)):  // struct_field
            if err := x.readField14(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnion) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnion({")
    sb.WriteString(fmt.Sprintf("BoolField:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("ByteField:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("ShortField:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("IntField:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("LongField:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("FloatField:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("DoubleField:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("StringField:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("BinaryField:%s ", x.toString9()))
    sb.WriteString(fmt.Sprintf("EnumField:%s ", x.toString10()))
    sb.WriteString(fmt.Sprintf("ListField:%s ", x.toString11()))
    sb.WriteString(fmt.Sprintf("SetField:%s ", x.toString12()))
    sb.WriteString(fmt.Sprintf("MapField:%s ", x.toString13()))
    sb.WriteString(fmt.Sprintf("StructField:%s", x.toString14()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructWithCustomDefault struct {
    Field1 int64 `thrift:"field1,1" json:"field1" db:"field1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructWithCustomDefault)(nil)

func NewMyStructWithCustomDefault() *MyStructWithCustomDefault {
    return (&MyStructWithCustomDefault{}).
        SetField1NonCompat(1)
}

func (x *MyStructWithCustomDefault) GetField1() int64 {
    return x.Field1
}

func (x *MyStructWithCustomDefault) SetField1NonCompat(value int64) *MyStructWithCustomDefault {
    x.Field1 = value
    return x
}

func (x *MyStructWithCustomDefault) SetField1(value int64) *MyStructWithCustomDefault {
    x.Field1 = value
    return x
}

func (x *MyStructWithCustomDefault) writeField1(p thrift.Format) error {  // Field1
    if err := p.WriteFieldBegin("field1", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Field1
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructWithCustomDefault) readField1(p thrift.Format) error {  // Field1
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.Field1 = result
    return nil
}

func (x *MyStructWithCustomDefault) toString1() string {  // Field1
    return fmt.Sprintf("%v", x.Field1)
}



func (x *MyStructWithCustomDefault) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructWithCustomDefault"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructWithCustomDefault) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I64)):  // field1
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructWithCustomDefault) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructWithCustomDefault({")
    sb.WriteString(fmt.Sprintf("Field1:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type StructLevelTerseStruct struct {
    BoolField bool `thrift:"bool_field,1" json:"bool_field" db:"bool_field"`
    ByteField int8 `thrift:"byte_field,2" json:"byte_field" db:"byte_field"`
    ShortField int16 `thrift:"short_field,3" json:"short_field" db:"short_field"`
    IntField int32 `thrift:"int_field,4" json:"int_field" db:"int_field"`
    LongField int64 `thrift:"long_field,5" json:"long_field" db:"long_field"`
    FloatField float32 `thrift:"float_field,6" json:"float_field" db:"float_field"`
    DoubleField float64 `thrift:"double_field,7" json:"double_field" db:"double_field"`
    StringField string `thrift:"string_field,8" json:"string_field" db:"string_field"`
    BinaryField []byte `thrift:"binary_field,9" json:"binary_field" db:"binary_field"`
    EnumField MyEnum `thrift:"enum_field,10" json:"enum_field" db:"enum_field"`
    ListField []int16 `thrift:"list_field,11" json:"list_field" db:"list_field"`
    SetField []int16 `thrift:"set_field,12" json:"set_field" db:"set_field"`
    MapField map[int16]int16 `thrift:"map_field,13" json:"map_field" db:"map_field"`
    StructField *MyStruct `thrift:"struct_field,14" json:"struct_field" db:"struct_field"`
    UnionField *MyUnion `thrift:"union_field,15" json:"union_field" db:"union_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*StructLevelTerseStruct)(nil)

func NewStructLevelTerseStruct() *StructLevelTerseStruct {
    return (&StructLevelTerseStruct{}).
        SetBoolFieldNonCompat(false).
        SetByteFieldNonCompat(0).
        SetShortFieldNonCompat(0).
        SetIntFieldNonCompat(0).
        SetLongFieldNonCompat(0).
        SetFloatFieldNonCompat(0.0).
        SetDoubleFieldNonCompat(0.0).
        SetStringFieldNonCompat("").
        SetBinaryFieldNonCompat([]byte("")).
        SetEnumFieldNonCompat(0).
        SetListFieldNonCompat(make([]int16, 0)).
        SetSetFieldNonCompat(make([]int16, 0)).
        SetMapFieldNonCompat(make(map[int16]int16)).
        SetStructFieldNonCompat(*NewMyStruct()).
        SetUnionFieldNonCompat(*NewMyUnion())
}

func (x *StructLevelTerseStruct) GetBoolField() bool {
    return x.BoolField
}

func (x *StructLevelTerseStruct) GetByteField() int8 {
    return x.ByteField
}

func (x *StructLevelTerseStruct) GetShortField() int16 {
    return x.ShortField
}

func (x *StructLevelTerseStruct) GetIntField() int32 {
    return x.IntField
}

func (x *StructLevelTerseStruct) GetLongField() int64 {
    return x.LongField
}

func (x *StructLevelTerseStruct) GetFloatField() float32 {
    return x.FloatField
}

func (x *StructLevelTerseStruct) GetDoubleField() float64 {
    return x.DoubleField
}

func (x *StructLevelTerseStruct) GetStringField() string {
    return x.StringField
}

func (x *StructLevelTerseStruct) GetBinaryField() []byte {
    if !x.IsSetBinaryField() {
        return []byte("")
    }

    return x.BinaryField
}

func (x *StructLevelTerseStruct) GetEnumField() MyEnum {
    return x.EnumField
}

func (x *StructLevelTerseStruct) GetListField() []int16 {
    if !x.IsSetListField() {
        return make([]int16, 0)
    }

    return x.ListField
}

func (x *StructLevelTerseStruct) GetSetField() []int16 {
    if !x.IsSetSetField() {
        return make([]int16, 0)
    }

    return x.SetField
}

func (x *StructLevelTerseStruct) GetMapField() map[int16]int16 {
    if !x.IsSetMapField() {
        return make(map[int16]int16)
    }

    return x.MapField
}

func (x *StructLevelTerseStruct) GetStructField() *MyStruct {
    if !x.IsSetStructField() {
        return nil
    }

    return x.StructField
}

func (x *StructLevelTerseStruct) GetUnionField() *MyUnion {
    if !x.IsSetUnionField() {
        return nil
    }

    return x.UnionField
}

func (x *StructLevelTerseStruct) SetBoolFieldNonCompat(value bool) *StructLevelTerseStruct {
    x.BoolField = value
    return x
}

func (x *StructLevelTerseStruct) SetBoolField(value bool) *StructLevelTerseStruct {
    x.BoolField = value
    return x
}

func (x *StructLevelTerseStruct) SetByteFieldNonCompat(value int8) *StructLevelTerseStruct {
    x.ByteField = value
    return x
}

func (x *StructLevelTerseStruct) SetByteField(value int8) *StructLevelTerseStruct {
    x.ByteField = value
    return x
}

func (x *StructLevelTerseStruct) SetShortFieldNonCompat(value int16) *StructLevelTerseStruct {
    x.ShortField = value
    return x
}

func (x *StructLevelTerseStruct) SetShortField(value int16) *StructLevelTerseStruct {
    x.ShortField = value
    return x
}

func (x *StructLevelTerseStruct) SetIntFieldNonCompat(value int32) *StructLevelTerseStruct {
    x.IntField = value
    return x
}

func (x *StructLevelTerseStruct) SetIntField(value int32) *StructLevelTerseStruct {
    x.IntField = value
    return x
}

func (x *StructLevelTerseStruct) SetLongFieldNonCompat(value int64) *StructLevelTerseStruct {
    x.LongField = value
    return x
}

func (x *StructLevelTerseStruct) SetLongField(value int64) *StructLevelTerseStruct {
    x.LongField = value
    return x
}

func (x *StructLevelTerseStruct) SetFloatFieldNonCompat(value float32) *StructLevelTerseStruct {
    x.FloatField = value
    return x
}

func (x *StructLevelTerseStruct) SetFloatField(value float32) *StructLevelTerseStruct {
    x.FloatField = value
    return x
}

func (x *StructLevelTerseStruct) SetDoubleFieldNonCompat(value float64) *StructLevelTerseStruct {
    x.DoubleField = value
    return x
}

func (x *StructLevelTerseStruct) SetDoubleField(value float64) *StructLevelTerseStruct {
    x.DoubleField = value
    return x
}

func (x *StructLevelTerseStruct) SetStringFieldNonCompat(value string) *StructLevelTerseStruct {
    x.StringField = value
    return x
}

func (x *StructLevelTerseStruct) SetStringField(value string) *StructLevelTerseStruct {
    x.StringField = value
    return x
}

func (x *StructLevelTerseStruct) SetBinaryFieldNonCompat(value []byte) *StructLevelTerseStruct {
    x.BinaryField = value
    return x
}

func (x *StructLevelTerseStruct) SetBinaryField(value []byte) *StructLevelTerseStruct {
    x.BinaryField = value
    return x
}

func (x *StructLevelTerseStruct) SetEnumFieldNonCompat(value MyEnum) *StructLevelTerseStruct {
    x.EnumField = value
    return x
}

func (x *StructLevelTerseStruct) SetEnumField(value MyEnum) *StructLevelTerseStruct {
    x.EnumField = value
    return x
}

func (x *StructLevelTerseStruct) SetListFieldNonCompat(value []int16) *StructLevelTerseStruct {
    x.ListField = value
    return x
}

func (x *StructLevelTerseStruct) SetListField(value []int16) *StructLevelTerseStruct {
    x.ListField = value
    return x
}

func (x *StructLevelTerseStruct) SetSetFieldNonCompat(value []int16) *StructLevelTerseStruct {
    x.SetField = value
    return x
}

func (x *StructLevelTerseStruct) SetSetField(value []int16) *StructLevelTerseStruct {
    x.SetField = value
    return x
}

func (x *StructLevelTerseStruct) SetMapFieldNonCompat(value map[int16]int16) *StructLevelTerseStruct {
    x.MapField = value
    return x
}

func (x *StructLevelTerseStruct) SetMapField(value map[int16]int16) *StructLevelTerseStruct {
    x.MapField = value
    return x
}

func (x *StructLevelTerseStruct) SetStructFieldNonCompat(value MyStruct) *StructLevelTerseStruct {
    x.StructField = &value
    return x
}

func (x *StructLevelTerseStruct) SetStructField(value *MyStruct) *StructLevelTerseStruct {
    x.StructField = value
    return x
}

func (x *StructLevelTerseStruct) SetUnionFieldNonCompat(value MyUnion) *StructLevelTerseStruct {
    x.UnionField = &value
    return x
}

func (x *StructLevelTerseStruct) SetUnionField(value *MyUnion) *StructLevelTerseStruct {
    x.UnionField = value
    return x
}

func (x *StructLevelTerseStruct) IsSetBinaryField() bool {
    return x != nil && x.BinaryField != nil
}

func (x *StructLevelTerseStruct) IsSetListField() bool {
    return x != nil && x.ListField != nil
}

func (x *StructLevelTerseStruct) IsSetSetField() bool {
    return x != nil && x.SetField != nil
}

func (x *StructLevelTerseStruct) IsSetMapField() bool {
    return x != nil && x.MapField != nil
}

func (x *StructLevelTerseStruct) IsSetStructField() bool {
    return x != nil && x.StructField != nil
}

func (x *StructLevelTerseStruct) IsSetUnionField() bool {
    return x != nil && x.UnionField != nil
}

func (x *StructLevelTerseStruct) writeField1(p thrift.Format) error {  // BoolField
    if err := p.WriteFieldBegin("bool_field", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BoolField
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField2(p thrift.Format) error {  // ByteField
    if err := p.WriteFieldBegin("byte_field", thrift.BYTE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ByteField
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField3(p thrift.Format) error {  // ShortField
    if err := p.WriteFieldBegin("short_field", thrift.I16, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ShortField
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField4(p thrift.Format) error {  // IntField
    if err := p.WriteFieldBegin("int_field", thrift.I32, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.IntField
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField5(p thrift.Format) error {  // LongField
    if err := p.WriteFieldBegin("long_field", thrift.I64, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.LongField
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField6(p thrift.Format) error {  // FloatField
    if err := p.WriteFieldBegin("float_field", thrift.FLOAT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.FloatField
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField7(p thrift.Format) error {  // DoubleField
    if err := p.WriteFieldBegin("double_field", thrift.DOUBLE, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.DoubleField
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField8(p thrift.Format) error {  // StringField
    if err := p.WriteFieldBegin("string_field", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StringField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField9(p thrift.Format) error {  // BinaryField
    if err := p.WriteFieldBegin("binary_field", thrift.STRING, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BinaryField
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField10(p thrift.Format) error {  // EnumField
    if err := p.WriteFieldBegin("enum_field", thrift.I32, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.EnumField
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField11(p thrift.Format) error {  // ListField
    if err := p.WriteFieldBegin("list_field", thrift.LIST, 11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ListField
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField12(p thrift.Format) error {  // SetField
    if err := p.WriteFieldBegin("set_field", thrift.SET, 12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SetField
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField13(p thrift.Format) error {  // MapField
    if err := p.WriteFieldBegin("map_field", thrift.MAP, 13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MapField
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField14(p thrift.Format) error {  // StructField
    if !x.IsSetStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("struct_field", thrift.STRUCT, 14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructField
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) writeField15(p thrift.Format) error {  // UnionField
    if !x.IsSetUnionField() {
        return nil
    }

    if err := p.WriteFieldBegin("union_field", thrift.STRUCT, 15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.UnionField
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) readField1(p thrift.Format) error {  // BoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.BoolField = result
    return nil
}

func (x *StructLevelTerseStruct) readField2(p thrift.Format) error {  // ByteField
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.ByteField = result
    return nil
}

func (x *StructLevelTerseStruct) readField3(p thrift.Format) error {  // ShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.ShortField = result
    return nil
}

func (x *StructLevelTerseStruct) readField4(p thrift.Format) error {  // IntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.IntField = result
    return nil
}

func (x *StructLevelTerseStruct) readField5(p thrift.Format) error {  // LongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.LongField = result
    return nil
}

func (x *StructLevelTerseStruct) readField6(p thrift.Format) error {  // FloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.FloatField = result
    return nil
}

func (x *StructLevelTerseStruct) readField7(p thrift.Format) error {  // DoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.DoubleField = result
    return nil
}

func (x *StructLevelTerseStruct) readField8(p thrift.Format) error {  // StringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.StringField = result
    return nil
}

func (x *StructLevelTerseStruct) readField9(p thrift.Format) error {  // BinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.BinaryField = result
    return nil
}

func (x *StructLevelTerseStruct) readField10(p thrift.Format) error {  // EnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.EnumField = result
    return nil
}

func (x *StructLevelTerseStruct) readField11(p thrift.Format) error {  // ListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.ListField = result
    return nil
}

func (x *StructLevelTerseStruct) readField12(p thrift.Format) error {  // SetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetField = result
    return nil
}

func (x *StructLevelTerseStruct) readField13(p thrift.Format) error {  // MapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.MapField = result
    return nil
}

func (x *StructLevelTerseStruct) readField14(p thrift.Format) error {  // StructField
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructField = &result
    return nil
}

func (x *StructLevelTerseStruct) readField15(p thrift.Format) error {  // UnionField
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.UnionField = &result
    return nil
}

func (x *StructLevelTerseStruct) toString1() string {  // BoolField
    return fmt.Sprintf("%v", x.BoolField)
}

func (x *StructLevelTerseStruct) toString2() string {  // ByteField
    return fmt.Sprintf("%v", x.ByteField)
}

func (x *StructLevelTerseStruct) toString3() string {  // ShortField
    return fmt.Sprintf("%v", x.ShortField)
}

func (x *StructLevelTerseStruct) toString4() string {  // IntField
    return fmt.Sprintf("%v", x.IntField)
}

func (x *StructLevelTerseStruct) toString5() string {  // LongField
    return fmt.Sprintf("%v", x.LongField)
}

func (x *StructLevelTerseStruct) toString6() string {  // FloatField
    return fmt.Sprintf("%v", x.FloatField)
}

func (x *StructLevelTerseStruct) toString7() string {  // DoubleField
    return fmt.Sprintf("%v", x.DoubleField)
}

func (x *StructLevelTerseStruct) toString8() string {  // StringField
    return fmt.Sprintf("%v", x.StringField)
}

func (x *StructLevelTerseStruct) toString9() string {  // BinaryField
    return fmt.Sprintf("%v", x.BinaryField)
}

func (x *StructLevelTerseStruct) toString10() string {  // EnumField
    return fmt.Sprintf("%v", x.EnumField)
}

func (x *StructLevelTerseStruct) toString11() string {  // ListField
    return fmt.Sprintf("%v", x.ListField)
}

func (x *StructLevelTerseStruct) toString12() string {  // SetField
    return fmt.Sprintf("%v", x.SetField)
}

func (x *StructLevelTerseStruct) toString13() string {  // MapField
    return fmt.Sprintf("%v", x.MapField)
}

func (x *StructLevelTerseStruct) toString14() string {  // StructField
    return fmt.Sprintf("%v", x.StructField)
}

func (x *StructLevelTerseStruct) toString15() string {  // UnionField
    return fmt.Sprintf("%v", x.UnionField)
}

// Deprecated: Use NewStructLevelTerseStruct().GetStructField() instead.
func (x *StructLevelTerseStruct) DefaultGetStructField() *MyStruct {
    if !x.IsSetStructField() {
        return NewMyStruct()
    }
    return x.StructField
}

// Deprecated: Use NewStructLevelTerseStruct().GetUnionField() instead.
func (x *StructLevelTerseStruct) DefaultGetUnionField() *MyUnion {
    if !x.IsSetUnionField() {
        return NewMyUnion()
    }
    return x.UnionField
}



func (x *StructLevelTerseStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("StructLevelTerseStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := x.writeField11(p); err != nil {
        return err
    }

    if err := x.writeField12(p); err != nil {
        return err
    }

    if err := x.writeField13(p); err != nil {
        return err
    }

    if err := x.writeField14(p); err != nil {
        return err
    }

    if err := x.writeField15(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *StructLevelTerseStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.BOOL)):  // bool_field
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BYTE)):  // byte_field
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.I16)):  // short_field
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.I32)):  // int_field
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.I64)):  // long_field
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.FLOAT)):  // float_field
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.DOUBLE)):  // double_field
            if err := x.readField7(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.STRING)):  // string_field
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.STRING)):  // binary_field
            if err := x.readField9(p); err != nil {
                return err
            }
        case (id == 10 && wireType == thrift.Type(thrift.I32)):  // enum_field
            if err := x.readField10(p); err != nil {
                return err
            }
        case (id == 11 && wireType == thrift.Type(thrift.LIST)):  // list_field
            if err := x.readField11(p); err != nil {
                return err
            }
        case (id == 12 && wireType == thrift.Type(thrift.SET)):  // set_field
            if err := x.readField12(p); err != nil {
                return err
            }
        case (id == 13 && wireType == thrift.Type(thrift.MAP)):  // map_field
            if err := x.readField13(p); err != nil {
                return err
            }
        case (id == 14 && wireType == thrift.Type(thrift.STRUCT)):  // struct_field
            if err := x.readField14(p); err != nil {
                return err
            }
        case (id == 15 && wireType == thrift.Type(thrift.STRUCT)):  // union_field
            if err := x.readField15(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *StructLevelTerseStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("StructLevelTerseStruct({")
    sb.WriteString(fmt.Sprintf("BoolField:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("ByteField:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("ShortField:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("IntField:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("LongField:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("FloatField:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("DoubleField:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("StringField:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("BinaryField:%s ", x.toString9()))
    sb.WriteString(fmt.Sprintf("EnumField:%s ", x.toString10()))
    sb.WriteString(fmt.Sprintf("ListField:%s ", x.toString11()))
    sb.WriteString(fmt.Sprintf("SetField:%s ", x.toString12()))
    sb.WriteString(fmt.Sprintf("MapField:%s ", x.toString13()))
    sb.WriteString(fmt.Sprintf("StructField:%s ", x.toString14()))
    sb.WriteString(fmt.Sprintf("UnionField:%s", x.toString15()))
    sb.WriteString("})")

    return sb.String()
}

type FieldLevelTerseStruct struct {
    TerseBoolField bool `thrift:"terse_bool_field,1" json:"terse_bool_field" db:"terse_bool_field"`
    TerseByteField int8 `thrift:"terse_byte_field,2" json:"terse_byte_field" db:"terse_byte_field"`
    TerseShortField int16 `thrift:"terse_short_field,3" json:"terse_short_field" db:"terse_short_field"`
    TerseIntField int32 `thrift:"terse_int_field,4" json:"terse_int_field" db:"terse_int_field"`
    TerseLongField int64 `thrift:"terse_long_field,5" json:"terse_long_field" db:"terse_long_field"`
    TerseFloatField float32 `thrift:"terse_float_field,6" json:"terse_float_field" db:"terse_float_field"`
    TerseDoubleField float64 `thrift:"terse_double_field,7" json:"terse_double_field" db:"terse_double_field"`
    TerseStringField string `thrift:"terse_string_field,8" json:"terse_string_field" db:"terse_string_field"`
    TerseBinaryField []byte `thrift:"terse_binary_field,9" json:"terse_binary_field" db:"terse_binary_field"`
    TerseEnumField MyEnum `thrift:"terse_enum_field,10" json:"terse_enum_field" db:"terse_enum_field"`
    TerseListField []int16 `thrift:"terse_list_field,11" json:"terse_list_field" db:"terse_list_field"`
    TerseSetField []int16 `thrift:"terse_set_field,12" json:"terse_set_field" db:"terse_set_field"`
    TerseMapField map[int16]int16 `thrift:"terse_map_field,13" json:"terse_map_field" db:"terse_map_field"`
    TerseStructField *MyStruct `thrift:"terse_struct_field,14" json:"terse_struct_field" db:"terse_struct_field"`
    BoolField bool `thrift:"bool_field,15" json:"bool_field" db:"bool_field"`
    ByteField int8 `thrift:"byte_field,16" json:"byte_field" db:"byte_field"`
    ShortField int16 `thrift:"short_field,17" json:"short_field" db:"short_field"`
    IntField int32 `thrift:"int_field,18" json:"int_field" db:"int_field"`
    LongField int64 `thrift:"long_field,19" json:"long_field" db:"long_field"`
    FloatField float32 `thrift:"float_field,20" json:"float_field" db:"float_field"`
    DoubleField float64 `thrift:"double_field,21" json:"double_field" db:"double_field"`
    StringField string `thrift:"string_field,22" json:"string_field" db:"string_field"`
    BinaryField []byte `thrift:"binary_field,23" json:"binary_field" db:"binary_field"`
    EnumField MyEnum `thrift:"enum_field,24" json:"enum_field" db:"enum_field"`
    ListField []int16 `thrift:"list_field,25" json:"list_field" db:"list_field"`
    SetField []int16 `thrift:"set_field,26" json:"set_field" db:"set_field"`
    MapField map[int16]int16 `thrift:"map_field,27" json:"map_field" db:"map_field"`
    StructField *MyStruct `thrift:"struct_field,28" json:"struct_field" db:"struct_field"`
    TerseUnionField *MyUnion `thrift:"terse_union_field,29" json:"terse_union_field" db:"terse_union_field"`
    UnionField *MyUnion `thrift:"union_field,30" json:"union_field" db:"union_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*FieldLevelTerseStruct)(nil)

func NewFieldLevelTerseStruct() *FieldLevelTerseStruct {
    return (&FieldLevelTerseStruct{}).
        SetTerseBoolFieldNonCompat(false).
        SetTerseByteFieldNonCompat(0).
        SetTerseShortFieldNonCompat(0).
        SetTerseIntFieldNonCompat(0).
        SetTerseLongFieldNonCompat(0).
        SetTerseFloatFieldNonCompat(0.0).
        SetTerseDoubleFieldNonCompat(0.0).
        SetTerseStringFieldNonCompat("").
        SetTerseBinaryFieldNonCompat([]byte("")).
        SetTerseEnumFieldNonCompat(0).
        SetTerseListFieldNonCompat(make([]int16, 0)).
        SetTerseSetFieldNonCompat(make([]int16, 0)).
        SetTerseMapFieldNonCompat(make(map[int16]int16)).
        SetTerseStructFieldNonCompat(*NewMyStruct()).
        SetBoolFieldNonCompat(false).
        SetByteFieldNonCompat(0).
        SetShortFieldNonCompat(0).
        SetIntFieldNonCompat(0).
        SetLongFieldNonCompat(0).
        SetFloatFieldNonCompat(0.0).
        SetDoubleFieldNonCompat(0.0).
        SetStringFieldNonCompat("").
        SetBinaryFieldNonCompat([]byte("")).
        SetEnumFieldNonCompat(0).
        SetListFieldNonCompat(make([]int16, 0)).
        SetSetFieldNonCompat(make([]int16, 0)).
        SetMapFieldNonCompat(make(map[int16]int16)).
        SetStructFieldNonCompat(*NewMyStruct()).
        SetTerseUnionFieldNonCompat(*NewMyUnion()).
        SetUnionFieldNonCompat(*NewMyUnion())
}

func (x *FieldLevelTerseStruct) GetTerseBoolField() bool {
    return x.TerseBoolField
}

func (x *FieldLevelTerseStruct) GetTerseByteField() int8 {
    return x.TerseByteField
}

func (x *FieldLevelTerseStruct) GetTerseShortField() int16 {
    return x.TerseShortField
}

func (x *FieldLevelTerseStruct) GetTerseIntField() int32 {
    return x.TerseIntField
}

func (x *FieldLevelTerseStruct) GetTerseLongField() int64 {
    return x.TerseLongField
}

func (x *FieldLevelTerseStruct) GetTerseFloatField() float32 {
    return x.TerseFloatField
}

func (x *FieldLevelTerseStruct) GetTerseDoubleField() float64 {
    return x.TerseDoubleField
}

func (x *FieldLevelTerseStruct) GetTerseStringField() string {
    return x.TerseStringField
}

func (x *FieldLevelTerseStruct) GetTerseBinaryField() []byte {
    if !x.IsSetTerseBinaryField() {
        return []byte("")
    }

    return x.TerseBinaryField
}

func (x *FieldLevelTerseStruct) GetTerseEnumField() MyEnum {
    return x.TerseEnumField
}

func (x *FieldLevelTerseStruct) GetTerseListField() []int16 {
    if !x.IsSetTerseListField() {
        return make([]int16, 0)
    }

    return x.TerseListField
}

func (x *FieldLevelTerseStruct) GetTerseSetField() []int16 {
    if !x.IsSetTerseSetField() {
        return make([]int16, 0)
    }

    return x.TerseSetField
}

func (x *FieldLevelTerseStruct) GetTerseMapField() map[int16]int16 {
    if !x.IsSetTerseMapField() {
        return make(map[int16]int16)
    }

    return x.TerseMapField
}

func (x *FieldLevelTerseStruct) GetTerseStructField() *MyStruct {
    if !x.IsSetTerseStructField() {
        return nil
    }

    return x.TerseStructField
}

func (x *FieldLevelTerseStruct) GetBoolField() bool {
    return x.BoolField
}

func (x *FieldLevelTerseStruct) GetByteField() int8 {
    return x.ByteField
}

func (x *FieldLevelTerseStruct) GetShortField() int16 {
    return x.ShortField
}

func (x *FieldLevelTerseStruct) GetIntField() int32 {
    return x.IntField
}

func (x *FieldLevelTerseStruct) GetLongField() int64 {
    return x.LongField
}

func (x *FieldLevelTerseStruct) GetFloatField() float32 {
    return x.FloatField
}

func (x *FieldLevelTerseStruct) GetDoubleField() float64 {
    return x.DoubleField
}

func (x *FieldLevelTerseStruct) GetStringField() string {
    return x.StringField
}

func (x *FieldLevelTerseStruct) GetBinaryField() []byte {
    if !x.IsSetBinaryField() {
        return []byte("")
    }

    return x.BinaryField
}

func (x *FieldLevelTerseStruct) GetEnumField() MyEnum {
    return x.EnumField
}

func (x *FieldLevelTerseStruct) GetListField() []int16 {
    if !x.IsSetListField() {
        return make([]int16, 0)
    }

    return x.ListField
}

func (x *FieldLevelTerseStruct) GetSetField() []int16 {
    if !x.IsSetSetField() {
        return make([]int16, 0)
    }

    return x.SetField
}

func (x *FieldLevelTerseStruct) GetMapField() map[int16]int16 {
    if !x.IsSetMapField() {
        return make(map[int16]int16)
    }

    return x.MapField
}

func (x *FieldLevelTerseStruct) GetStructField() *MyStruct {
    if !x.IsSetStructField() {
        return nil
    }

    return x.StructField
}

func (x *FieldLevelTerseStruct) GetTerseUnionField() *MyUnion {
    if !x.IsSetTerseUnionField() {
        return nil
    }

    return x.TerseUnionField
}

func (x *FieldLevelTerseStruct) GetUnionField() *MyUnion {
    if !x.IsSetUnionField() {
        return nil
    }

    return x.UnionField
}

func (x *FieldLevelTerseStruct) SetTerseBoolFieldNonCompat(value bool) *FieldLevelTerseStruct {
    x.TerseBoolField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseBoolField(value bool) *FieldLevelTerseStruct {
    x.TerseBoolField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseByteFieldNonCompat(value int8) *FieldLevelTerseStruct {
    x.TerseByteField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseByteField(value int8) *FieldLevelTerseStruct {
    x.TerseByteField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseShortFieldNonCompat(value int16) *FieldLevelTerseStruct {
    x.TerseShortField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseShortField(value int16) *FieldLevelTerseStruct {
    x.TerseShortField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseIntFieldNonCompat(value int32) *FieldLevelTerseStruct {
    x.TerseIntField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseIntField(value int32) *FieldLevelTerseStruct {
    x.TerseIntField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseLongFieldNonCompat(value int64) *FieldLevelTerseStruct {
    x.TerseLongField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseLongField(value int64) *FieldLevelTerseStruct {
    x.TerseLongField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseFloatFieldNonCompat(value float32) *FieldLevelTerseStruct {
    x.TerseFloatField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseFloatField(value float32) *FieldLevelTerseStruct {
    x.TerseFloatField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseDoubleFieldNonCompat(value float64) *FieldLevelTerseStruct {
    x.TerseDoubleField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseDoubleField(value float64) *FieldLevelTerseStruct {
    x.TerseDoubleField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseStringFieldNonCompat(value string) *FieldLevelTerseStruct {
    x.TerseStringField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseStringField(value string) *FieldLevelTerseStruct {
    x.TerseStringField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseBinaryFieldNonCompat(value []byte) *FieldLevelTerseStruct {
    x.TerseBinaryField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseBinaryField(value []byte) *FieldLevelTerseStruct {
    x.TerseBinaryField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseEnumFieldNonCompat(value MyEnum) *FieldLevelTerseStruct {
    x.TerseEnumField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseEnumField(value MyEnum) *FieldLevelTerseStruct {
    x.TerseEnumField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseListFieldNonCompat(value []int16) *FieldLevelTerseStruct {
    x.TerseListField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseListField(value []int16) *FieldLevelTerseStruct {
    x.TerseListField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseSetFieldNonCompat(value []int16) *FieldLevelTerseStruct {
    x.TerseSetField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseSetField(value []int16) *FieldLevelTerseStruct {
    x.TerseSetField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseMapFieldNonCompat(value map[int16]int16) *FieldLevelTerseStruct {
    x.TerseMapField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseMapField(value map[int16]int16) *FieldLevelTerseStruct {
    x.TerseMapField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseStructFieldNonCompat(value MyStruct) *FieldLevelTerseStruct {
    x.TerseStructField = &value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseStructField(value *MyStruct) *FieldLevelTerseStruct {
    x.TerseStructField = value
    return x
}

func (x *FieldLevelTerseStruct) SetBoolFieldNonCompat(value bool) *FieldLevelTerseStruct {
    x.BoolField = value
    return x
}

func (x *FieldLevelTerseStruct) SetBoolField(value bool) *FieldLevelTerseStruct {
    x.BoolField = value
    return x
}

func (x *FieldLevelTerseStruct) SetByteFieldNonCompat(value int8) *FieldLevelTerseStruct {
    x.ByteField = value
    return x
}

func (x *FieldLevelTerseStruct) SetByteField(value int8) *FieldLevelTerseStruct {
    x.ByteField = value
    return x
}

func (x *FieldLevelTerseStruct) SetShortFieldNonCompat(value int16) *FieldLevelTerseStruct {
    x.ShortField = value
    return x
}

func (x *FieldLevelTerseStruct) SetShortField(value int16) *FieldLevelTerseStruct {
    x.ShortField = value
    return x
}

func (x *FieldLevelTerseStruct) SetIntFieldNonCompat(value int32) *FieldLevelTerseStruct {
    x.IntField = value
    return x
}

func (x *FieldLevelTerseStruct) SetIntField(value int32) *FieldLevelTerseStruct {
    x.IntField = value
    return x
}

func (x *FieldLevelTerseStruct) SetLongFieldNonCompat(value int64) *FieldLevelTerseStruct {
    x.LongField = value
    return x
}

func (x *FieldLevelTerseStruct) SetLongField(value int64) *FieldLevelTerseStruct {
    x.LongField = value
    return x
}

func (x *FieldLevelTerseStruct) SetFloatFieldNonCompat(value float32) *FieldLevelTerseStruct {
    x.FloatField = value
    return x
}

func (x *FieldLevelTerseStruct) SetFloatField(value float32) *FieldLevelTerseStruct {
    x.FloatField = value
    return x
}

func (x *FieldLevelTerseStruct) SetDoubleFieldNonCompat(value float64) *FieldLevelTerseStruct {
    x.DoubleField = value
    return x
}

func (x *FieldLevelTerseStruct) SetDoubleField(value float64) *FieldLevelTerseStruct {
    x.DoubleField = value
    return x
}

func (x *FieldLevelTerseStruct) SetStringFieldNonCompat(value string) *FieldLevelTerseStruct {
    x.StringField = value
    return x
}

func (x *FieldLevelTerseStruct) SetStringField(value string) *FieldLevelTerseStruct {
    x.StringField = value
    return x
}

func (x *FieldLevelTerseStruct) SetBinaryFieldNonCompat(value []byte) *FieldLevelTerseStruct {
    x.BinaryField = value
    return x
}

func (x *FieldLevelTerseStruct) SetBinaryField(value []byte) *FieldLevelTerseStruct {
    x.BinaryField = value
    return x
}

func (x *FieldLevelTerseStruct) SetEnumFieldNonCompat(value MyEnum) *FieldLevelTerseStruct {
    x.EnumField = value
    return x
}

func (x *FieldLevelTerseStruct) SetEnumField(value MyEnum) *FieldLevelTerseStruct {
    x.EnumField = value
    return x
}

func (x *FieldLevelTerseStruct) SetListFieldNonCompat(value []int16) *FieldLevelTerseStruct {
    x.ListField = value
    return x
}

func (x *FieldLevelTerseStruct) SetListField(value []int16) *FieldLevelTerseStruct {
    x.ListField = value
    return x
}

func (x *FieldLevelTerseStruct) SetSetFieldNonCompat(value []int16) *FieldLevelTerseStruct {
    x.SetField = value
    return x
}

func (x *FieldLevelTerseStruct) SetSetField(value []int16) *FieldLevelTerseStruct {
    x.SetField = value
    return x
}

func (x *FieldLevelTerseStruct) SetMapFieldNonCompat(value map[int16]int16) *FieldLevelTerseStruct {
    x.MapField = value
    return x
}

func (x *FieldLevelTerseStruct) SetMapField(value map[int16]int16) *FieldLevelTerseStruct {
    x.MapField = value
    return x
}

func (x *FieldLevelTerseStruct) SetStructFieldNonCompat(value MyStruct) *FieldLevelTerseStruct {
    x.StructField = &value
    return x
}

func (x *FieldLevelTerseStruct) SetStructField(value *MyStruct) *FieldLevelTerseStruct {
    x.StructField = value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseUnionFieldNonCompat(value MyUnion) *FieldLevelTerseStruct {
    x.TerseUnionField = &value
    return x
}

func (x *FieldLevelTerseStruct) SetTerseUnionField(value *MyUnion) *FieldLevelTerseStruct {
    x.TerseUnionField = value
    return x
}

func (x *FieldLevelTerseStruct) SetUnionFieldNonCompat(value MyUnion) *FieldLevelTerseStruct {
    x.UnionField = &value
    return x
}

func (x *FieldLevelTerseStruct) SetUnionField(value *MyUnion) *FieldLevelTerseStruct {
    x.UnionField = value
    return x
}

func (x *FieldLevelTerseStruct) IsSetTerseBinaryField() bool {
    return x != nil && x.TerseBinaryField != nil
}

func (x *FieldLevelTerseStruct) IsSetTerseListField() bool {
    return x != nil && x.TerseListField != nil
}

func (x *FieldLevelTerseStruct) IsSetTerseSetField() bool {
    return x != nil && x.TerseSetField != nil
}

func (x *FieldLevelTerseStruct) IsSetTerseMapField() bool {
    return x != nil && x.TerseMapField != nil
}

func (x *FieldLevelTerseStruct) IsSetTerseStructField() bool {
    return x != nil && x.TerseStructField != nil
}

func (x *FieldLevelTerseStruct) IsSetBinaryField() bool {
    return x != nil && x.BinaryField != nil
}

func (x *FieldLevelTerseStruct) IsSetListField() bool {
    return x != nil && x.ListField != nil
}

func (x *FieldLevelTerseStruct) IsSetSetField() bool {
    return x != nil && x.SetField != nil
}

func (x *FieldLevelTerseStruct) IsSetMapField() bool {
    return x != nil && x.MapField != nil
}

func (x *FieldLevelTerseStruct) IsSetStructField() bool {
    return x != nil && x.StructField != nil
}

func (x *FieldLevelTerseStruct) IsSetTerseUnionField() bool {
    return x != nil && x.TerseUnionField != nil
}

func (x *FieldLevelTerseStruct) IsSetUnionField() bool {
    return x != nil && x.UnionField != nil
}

func (x *FieldLevelTerseStruct) writeField1(p thrift.Format) error {  // TerseBoolField
    if err := p.WriteFieldBegin("terse_bool_field", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseBoolField
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField2(p thrift.Format) error {  // TerseByteField
    if err := p.WriteFieldBegin("terse_byte_field", thrift.BYTE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseByteField
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField3(p thrift.Format) error {  // TerseShortField
    if err := p.WriteFieldBegin("terse_short_field", thrift.I16, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseShortField
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField4(p thrift.Format) error {  // TerseIntField
    if err := p.WriteFieldBegin("terse_int_field", thrift.I32, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseIntField
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField5(p thrift.Format) error {  // TerseLongField
    if err := p.WriteFieldBegin("terse_long_field", thrift.I64, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseLongField
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField6(p thrift.Format) error {  // TerseFloatField
    if err := p.WriteFieldBegin("terse_float_field", thrift.FLOAT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseFloatField
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField7(p thrift.Format) error {  // TerseDoubleField
    if err := p.WriteFieldBegin("terse_double_field", thrift.DOUBLE, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseDoubleField
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField8(p thrift.Format) error {  // TerseStringField
    if err := p.WriteFieldBegin("terse_string_field", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseStringField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField9(p thrift.Format) error {  // TerseBinaryField
    if err := p.WriteFieldBegin("terse_binary_field", thrift.STRING, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseBinaryField
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField10(p thrift.Format) error {  // TerseEnumField
    if err := p.WriteFieldBegin("terse_enum_field", thrift.I32, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseEnumField
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField11(p thrift.Format) error {  // TerseListField
    if err := p.WriteFieldBegin("terse_list_field", thrift.LIST, 11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseListField
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField12(p thrift.Format) error {  // TerseSetField
    if err := p.WriteFieldBegin("terse_set_field", thrift.SET, 12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseSetField
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField13(p thrift.Format) error {  // TerseMapField
    if err := p.WriteFieldBegin("terse_map_field", thrift.MAP, 13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseMapField
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField14(p thrift.Format) error {  // TerseStructField
    if !x.IsSetTerseStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("terse_struct_field", thrift.STRUCT, 14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseStructField
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField15(p thrift.Format) error {  // BoolField
    if err := p.WriteFieldBegin("bool_field", thrift.BOOL, 15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BoolField
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField16(p thrift.Format) error {  // ByteField
    if err := p.WriteFieldBegin("byte_field", thrift.BYTE, 16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ByteField
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField17(p thrift.Format) error {  // ShortField
    if err := p.WriteFieldBegin("short_field", thrift.I16, 17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ShortField
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField18(p thrift.Format) error {  // IntField
    if err := p.WriteFieldBegin("int_field", thrift.I32, 18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.IntField
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField19(p thrift.Format) error {  // LongField
    if err := p.WriteFieldBegin("long_field", thrift.I64, 19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.LongField
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField20(p thrift.Format) error {  // FloatField
    if err := p.WriteFieldBegin("float_field", thrift.FLOAT, 20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.FloatField
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField21(p thrift.Format) error {  // DoubleField
    if err := p.WriteFieldBegin("double_field", thrift.DOUBLE, 21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.DoubleField
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField22(p thrift.Format) error {  // StringField
    if err := p.WriteFieldBegin("string_field", thrift.STRING, 22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StringField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField23(p thrift.Format) error {  // BinaryField
    if err := p.WriteFieldBegin("binary_field", thrift.STRING, 23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BinaryField
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField24(p thrift.Format) error {  // EnumField
    if err := p.WriteFieldBegin("enum_field", thrift.I32, 24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.EnumField
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField25(p thrift.Format) error {  // ListField
    if err := p.WriteFieldBegin("list_field", thrift.LIST, 25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ListField
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField26(p thrift.Format) error {  // SetField
    if err := p.WriteFieldBegin("set_field", thrift.SET, 26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SetField
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField27(p thrift.Format) error {  // MapField
    if err := p.WriteFieldBegin("map_field", thrift.MAP, 27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MapField
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField28(p thrift.Format) error {  // StructField
    if !x.IsSetStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("struct_field", thrift.STRUCT, 28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructField
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField29(p thrift.Format) error {  // TerseUnionField
    if !x.IsSetTerseUnionField() {
        return nil
    }

    if err := p.WriteFieldBegin("terse_union_field", thrift.STRUCT, 29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.TerseUnionField
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) writeField30(p thrift.Format) error {  // UnionField
    if !x.IsSetUnionField() {
        return nil
    }

    if err := p.WriteFieldBegin("union_field", thrift.STRUCT, 30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.UnionField
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) readField1(p thrift.Format) error {  // TerseBoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.TerseBoolField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField2(p thrift.Format) error {  // TerseByteField
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.TerseByteField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField3(p thrift.Format) error {  // TerseShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.TerseShortField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField4(p thrift.Format) error {  // TerseIntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.TerseIntField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField5(p thrift.Format) error {  // TerseLongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.TerseLongField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField6(p thrift.Format) error {  // TerseFloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.TerseFloatField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField7(p thrift.Format) error {  // TerseDoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.TerseDoubleField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField8(p thrift.Format) error {  // TerseStringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.TerseStringField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField9(p thrift.Format) error {  // TerseBinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.TerseBinaryField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField10(p thrift.Format) error {  // TerseEnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.TerseEnumField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField11(p thrift.Format) error {  // TerseListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.TerseListField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField12(p thrift.Format) error {  // TerseSetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.TerseSetField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField13(p thrift.Format) error {  // TerseMapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.TerseMapField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField14(p thrift.Format) error {  // TerseStructField
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.TerseStructField = &result
    return nil
}

func (x *FieldLevelTerseStruct) readField15(p thrift.Format) error {  // BoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.BoolField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField16(p thrift.Format) error {  // ByteField
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.ByteField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField17(p thrift.Format) error {  // ShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.ShortField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField18(p thrift.Format) error {  // IntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.IntField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField19(p thrift.Format) error {  // LongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.LongField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField20(p thrift.Format) error {  // FloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.FloatField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField21(p thrift.Format) error {  // DoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.DoubleField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField22(p thrift.Format) error {  // StringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.StringField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField23(p thrift.Format) error {  // BinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.BinaryField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField24(p thrift.Format) error {  // EnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.EnumField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField25(p thrift.Format) error {  // ListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.ListField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField26(p thrift.Format) error {  // SetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField27(p thrift.Format) error {  // MapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.MapField = result
    return nil
}

func (x *FieldLevelTerseStruct) readField28(p thrift.Format) error {  // StructField
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructField = &result
    return nil
}

func (x *FieldLevelTerseStruct) readField29(p thrift.Format) error {  // TerseUnionField
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.TerseUnionField = &result
    return nil
}

func (x *FieldLevelTerseStruct) readField30(p thrift.Format) error {  // UnionField
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.UnionField = &result
    return nil
}

func (x *FieldLevelTerseStruct) toString1() string {  // TerseBoolField
    return fmt.Sprintf("%v", x.TerseBoolField)
}

func (x *FieldLevelTerseStruct) toString2() string {  // TerseByteField
    return fmt.Sprintf("%v", x.TerseByteField)
}

func (x *FieldLevelTerseStruct) toString3() string {  // TerseShortField
    return fmt.Sprintf("%v", x.TerseShortField)
}

func (x *FieldLevelTerseStruct) toString4() string {  // TerseIntField
    return fmt.Sprintf("%v", x.TerseIntField)
}

func (x *FieldLevelTerseStruct) toString5() string {  // TerseLongField
    return fmt.Sprintf("%v", x.TerseLongField)
}

func (x *FieldLevelTerseStruct) toString6() string {  // TerseFloatField
    return fmt.Sprintf("%v", x.TerseFloatField)
}

func (x *FieldLevelTerseStruct) toString7() string {  // TerseDoubleField
    return fmt.Sprintf("%v", x.TerseDoubleField)
}

func (x *FieldLevelTerseStruct) toString8() string {  // TerseStringField
    return fmt.Sprintf("%v", x.TerseStringField)
}

func (x *FieldLevelTerseStruct) toString9() string {  // TerseBinaryField
    return fmt.Sprintf("%v", x.TerseBinaryField)
}

func (x *FieldLevelTerseStruct) toString10() string {  // TerseEnumField
    return fmt.Sprintf("%v", x.TerseEnumField)
}

func (x *FieldLevelTerseStruct) toString11() string {  // TerseListField
    return fmt.Sprintf("%v", x.TerseListField)
}

func (x *FieldLevelTerseStruct) toString12() string {  // TerseSetField
    return fmt.Sprintf("%v", x.TerseSetField)
}

func (x *FieldLevelTerseStruct) toString13() string {  // TerseMapField
    return fmt.Sprintf("%v", x.TerseMapField)
}

func (x *FieldLevelTerseStruct) toString14() string {  // TerseStructField
    return fmt.Sprintf("%v", x.TerseStructField)
}

func (x *FieldLevelTerseStruct) toString15() string {  // BoolField
    return fmt.Sprintf("%v", x.BoolField)
}

func (x *FieldLevelTerseStruct) toString16() string {  // ByteField
    return fmt.Sprintf("%v", x.ByteField)
}

func (x *FieldLevelTerseStruct) toString17() string {  // ShortField
    return fmt.Sprintf("%v", x.ShortField)
}

func (x *FieldLevelTerseStruct) toString18() string {  // IntField
    return fmt.Sprintf("%v", x.IntField)
}

func (x *FieldLevelTerseStruct) toString19() string {  // LongField
    return fmt.Sprintf("%v", x.LongField)
}

func (x *FieldLevelTerseStruct) toString20() string {  // FloatField
    return fmt.Sprintf("%v", x.FloatField)
}

func (x *FieldLevelTerseStruct) toString21() string {  // DoubleField
    return fmt.Sprintf("%v", x.DoubleField)
}

func (x *FieldLevelTerseStruct) toString22() string {  // StringField
    return fmt.Sprintf("%v", x.StringField)
}

func (x *FieldLevelTerseStruct) toString23() string {  // BinaryField
    return fmt.Sprintf("%v", x.BinaryField)
}

func (x *FieldLevelTerseStruct) toString24() string {  // EnumField
    return fmt.Sprintf("%v", x.EnumField)
}

func (x *FieldLevelTerseStruct) toString25() string {  // ListField
    return fmt.Sprintf("%v", x.ListField)
}

func (x *FieldLevelTerseStruct) toString26() string {  // SetField
    return fmt.Sprintf("%v", x.SetField)
}

func (x *FieldLevelTerseStruct) toString27() string {  // MapField
    return fmt.Sprintf("%v", x.MapField)
}

func (x *FieldLevelTerseStruct) toString28() string {  // StructField
    return fmt.Sprintf("%v", x.StructField)
}

func (x *FieldLevelTerseStruct) toString29() string {  // TerseUnionField
    return fmt.Sprintf("%v", x.TerseUnionField)
}

func (x *FieldLevelTerseStruct) toString30() string {  // UnionField
    return fmt.Sprintf("%v", x.UnionField)
}

// Deprecated: Use NewFieldLevelTerseStruct().GetTerseStructField() instead.
func (x *FieldLevelTerseStruct) DefaultGetTerseStructField() *MyStruct {
    if !x.IsSetTerseStructField() {
        return NewMyStruct()
    }
    return x.TerseStructField
}

// Deprecated: Use NewFieldLevelTerseStruct().GetStructField() instead.
func (x *FieldLevelTerseStruct) DefaultGetStructField() *MyStruct {
    if !x.IsSetStructField() {
        return NewMyStruct()
    }
    return x.StructField
}

// Deprecated: Use NewFieldLevelTerseStruct().GetTerseUnionField() instead.
func (x *FieldLevelTerseStruct) DefaultGetTerseUnionField() *MyUnion {
    if !x.IsSetTerseUnionField() {
        return NewMyUnion()
    }
    return x.TerseUnionField
}

// Deprecated: Use NewFieldLevelTerseStruct().GetUnionField() instead.
func (x *FieldLevelTerseStruct) DefaultGetUnionField() *MyUnion {
    if !x.IsSetUnionField() {
        return NewMyUnion()
    }
    return x.UnionField
}



func (x *FieldLevelTerseStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("FieldLevelTerseStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := x.writeField11(p); err != nil {
        return err
    }

    if err := x.writeField12(p); err != nil {
        return err
    }

    if err := x.writeField13(p); err != nil {
        return err
    }

    if err := x.writeField14(p); err != nil {
        return err
    }

    if err := x.writeField15(p); err != nil {
        return err
    }

    if err := x.writeField16(p); err != nil {
        return err
    }

    if err := x.writeField17(p); err != nil {
        return err
    }

    if err := x.writeField18(p); err != nil {
        return err
    }

    if err := x.writeField19(p); err != nil {
        return err
    }

    if err := x.writeField20(p); err != nil {
        return err
    }

    if err := x.writeField21(p); err != nil {
        return err
    }

    if err := x.writeField22(p); err != nil {
        return err
    }

    if err := x.writeField23(p); err != nil {
        return err
    }

    if err := x.writeField24(p); err != nil {
        return err
    }

    if err := x.writeField25(p); err != nil {
        return err
    }

    if err := x.writeField26(p); err != nil {
        return err
    }

    if err := x.writeField27(p); err != nil {
        return err
    }

    if err := x.writeField28(p); err != nil {
        return err
    }

    if err := x.writeField29(p); err != nil {
        return err
    }

    if err := x.writeField30(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *FieldLevelTerseStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.BOOL)):  // terse_bool_field
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BYTE)):  // terse_byte_field
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.I16)):  // terse_short_field
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.I32)):  // terse_int_field
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.I64)):  // terse_long_field
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.FLOAT)):  // terse_float_field
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.DOUBLE)):  // terse_double_field
            if err := x.readField7(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.STRING)):  // terse_string_field
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.STRING)):  // terse_binary_field
            if err := x.readField9(p); err != nil {
                return err
            }
        case (id == 10 && wireType == thrift.Type(thrift.I32)):  // terse_enum_field
            if err := x.readField10(p); err != nil {
                return err
            }
        case (id == 11 && wireType == thrift.Type(thrift.LIST)):  // terse_list_field
            if err := x.readField11(p); err != nil {
                return err
            }
        case (id == 12 && wireType == thrift.Type(thrift.SET)):  // terse_set_field
            if err := x.readField12(p); err != nil {
                return err
            }
        case (id == 13 && wireType == thrift.Type(thrift.MAP)):  // terse_map_field
            if err := x.readField13(p); err != nil {
                return err
            }
        case (id == 14 && wireType == thrift.Type(thrift.STRUCT)):  // terse_struct_field
            if err := x.readField14(p); err != nil {
                return err
            }
        case (id == 15 && wireType == thrift.Type(thrift.BOOL)):  // bool_field
            if err := x.readField15(p); err != nil {
                return err
            }
        case (id == 16 && wireType == thrift.Type(thrift.BYTE)):  // byte_field
            if err := x.readField16(p); err != nil {
                return err
            }
        case (id == 17 && wireType == thrift.Type(thrift.I16)):  // short_field
            if err := x.readField17(p); err != nil {
                return err
            }
        case (id == 18 && wireType == thrift.Type(thrift.I32)):  // int_field
            if err := x.readField18(p); err != nil {
                return err
            }
        case (id == 19 && wireType == thrift.Type(thrift.I64)):  // long_field
            if err := x.readField19(p); err != nil {
                return err
            }
        case (id == 20 && wireType == thrift.Type(thrift.FLOAT)):  // float_field
            if err := x.readField20(p); err != nil {
                return err
            }
        case (id == 21 && wireType == thrift.Type(thrift.DOUBLE)):  // double_field
            if err := x.readField21(p); err != nil {
                return err
            }
        case (id == 22 && wireType == thrift.Type(thrift.STRING)):  // string_field
            if err := x.readField22(p); err != nil {
                return err
            }
        case (id == 23 && wireType == thrift.Type(thrift.STRING)):  // binary_field
            if err := x.readField23(p); err != nil {
                return err
            }
        case (id == 24 && wireType == thrift.Type(thrift.I32)):  // enum_field
            if err := x.readField24(p); err != nil {
                return err
            }
        case (id == 25 && wireType == thrift.Type(thrift.LIST)):  // list_field
            if err := x.readField25(p); err != nil {
                return err
            }
        case (id == 26 && wireType == thrift.Type(thrift.SET)):  // set_field
            if err := x.readField26(p); err != nil {
                return err
            }
        case (id == 27 && wireType == thrift.Type(thrift.MAP)):  // map_field
            if err := x.readField27(p); err != nil {
                return err
            }
        case (id == 28 && wireType == thrift.Type(thrift.STRUCT)):  // struct_field
            if err := x.readField28(p); err != nil {
                return err
            }
        case (id == 29 && wireType == thrift.Type(thrift.STRUCT)):  // terse_union_field
            if err := x.readField29(p); err != nil {
                return err
            }
        case (id == 30 && wireType == thrift.Type(thrift.STRUCT)):  // union_field
            if err := x.readField30(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *FieldLevelTerseStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("FieldLevelTerseStruct({")
    sb.WriteString(fmt.Sprintf("TerseBoolField:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("TerseByteField:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("TerseShortField:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("TerseIntField:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("TerseLongField:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("TerseFloatField:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("TerseDoubleField:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("TerseStringField:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("TerseBinaryField:%s ", x.toString9()))
    sb.WriteString(fmt.Sprintf("TerseEnumField:%s ", x.toString10()))
    sb.WriteString(fmt.Sprintf("TerseListField:%s ", x.toString11()))
    sb.WriteString(fmt.Sprintf("TerseSetField:%s ", x.toString12()))
    sb.WriteString(fmt.Sprintf("TerseMapField:%s ", x.toString13()))
    sb.WriteString(fmt.Sprintf("TerseStructField:%s ", x.toString14()))
    sb.WriteString(fmt.Sprintf("BoolField:%s ", x.toString15()))
    sb.WriteString(fmt.Sprintf("ByteField:%s ", x.toString16()))
    sb.WriteString(fmt.Sprintf("ShortField:%s ", x.toString17()))
    sb.WriteString(fmt.Sprintf("IntField:%s ", x.toString18()))
    sb.WriteString(fmt.Sprintf("LongField:%s ", x.toString19()))
    sb.WriteString(fmt.Sprintf("FloatField:%s ", x.toString20()))
    sb.WriteString(fmt.Sprintf("DoubleField:%s ", x.toString21()))
    sb.WriteString(fmt.Sprintf("StringField:%s ", x.toString22()))
    sb.WriteString(fmt.Sprintf("BinaryField:%s ", x.toString23()))
    sb.WriteString(fmt.Sprintf("EnumField:%s ", x.toString24()))
    sb.WriteString(fmt.Sprintf("ListField:%s ", x.toString25()))
    sb.WriteString(fmt.Sprintf("SetField:%s ", x.toString26()))
    sb.WriteString(fmt.Sprintf("MapField:%s ", x.toString27()))
    sb.WriteString(fmt.Sprintf("StructField:%s ", x.toString28()))
    sb.WriteString(fmt.Sprintf("TerseUnionField:%s ", x.toString29()))
    sb.WriteString(fmt.Sprintf("UnionField:%s", x.toString30()))
    sb.WriteString("})")

    return sb.String()
}

type TerseStructWithCustomDefault struct {
    BoolField bool `thrift:"bool_field,1" json:"bool_field" db:"bool_field"`
    ByteField int8 `thrift:"byte_field,2" json:"byte_field" db:"byte_field"`
    ShortField int16 `thrift:"short_field,3" json:"short_field" db:"short_field"`
    IntField int32 `thrift:"int_field,4" json:"int_field" db:"int_field"`
    LongField int64 `thrift:"long_field,5" json:"long_field" db:"long_field"`
    FloatField float32 `thrift:"float_field,6" json:"float_field" db:"float_field"`
    DoubleField float64 `thrift:"double_field,7" json:"double_field" db:"double_field"`
    StringField string `thrift:"string_field,8" json:"string_field" db:"string_field"`
    BinaryField []byte `thrift:"binary_field,9" json:"binary_field" db:"binary_field"`
    EnumField MyEnum `thrift:"enum_field,10" json:"enum_field" db:"enum_field"`
    ListField []int16 `thrift:"list_field,11" json:"list_field" db:"list_field"`
    SetField []int16 `thrift:"set_field,12" json:"set_field" db:"set_field"`
    MapField map[int16]int16 `thrift:"map_field,13" json:"map_field" db:"map_field"`
    StructField *MyStructWithCustomDefault `thrift:"struct_field,14" json:"struct_field" db:"struct_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*TerseStructWithCustomDefault)(nil)

func NewTerseStructWithCustomDefault() *TerseStructWithCustomDefault {
    return (&TerseStructWithCustomDefault{}).
        SetBoolFieldNonCompat(true).
        SetByteFieldNonCompat(1).
        SetShortFieldNonCompat(2).
        SetIntFieldNonCompat(3).
        SetLongFieldNonCompat(4).
        SetFloatFieldNonCompat(5).
        SetDoubleFieldNonCompat(6).
        SetStringFieldNonCompat("7").
        SetBinaryFieldNonCompat([]byte("8")).
        SetEnumFieldNonCompat(
              MyEnum_ME1,
          ).
        SetListFieldNonCompat(
              []int16{
    1,
},
          ).
        SetSetFieldNonCompat(
              []int16{
    1,
},
          ).
        SetMapFieldNonCompat(
              map[int16]int16{
    1: 1,
},
          ).
        SetStructFieldNonCompat(*NewMyStructWithCustomDefault())
}

func (x *TerseStructWithCustomDefault) GetBoolField() bool {
    return x.BoolField
}

func (x *TerseStructWithCustomDefault) GetByteField() int8 {
    return x.ByteField
}

func (x *TerseStructWithCustomDefault) GetShortField() int16 {
    return x.ShortField
}

func (x *TerseStructWithCustomDefault) GetIntField() int32 {
    return x.IntField
}

func (x *TerseStructWithCustomDefault) GetLongField() int64 {
    return x.LongField
}

func (x *TerseStructWithCustomDefault) GetFloatField() float32 {
    return x.FloatField
}

func (x *TerseStructWithCustomDefault) GetDoubleField() float64 {
    return x.DoubleField
}

func (x *TerseStructWithCustomDefault) GetStringField() string {
    return x.StringField
}

func (x *TerseStructWithCustomDefault) GetBinaryField() []byte {
    if !x.IsSetBinaryField() {
        return []byte("8")
    }

    return x.BinaryField
}

func (x *TerseStructWithCustomDefault) GetEnumField() MyEnum {
    return x.EnumField
}

func (x *TerseStructWithCustomDefault) GetListField() []int16 {
    if !x.IsSetListField() {
        return []int16{
    1,
}
    }

    return x.ListField
}

func (x *TerseStructWithCustomDefault) GetSetField() []int16 {
    if !x.IsSetSetField() {
        return []int16{
    1,
}
    }

    return x.SetField
}

func (x *TerseStructWithCustomDefault) GetMapField() map[int16]int16 {
    if !x.IsSetMapField() {
        return map[int16]int16{
    1: 1,
}
    }

    return x.MapField
}

func (x *TerseStructWithCustomDefault) GetStructField() *MyStructWithCustomDefault {
    if !x.IsSetStructField() {
        return nil
    }

    return x.StructField
}

func (x *TerseStructWithCustomDefault) SetBoolFieldNonCompat(value bool) *TerseStructWithCustomDefault {
    x.BoolField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetBoolField(value bool) *TerseStructWithCustomDefault {
    x.BoolField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetByteFieldNonCompat(value int8) *TerseStructWithCustomDefault {
    x.ByteField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetByteField(value int8) *TerseStructWithCustomDefault {
    x.ByteField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetShortFieldNonCompat(value int16) *TerseStructWithCustomDefault {
    x.ShortField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetShortField(value int16) *TerseStructWithCustomDefault {
    x.ShortField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetIntFieldNonCompat(value int32) *TerseStructWithCustomDefault {
    x.IntField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetIntField(value int32) *TerseStructWithCustomDefault {
    x.IntField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetLongFieldNonCompat(value int64) *TerseStructWithCustomDefault {
    x.LongField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetLongField(value int64) *TerseStructWithCustomDefault {
    x.LongField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetFloatFieldNonCompat(value float32) *TerseStructWithCustomDefault {
    x.FloatField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetFloatField(value float32) *TerseStructWithCustomDefault {
    x.FloatField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetDoubleFieldNonCompat(value float64) *TerseStructWithCustomDefault {
    x.DoubleField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetDoubleField(value float64) *TerseStructWithCustomDefault {
    x.DoubleField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetStringFieldNonCompat(value string) *TerseStructWithCustomDefault {
    x.StringField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetStringField(value string) *TerseStructWithCustomDefault {
    x.StringField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetBinaryFieldNonCompat(value []byte) *TerseStructWithCustomDefault {
    x.BinaryField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetBinaryField(value []byte) *TerseStructWithCustomDefault {
    x.BinaryField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetEnumFieldNonCompat(value MyEnum) *TerseStructWithCustomDefault {
    x.EnumField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetEnumField(value MyEnum) *TerseStructWithCustomDefault {
    x.EnumField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetListFieldNonCompat(value []int16) *TerseStructWithCustomDefault {
    x.ListField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetListField(value []int16) *TerseStructWithCustomDefault {
    x.ListField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetSetFieldNonCompat(value []int16) *TerseStructWithCustomDefault {
    x.SetField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetSetField(value []int16) *TerseStructWithCustomDefault {
    x.SetField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetMapFieldNonCompat(value map[int16]int16) *TerseStructWithCustomDefault {
    x.MapField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetMapField(value map[int16]int16) *TerseStructWithCustomDefault {
    x.MapField = value
    return x
}

func (x *TerseStructWithCustomDefault) SetStructFieldNonCompat(value MyStructWithCustomDefault) *TerseStructWithCustomDefault {
    x.StructField = &value
    return x
}

func (x *TerseStructWithCustomDefault) SetStructField(value *MyStructWithCustomDefault) *TerseStructWithCustomDefault {
    x.StructField = value
    return x
}

func (x *TerseStructWithCustomDefault) IsSetBinaryField() bool {
    return x != nil && x.BinaryField != nil
}

func (x *TerseStructWithCustomDefault) IsSetListField() bool {
    return x != nil && x.ListField != nil
}

func (x *TerseStructWithCustomDefault) IsSetSetField() bool {
    return x != nil && x.SetField != nil
}

func (x *TerseStructWithCustomDefault) IsSetMapField() bool {
    return x != nil && x.MapField != nil
}

func (x *TerseStructWithCustomDefault) IsSetStructField() bool {
    return x != nil && x.StructField != nil
}

func (x *TerseStructWithCustomDefault) writeField1(p thrift.Format) error {  // BoolField
    if err := p.WriteFieldBegin("bool_field", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BoolField
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField2(p thrift.Format) error {  // ByteField
    if err := p.WriteFieldBegin("byte_field", thrift.BYTE, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ByteField
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField3(p thrift.Format) error {  // ShortField
    if err := p.WriteFieldBegin("short_field", thrift.I16, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ShortField
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField4(p thrift.Format) error {  // IntField
    if err := p.WriteFieldBegin("int_field", thrift.I32, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.IntField
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField5(p thrift.Format) error {  // LongField
    if err := p.WriteFieldBegin("long_field", thrift.I64, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.LongField
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField6(p thrift.Format) error {  // FloatField
    if err := p.WriteFieldBegin("float_field", thrift.FLOAT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.FloatField
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField7(p thrift.Format) error {  // DoubleField
    if err := p.WriteFieldBegin("double_field", thrift.DOUBLE, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.DoubleField
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField8(p thrift.Format) error {  // StringField
    if err := p.WriteFieldBegin("string_field", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StringField
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField9(p thrift.Format) error {  // BinaryField
    if err := p.WriteFieldBegin("binary_field", thrift.STRING, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BinaryField
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField10(p thrift.Format) error {  // EnumField
    if err := p.WriteFieldBegin("enum_field", thrift.I32, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.EnumField
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField11(p thrift.Format) error {  // ListField
    if err := p.WriteFieldBegin("list_field", thrift.LIST, 11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ListField
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField12(p thrift.Format) error {  // SetField
    if err := p.WriteFieldBegin("set_field", thrift.SET, 12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SetField
    if err := p.WriteSetBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField13(p thrift.Format) error {  // MapField
    if err := p.WriteFieldBegin("map_field", thrift.MAP, 13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MapField
    if err := p.WriteMapBegin(thrift.I16, thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI16(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) writeField14(p thrift.Format) error {  // StructField
    if !x.IsSetStructField() {
        return nil
    }

    if err := p.WriteFieldBegin("struct_field", thrift.STRUCT, 14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructField
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) readField1(p thrift.Format) error {  // BoolField
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.BoolField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField2(p thrift.Format) error {  // ByteField
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.ByteField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField3(p thrift.Format) error {  // ShortField
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.ShortField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField4(p thrift.Format) error {  // IntField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.IntField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField5(p thrift.Format) error {  // LongField
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.LongField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField6(p thrift.Format) error {  // FloatField
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.FloatField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField7(p thrift.Format) error {  // DoubleField
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.DoubleField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField8(p thrift.Format) error {  // StringField
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.StringField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField9(p thrift.Format) error {  // BinaryField
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.BinaryField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField10(p thrift.Format) error {  // EnumField
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.EnumField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField11(p thrift.Format) error {  // ListField
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.ListField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField12(p thrift.Format) error {  // SetField
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField13(p thrift.Format) error {  // MapField
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int16]int16, size)
for i := 0; i < size; i++ {
    var key int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        key = result
    }

    var value int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.MapField = result
    return nil
}

func (x *TerseStructWithCustomDefault) readField14(p thrift.Format) error {  // StructField
    result := *NewMyStructWithCustomDefault()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructField = &result
    return nil
}

func (x *TerseStructWithCustomDefault) toString1() string {  // BoolField
    return fmt.Sprintf("%v", x.BoolField)
}

func (x *TerseStructWithCustomDefault) toString2() string {  // ByteField
    return fmt.Sprintf("%v", x.ByteField)
}

func (x *TerseStructWithCustomDefault) toString3() string {  // ShortField
    return fmt.Sprintf("%v", x.ShortField)
}

func (x *TerseStructWithCustomDefault) toString4() string {  // IntField
    return fmt.Sprintf("%v", x.IntField)
}

func (x *TerseStructWithCustomDefault) toString5() string {  // LongField
    return fmt.Sprintf("%v", x.LongField)
}

func (x *TerseStructWithCustomDefault) toString6() string {  // FloatField
    return fmt.Sprintf("%v", x.FloatField)
}

func (x *TerseStructWithCustomDefault) toString7() string {  // DoubleField
    return fmt.Sprintf("%v", x.DoubleField)
}

func (x *TerseStructWithCustomDefault) toString8() string {  // StringField
    return fmt.Sprintf("%v", x.StringField)
}

func (x *TerseStructWithCustomDefault) toString9() string {  // BinaryField
    return fmt.Sprintf("%v", x.BinaryField)
}

func (x *TerseStructWithCustomDefault) toString10() string {  // EnumField
    return fmt.Sprintf("%v", x.EnumField)
}

func (x *TerseStructWithCustomDefault) toString11() string {  // ListField
    return fmt.Sprintf("%v", x.ListField)
}

func (x *TerseStructWithCustomDefault) toString12() string {  // SetField
    return fmt.Sprintf("%v", x.SetField)
}

func (x *TerseStructWithCustomDefault) toString13() string {  // MapField
    return fmt.Sprintf("%v", x.MapField)
}

func (x *TerseStructWithCustomDefault) toString14() string {  // StructField
    return fmt.Sprintf("%v", x.StructField)
}

// Deprecated: Use NewTerseStructWithCustomDefault().GetStructField() instead.
func (x *TerseStructWithCustomDefault) DefaultGetStructField() *MyStructWithCustomDefault {
    if !x.IsSetStructField() {
        return NewMyStructWithCustomDefault()
    }
    return x.StructField
}



func (x *TerseStructWithCustomDefault) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("TerseStructWithCustomDefault"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := x.writeField11(p); err != nil {
        return err
    }

    if err := x.writeField12(p); err != nil {
        return err
    }

    if err := x.writeField13(p); err != nil {
        return err
    }

    if err := x.writeField14(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *TerseStructWithCustomDefault) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.BOOL)):  // bool_field
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BYTE)):  // byte_field
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.I16)):  // short_field
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.I32)):  // int_field
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.I64)):  // long_field
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.FLOAT)):  // float_field
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.DOUBLE)):  // double_field
            if err := x.readField7(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.STRING)):  // string_field
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.STRING)):  // binary_field
            if err := x.readField9(p); err != nil {
                return err
            }
        case (id == 10 && wireType == thrift.Type(thrift.I32)):  // enum_field
            if err := x.readField10(p); err != nil {
                return err
            }
        case (id == 11 && wireType == thrift.Type(thrift.LIST)):  // list_field
            if err := x.readField11(p); err != nil {
                return err
            }
        case (id == 12 && wireType == thrift.Type(thrift.SET)):  // set_field
            if err := x.readField12(p); err != nil {
                return err
            }
        case (id == 13 && wireType == thrift.Type(thrift.MAP)):  // map_field
            if err := x.readField13(p); err != nil {
                return err
            }
        case (id == 14 && wireType == thrift.Type(thrift.STRUCT)):  // struct_field
            if err := x.readField14(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *TerseStructWithCustomDefault) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("TerseStructWithCustomDefault({")
    sb.WriteString(fmt.Sprintf("BoolField:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("ByteField:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("ShortField:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("IntField:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("LongField:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("FloatField:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("DoubleField:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("StringField:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("BinaryField:%s ", x.toString9()))
    sb.WriteString(fmt.Sprintf("EnumField:%s ", x.toString10()))
    sb.WriteString(fmt.Sprintf("ListField:%s ", x.toString11()))
    sb.WriteString(fmt.Sprintf("SetField:%s ", x.toString12()))
    sb.WriteString(fmt.Sprintf("MapField:%s ", x.toString13()))
    sb.WriteString(fmt.Sprintf("StructField:%s", x.toString14()))
    sb.WriteString("})")

    return sb.String()
}

type AdaptedFields struct {
    Field1 MyInteger `thrift:"field1,1" json:"field1" db:"field1"`
    Field2 int32 `thrift:"field2,2" json:"field2" db:"field2"`
    Field3 MyInteger `thrift:"field3,3" json:"field3" db:"field3"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*AdaptedFields)(nil)

func NewAdaptedFields() *AdaptedFields {
    return (&AdaptedFields{}).
        SetField1NonCompat(NewMyInteger()).
        SetField2NonCompat(0).
        SetField3NonCompat(NewMyInteger())
}

func (x *AdaptedFields) GetField1() MyInteger {
    return x.Field1
}

func (x *AdaptedFields) GetField2() int32 {
    return x.Field2
}

func (x *AdaptedFields) GetField3() MyInteger {
    return x.Field3
}

func (x *AdaptedFields) SetField1NonCompat(value MyInteger) *AdaptedFields {
    x.Field1 = value
    return x
}

func (x *AdaptedFields) SetField1(value MyInteger) *AdaptedFields {
    x.Field1 = value
    return x
}

func (x *AdaptedFields) SetField2NonCompat(value int32) *AdaptedFields {
    x.Field2 = value
    return x
}

func (x *AdaptedFields) SetField2(value int32) *AdaptedFields {
    x.Field2 = value
    return x
}

func (x *AdaptedFields) SetField3NonCompat(value MyInteger) *AdaptedFields {
    x.Field3 = value
    return x
}

func (x *AdaptedFields) SetField3(value MyInteger) *AdaptedFields {
    x.Field3 = value
    return x
}

func (x *AdaptedFields) writeField1(p thrift.Format) error {  // Field1
    if err := p.WriteFieldBegin("field1", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Field1
    err := WriteMyInteger(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *AdaptedFields) writeField2(p thrift.Format) error {  // Field2
    if err := p.WriteFieldBegin("field2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Field2
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *AdaptedFields) writeField3(p thrift.Format) error {  // Field3
    if err := p.WriteFieldBegin("field3", thrift.I32, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Field3
    err := WriteMyInteger(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *AdaptedFields) readField1(p thrift.Format) error {  // Field1
    result, err := ReadMyInteger(p)
if err != nil {
    return err
}

    x.Field1 = result
    return nil
}

func (x *AdaptedFields) readField2(p thrift.Format) error {  // Field2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Field2 = result
    return nil
}

func (x *AdaptedFields) readField3(p thrift.Format) error {  // Field3
    result, err := ReadMyInteger(p)
if err != nil {
    return err
}

    x.Field3 = result
    return nil
}

func (x *AdaptedFields) toString1() string {  // Field1
    return fmt.Sprintf("%v", x.Field1)
}

func (x *AdaptedFields) toString2() string {  // Field2
    return fmt.Sprintf("%v", x.Field2)
}

func (x *AdaptedFields) toString3() string {  // Field3
    return fmt.Sprintf("%v", x.Field3)
}



func (x *AdaptedFields) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("AdaptedFields"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *AdaptedFields) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // field1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // field2
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.I32)):  // field3
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *AdaptedFields) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("AdaptedFields({")
    sb.WriteString(fmt.Sprintf("Field1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Field2:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Field3:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type WrappedFields struct {
    Field1 int32 `thrift:"field1,1" json:"field1" db:"field1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*WrappedFields)(nil)

func NewWrappedFields() *WrappedFields {
    return (&WrappedFields{}).
        SetField1NonCompat(7)
}

func (x *WrappedFields) GetField1() int32 {
    return x.Field1
}

func (x *WrappedFields) SetField1NonCompat(value int32) *WrappedFields {
    x.Field1 = value
    return x
}

func (x *WrappedFields) SetField1(value int32) *WrappedFields {
    x.Field1 = value
    return x
}

func (x *WrappedFields) writeField1(p thrift.Format) error {  // Field1
    if err := p.WriteFieldBegin("field1", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Field1
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *WrappedFields) readField1(p thrift.Format) error {  // Field1
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Field1 = result
    return nil
}

func (x *WrappedFields) toString1() string {  // Field1
    return fmt.Sprintf("%v", x.Field1)
}



func (x *WrappedFields) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("WrappedFields"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *WrappedFields) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // field1
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *WrappedFields) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("WrappedFields({")
    sb.WriteString(fmt.Sprintf("Field1:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type TerseException struct {
    Msg string `thrift:"msg,1" json:"msg" db:"msg"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*TerseException)(nil)

func NewTerseException() *TerseException {
    return (&TerseException{}).
        SetMsgNonCompat("")
}

func (x *TerseException) GetMsg() string {
    return x.Msg
}

func (x *TerseException) SetMsgNonCompat(value string) *TerseException {
    x.Msg = value
    return x
}

func (x *TerseException) SetMsg(value string) *TerseException {
    x.Msg = value
    return x
}

func (x *TerseException) writeField1(p thrift.Format) error {  // Msg
    if err := p.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Msg
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *TerseException) readField1(p thrift.Format) error {  // Msg
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Msg = result
    return nil
}

func (x *TerseException) toString1() string {  // Msg
    return fmt.Sprintf("%v", x.Msg)
}



func (x *TerseException) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("TerseException"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *TerseException) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // msg
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *TerseException) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("TerseException({")
    sb.WriteString(fmt.Sprintf("Msg:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}
func (x *TerseException) Error() string {
    return x.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("facebook.com/thrift/test/terse_write/MyStruct", func() any { return NewMyStruct() })
    registry.RegisterType("facebook.com/thrift/test/terse_write/MyUnion", func() any { return NewMyUnion() })
    registry.RegisterType("facebook.com/thrift/test/terse_write/MyStructWithCustomDefault", func() any { return NewMyStructWithCustomDefault() })
    registry.RegisterType("facebook.com/thrift/test/terse_write/StructLevelTerseStruct", func() any { return NewStructLevelTerseStruct() })
    registry.RegisterType("facebook.com/thrift/test/terse_write/FieldLevelTerseStruct", func() any { return NewFieldLevelTerseStruct() })
    registry.RegisterType("facebook.com/thrift/test/terse_write/TerseStructWithCustomDefault", func() any { return NewTerseStructWithCustomDefault() })
    registry.RegisterType("facebook.com/thrift/test/terse_write/AdaptedFields", func() any { return NewAdaptedFields() })
    registry.RegisterType("facebook.com/thrift/test/terse_write/WrappedFields", func() any { return NewWrappedFields() })
    registry.RegisterType("facebook.com/thrift/test/terse_write/TerseException", func() any { return NewTerseException() })

    registry.RegisterType("facebook.com/thrift/test/terse_write/MyEnum", func() any { return MyEnum(0) })
}
