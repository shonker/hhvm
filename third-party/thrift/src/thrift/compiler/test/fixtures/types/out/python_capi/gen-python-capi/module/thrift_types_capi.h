
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/types/gen-cpp2/module_types.h>

namespace apache {
namespace thrift {
namespace python {
namespace capi {
template <>
struct Extractor<::apache::thrift::fixtures::types::empty_struct>
    : public BaseExtractor<::apache::thrift::fixtures::types::empty_struct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::empty_struct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct>> {
  ExtractorResult<::apache::thrift::fixtures::types::empty_struct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::empty_struct>
    : public BaseConstructor<::apache::thrift::fixtures::types::empty_struct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::empty_struct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::empty_struct& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::decorated_struct>
    : public BaseExtractor<::apache::thrift::fixtures::types::decorated_struct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::decorated_struct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct>> {
  ExtractorResult<::apache::thrift::fixtures::types::decorated_struct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::decorated_struct>
    : public BaseConstructor<::apache::thrift::fixtures::types::decorated_struct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::decorated_struct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::decorated_struct& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::ContainerStruct>
    : public BaseExtractor<::apache::thrift::fixtures::types::ContainerStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::ContainerStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct>> {
  ExtractorResult<::apache::thrift::fixtures::types::ContainerStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::ContainerStruct>
    : public BaseConstructor<::apache::thrift::fixtures::types::ContainerStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ContainerStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ContainerStruct& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::CppTypeStruct>
    : public BaseExtractor<::apache::thrift::fixtures::types::CppTypeStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::CppTypeStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct>> {
  ExtractorResult<::apache::thrift::fixtures::types::CppTypeStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::CppTypeStruct>
    : public BaseConstructor<::apache::thrift::fixtures::types::CppTypeStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CppTypeStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CppTypeStruct& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::VirtualStruct>
    : public BaseExtractor<::apache::thrift::fixtures::types::VirtualStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::VirtualStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct>> {
  ExtractorResult<::apache::thrift::fixtures::types::VirtualStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::VirtualStruct>
    : public BaseConstructor<::apache::thrift::fixtures::types::VirtualStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::VirtualStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::VirtualStruct& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>
    : public BaseExtractor<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>> {
  ExtractorResult<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>
    : public BaseConstructor<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::TrivialNumeric>
    : public BaseExtractor<::apache::thrift::fixtures::types::TrivialNumeric> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::TrivialNumeric> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric>> {
  ExtractorResult<::apache::thrift::fixtures::types::TrivialNumeric> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::TrivialNumeric>
    : public BaseConstructor<::apache::thrift::fixtures::types::TrivialNumeric> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::TrivialNumeric& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::TrivialNumeric& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::TrivialNestedWithDefault>
    : public BaseExtractor<::apache::thrift::fixtures::types::TrivialNestedWithDefault> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::TrivialNestedWithDefault> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault>> {
  ExtractorResult<::apache::thrift::fixtures::types::TrivialNestedWithDefault> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::TrivialNestedWithDefault>
    : public BaseConstructor<::apache::thrift::fixtures::types::TrivialNestedWithDefault> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::TrivialNestedWithDefault& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::TrivialNestedWithDefault& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::ComplexString>
    : public BaseExtractor<::apache::thrift::fixtures::types::ComplexString> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ComplexString> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString>> {
  ExtractorResult<::apache::thrift::fixtures::types::ComplexString> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::ComplexString>
    : public BaseConstructor<::apache::thrift::fixtures::types::ComplexString> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ComplexString& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ComplexString& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::ComplexNestedWithDefault>
    : public BaseExtractor<::apache::thrift::fixtures::types::ComplexNestedWithDefault> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ComplexNestedWithDefault> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault>> {
  ExtractorResult<::apache::thrift::fixtures::types::ComplexNestedWithDefault> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::ComplexNestedWithDefault>
    : public BaseConstructor<::apache::thrift::fixtures::types::ComplexNestedWithDefault> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ComplexNestedWithDefault& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ComplexNestedWithDefault& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::MinPadding>
    : public BaseExtractor<::apache::thrift::fixtures::types::MinPadding> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::MinPadding> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding>> {
  ExtractorResult<::apache::thrift::fixtures::types::MinPadding> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::MinPadding>
    : public BaseConstructor<::apache::thrift::fixtures::types::MinPadding> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MinPadding& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MinPadding& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::MinPaddingWithCustomType>
    : public BaseExtractor<::apache::thrift::fixtures::types::MinPaddingWithCustomType> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::MinPaddingWithCustomType> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType>> {
  ExtractorResult<::apache::thrift::fixtures::types::MinPaddingWithCustomType> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::MinPaddingWithCustomType>
    : public BaseConstructor<::apache::thrift::fixtures::types::MinPaddingWithCustomType> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MinPaddingWithCustomType& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MinPaddingWithCustomType& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::MyStruct>
    : public BaseExtractor<::apache::thrift::fixtures::types::MyStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct>> {
  ExtractorResult<::apache::thrift::fixtures::types::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::MyStruct>
    : public BaseConstructor<::apache::thrift::fixtures::types::MyStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyStruct& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::MyDataItem>
    : public BaseExtractor<::apache::thrift::fixtures::types::MyDataItem> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::MyDataItem> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem>> {
  ExtractorResult<::apache::thrift::fixtures::types::MyDataItem> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::MyDataItem>
    : public BaseConstructor<::apache::thrift::fixtures::types::MyDataItem> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyDataItem& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::MyDataItem& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::Renamed>
    : public BaseExtractor<::apache::thrift::fixtures::types::Renamed> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::Renamed> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed>> {
  ExtractorResult<::apache::thrift::fixtures::types::Renamed> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::Renamed>
    : public BaseConstructor<::apache::thrift::fixtures::types::Renamed> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::Renamed& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::Renamed& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::AnnotatedTypes>
    : public BaseExtractor<::apache::thrift::fixtures::types::AnnotatedTypes> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::AnnotatedTypes> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes>> {
  ExtractorResult<::apache::thrift::fixtures::types::AnnotatedTypes> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::AnnotatedTypes>
    : public BaseConstructor<::apache::thrift::fixtures::types::AnnotatedTypes> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::AnnotatedTypes& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::AnnotatedTypes& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::ForwardUsageRoot>
    : public BaseExtractor<::apache::thrift::fixtures::types::ForwardUsageRoot> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageRoot> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot>> {
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageRoot> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::ForwardUsageRoot>
    : public BaseConstructor<::apache::thrift::fixtures::types::ForwardUsageRoot> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageRoot& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageRoot& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::ForwardUsageStruct>
    : public BaseExtractor<::apache::thrift::fixtures::types::ForwardUsageStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct>> {
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::ForwardUsageStruct>
    : public BaseConstructor<::apache::thrift::fixtures::types::ForwardUsageStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageStruct& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::ForwardUsageByRef>
    : public BaseExtractor<::apache::thrift::fixtures::types::ForwardUsageByRef> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageByRef> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef>> {
  ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageByRef> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::ForwardUsageByRef>
    : public BaseConstructor<::apache::thrift::fixtures::types::ForwardUsageByRef> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageByRef& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::ForwardUsageByRef& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::IncompleteMap>
    : public BaseExtractor<::apache::thrift::fixtures::types::IncompleteMap> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteMap> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap>> {
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteMap> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::IncompleteMap>
    : public BaseConstructor<::apache::thrift::fixtures::types::IncompleteMap> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteMap& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteMap& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::IncompleteMapDep>
    : public BaseExtractor<::apache::thrift::fixtures::types::IncompleteMapDep> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteMapDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep>> {
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteMapDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::IncompleteMapDep>
    : public BaseConstructor<::apache::thrift::fixtures::types::IncompleteMapDep> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteMapDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteMapDep& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::CompleteMap>
    : public BaseExtractor<::apache::thrift::fixtures::types::CompleteMap> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::CompleteMap> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap>> {
  ExtractorResult<::apache::thrift::fixtures::types::CompleteMap> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::CompleteMap>
    : public BaseConstructor<::apache::thrift::fixtures::types::CompleteMap> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteMap& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteMap& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::CompleteMapDep>
    : public BaseExtractor<::apache::thrift::fixtures::types::CompleteMapDep> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::CompleteMapDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep>> {
  ExtractorResult<::apache::thrift::fixtures::types::CompleteMapDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::CompleteMapDep>
    : public BaseConstructor<::apache::thrift::fixtures::types::CompleteMapDep> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteMapDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteMapDep& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::IncompleteList>
    : public BaseExtractor<::apache::thrift::fixtures::types::IncompleteList> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteList> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList>> {
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteList> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::IncompleteList>
    : public BaseConstructor<::apache::thrift::fixtures::types::IncompleteList> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteList& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteList& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::IncompleteListDep>
    : public BaseExtractor<::apache::thrift::fixtures::types::IncompleteListDep> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteListDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep>> {
  ExtractorResult<::apache::thrift::fixtures::types::IncompleteListDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::IncompleteListDep>
    : public BaseConstructor<::apache::thrift::fixtures::types::IncompleteListDep> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteListDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::IncompleteListDep& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::CompleteList>
    : public BaseExtractor<::apache::thrift::fixtures::types::CompleteList> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::CompleteList> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList>> {
  ExtractorResult<::apache::thrift::fixtures::types::CompleteList> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::CompleteList>
    : public BaseConstructor<::apache::thrift::fixtures::types::CompleteList> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteList& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteList& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::CompleteListDep>
    : public BaseExtractor<::apache::thrift::fixtures::types::CompleteListDep> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::CompleteListDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep>> {
  ExtractorResult<::apache::thrift::fixtures::types::CompleteListDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::CompleteListDep>
    : public BaseConstructor<::apache::thrift::fixtures::types::CompleteListDep> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteListDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::CompleteListDep& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::AdaptedList>
    : public BaseExtractor<::apache::thrift::fixtures::types::AdaptedList> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::AdaptedList> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList>> {
  ExtractorResult<::apache::thrift::fixtures::types::AdaptedList> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::AdaptedList>
    : public BaseConstructor<::apache::thrift::fixtures::types::AdaptedList> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::AdaptedList& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::AdaptedList& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::detail::AdaptedListDep>
    : public BaseExtractor<::apache::thrift::fixtures::types::detail::AdaptedListDep> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::detail::AdaptedListDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep>> {
  ExtractorResult<::apache::thrift::fixtures::types::detail::AdaptedListDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::detail::AdaptedListDep>
    : public BaseConstructor<::apache::thrift::fixtures::types::detail::AdaptedListDep> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::detail::AdaptedListDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::detail::AdaptedListDep& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::DependentAdaptedList>
    : public BaseExtractor<::apache::thrift::fixtures::types::DependentAdaptedList> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::DependentAdaptedList> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList>> {
  ExtractorResult<::apache::thrift::fixtures::types::DependentAdaptedList> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::DependentAdaptedList>
    : public BaseConstructor<::apache::thrift::fixtures::types::DependentAdaptedList> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::DependentAdaptedList& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::DependentAdaptedList& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>
    : public BaseExtractor<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>> {
  ExtractorResult<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>
    : public BaseConstructor<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::AllocatorAware>
    : public BaseExtractor<::apache::thrift::fixtures::types::AllocatorAware> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware>> {
  ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::AllocatorAware>
    : public BaseConstructor<::apache::thrift::fixtures::types::AllocatorAware> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::AllocatorAware& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::AllocatorAware& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::AllocatorAware2>
    : public BaseExtractor<::apache::thrift::fixtures::types::AllocatorAware2> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware2> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2>> {
  ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware2> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::AllocatorAware2>
    : public BaseConstructor<::apache::thrift::fixtures::types::AllocatorAware2> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::AllocatorAware2& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::AllocatorAware2& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::TypedefStruct>
    : public BaseExtractor<::apache::thrift::fixtures::types::TypedefStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::apache::thrift::fixtures::types::TypedefStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct>> {
  ExtractorResult<::apache::thrift::fixtures::types::TypedefStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::TypedefStruct>
    : public BaseConstructor<::apache::thrift::fixtures::types::TypedefStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::apache::thrift::fixtures::types::TypedefStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::TypedefStruct& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>
    : public BaseExtractor<::apache::thrift::fixtures::types::StructWithDoubleUnderscores> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::apache::thrift::fixtures::types::StructWithDoubleUnderscores> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores>> {
  ExtractorResult<::apache::thrift::fixtures::types::StructWithDoubleUnderscores> operator()(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>
    : public BaseConstructor<::apache::thrift::fixtures::types::StructWithDoubleUnderscores> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::apache::thrift::fixtures::types::StructWithDoubleUnderscores& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores>> {
  PyObject* operator()(const ::apache::thrift::fixtures::types::StructWithDoubleUnderscores& val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::has_bitwise_ops>
    : public BaseExtractor<::apache::thrift::fixtures::types::has_bitwise_ops> {
  ExtractorResult<::apache::thrift::fixtures::types::has_bitwise_ops> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::has_bitwise_ops> {
  PyObject* operator()(::apache::thrift::fixtures::types::has_bitwise_ops val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::is_unscoped>
    : public BaseExtractor<::apache::thrift::fixtures::types::is_unscoped> {
  ExtractorResult<::apache::thrift::fixtures::types::is_unscoped> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::is_unscoped> {
  PyObject* operator()(::apache::thrift::fixtures::types::is_unscoped val);
};

template <>
struct Extractor<::apache::thrift::fixtures::types::MyForwardRefEnum>
    : public BaseExtractor<::apache::thrift::fixtures::types::MyForwardRefEnum> {
  ExtractorResult<::apache::thrift::fixtures::types::MyForwardRefEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::apache::thrift::fixtures::types::MyForwardRefEnum> {
  PyObject* operator()(::apache::thrift::fixtures::types::MyForwardRefEnum val);
};

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
