/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/int_limits/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/compiler/test/fixtures/int_limits/gen-cpp2/module_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::cpp2::Limits> {
  template <typename F, typename T>
  void operator()([[maybe_unused]] F&& f, int32_t fieldId, [[maybe_unused]] T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).max_i64_field_ref());
    case 2:
      return f(1, static_cast<T&&>(t).min_i64_field_ref());
    case 3:
      return f(2, static_cast<T&&>(t).max_i32_field_ref());
    case 4:
      return f(3, static_cast<T&&>(t).min_i32_field_ref());
    case 5:
      return f(4, static_cast<T&&>(t).max_i16_field_ref());
    case 6:
      return f(5, static_cast<T&&>(t).min_i16_field_ref());
    case 7:
      return f(6, static_cast<T&&>(t).max_byte_field_ref());
    case 8:
      return f(7, static_cast<T&&>(t).min_byte_field_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::Limits");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
