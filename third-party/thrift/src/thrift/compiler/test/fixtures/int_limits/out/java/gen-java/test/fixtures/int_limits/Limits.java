/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.int_limits;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="Limits", builder=Limits.Builder.class)
public final class Limits implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public Limits(
        @com.facebook.swift.codec.ThriftField(value=1, name="max_i64_field", requiredness=Requiredness.NONE) final long maxI64Field,
        @com.facebook.swift.codec.ThriftField(value=2, name="min_i64_field", requiredness=Requiredness.NONE) final long minI64Field,
        @com.facebook.swift.codec.ThriftField(value=3, name="max_i32_field", requiredness=Requiredness.NONE) final int maxI32Field,
        @com.facebook.swift.codec.ThriftField(value=4, name="min_i32_field", requiredness=Requiredness.NONE) final int minI32Field,
        @com.facebook.swift.codec.ThriftField(value=5, name="max_i16_field", requiredness=Requiredness.NONE) final short maxI16Field,
        @com.facebook.swift.codec.ThriftField(value=6, name="min_i16_field", requiredness=Requiredness.NONE) final short minI16Field,
        @com.facebook.swift.codec.ThriftField(value=7, name="max_byte_field", requiredness=Requiredness.NONE) final byte maxByteField,
        @com.facebook.swift.codec.ThriftField(value=8, name="min_byte_field", requiredness=Requiredness.NONE) final byte minByteField
    ) {
        this.maxI64Field = maxI64Field;
        this.minI64Field = minI64Field;
        this.maxI32Field = maxI32Field;
        this.minI32Field = minI32Field;
        this.maxI16Field = maxI16Field;
        this.minI16Field = minI16Field;
        this.maxByteField = maxByteField;
        this.minByteField = minByteField;
    }
    
    @ThriftConstructor
    protected Limits() {
      this.maxI64Field = 9223372036854775807L;
      this.minI64Field = -9223372036854775808L;
      this.maxI32Field = 2147483647;
      this.minI32Field = -2147483648;
      this.maxI16Field = (short)32767;
      this.minI16Field = (short)-32768;
      this.maxByteField = (byte)127;
      this.minByteField = (byte)-128;
    }
    
    public static class Builder {
        private long maxI64Field = 9223372036854775807L;
        private long minI64Field = -9223372036854775808L;
        private int maxI32Field = 2147483647;
        private int minI32Field = -2147483648;
        private short maxI16Field = (short)32767;
        private short minI16Field = (short)-32768;
        private byte maxByteField = (byte)127;
        private byte minByteField = (byte)-128;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="max_i64_field", requiredness=Requiredness.NONE)
        public Builder setMaxI64Field(long maxI64Field) {
            this.maxI64Field = maxI64Field;
            return this;
        }
    
        public long getMaxI64Field() { return maxI64Field; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="min_i64_field", requiredness=Requiredness.NONE)
        public Builder setMinI64Field(long minI64Field) {
            this.minI64Field = minI64Field;
            return this;
        }
    
        public long getMinI64Field() { return minI64Field; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="max_i32_field", requiredness=Requiredness.NONE)
        public Builder setMaxI32Field(int maxI32Field) {
            this.maxI32Field = maxI32Field;
            return this;
        }
    
        public int getMaxI32Field() { return maxI32Field; }
    
            @com.facebook.swift.codec.ThriftField(value=4, name="min_i32_field", requiredness=Requiredness.NONE)
        public Builder setMinI32Field(int minI32Field) {
            this.minI32Field = minI32Field;
            return this;
        }
    
        public int getMinI32Field() { return minI32Field; }
    
            @com.facebook.swift.codec.ThriftField(value=5, name="max_i16_field", requiredness=Requiredness.NONE)
        public Builder setMaxI16Field(short maxI16Field) {
            this.maxI16Field = maxI16Field;
            return this;
        }
    
        public short getMaxI16Field() { return maxI16Field; }
    
            @com.facebook.swift.codec.ThriftField(value=6, name="min_i16_field", requiredness=Requiredness.NONE)
        public Builder setMinI16Field(short minI16Field) {
            this.minI16Field = minI16Field;
            return this;
        }
    
        public short getMinI16Field() { return minI16Field; }
    
            @com.facebook.swift.codec.ThriftField(value=7, name="max_byte_field", requiredness=Requiredness.NONE)
        public Builder setMaxByteField(byte maxByteField) {
            this.maxByteField = maxByteField;
            return this;
        }
    
        public byte getMaxByteField() { return maxByteField; }
    
            @com.facebook.swift.codec.ThriftField(value=8, name="min_byte_field", requiredness=Requiredness.NONE)
        public Builder setMinByteField(byte minByteField) {
            this.minByteField = minByteField;
            return this;
        }
    
        public byte getMinByteField() { return minByteField; }
    
        public Builder() { }
        public Builder(Limits other) {
            this.maxI64Field = other.maxI64Field;
            this.minI64Field = other.minI64Field;
            this.maxI32Field = other.maxI32Field;
            this.minI32Field = other.minI32Field;
            this.maxI16Field = other.maxI16Field;
            this.minI16Field = other.minI16Field;
            this.maxByteField = other.maxByteField;
            this.minByteField = other.minByteField;
        }
    
        @ThriftConstructor
        public Limits build() {
            Limits result = new Limits (
                this.maxI64Field,
                this.minI64Field,
                this.maxI32Field,
                this.minI32Field,
                this.maxI16Field,
                this.minI16Field,
                this.maxByteField,
                this.minByteField
            );
            return result;
        }
    }
        
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("Limits");
    private final long maxI64Field;
    public static final int _MAX_I64_FIELD = 1;
    private static final TField MAX_I64_FIELD_FIELD_DESC = new TField("max_i64_field", TType.I64, (short)1);
        private final long minI64Field;
    public static final int _MIN_I64_FIELD = 2;
    private static final TField MIN_I64_FIELD_FIELD_DESC = new TField("min_i64_field", TType.I64, (short)2);
        private final int maxI32Field;
    public static final int _MAX_I32_FIELD = 3;
    private static final TField MAX_I32_FIELD_FIELD_DESC = new TField("max_i32_field", TType.I32, (short)3);
        private final int minI32Field;
    public static final int _MIN_I32_FIELD = 4;
    private static final TField MIN_I32_FIELD_FIELD_DESC = new TField("min_i32_field", TType.I32, (short)4);
        private final short maxI16Field;
    public static final int _MAX_I16_FIELD = 5;
    private static final TField MAX_I16_FIELD_FIELD_DESC = new TField("max_i16_field", TType.I16, (short)5);
        private final short minI16Field;
    public static final int _MIN_I16_FIELD = 6;
    private static final TField MIN_I16_FIELD_FIELD_DESC = new TField("min_i16_field", TType.I16, (short)6);
        private final byte maxByteField;
    public static final int _MAX_BYTE_FIELD = 7;
    private static final TField MAX_BYTE_FIELD_FIELD_DESC = new TField("max_byte_field", TType.BYTE, (short)7);
        private final byte minByteField;
    public static final int _MIN_BYTE_FIELD = 8;
    private static final TField MIN_BYTE_FIELD_FIELD_DESC = new TField("min_byte_field", TType.BYTE, (short)8);
    static {
      NAMES_TO_IDS.put("maxI64Field", 1);
      THRIFT_NAMES_TO_IDS.put("max_i64_field", 1);
      FIELD_METADATA.put(1, MAX_I64_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("minI64Field", 2);
      THRIFT_NAMES_TO_IDS.put("min_i64_field", 2);
      FIELD_METADATA.put(2, MIN_I64_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("maxI32Field", 3);
      THRIFT_NAMES_TO_IDS.put("max_i32_field", 3);
      FIELD_METADATA.put(3, MAX_I32_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("minI32Field", 4);
      THRIFT_NAMES_TO_IDS.put("min_i32_field", 4);
      FIELD_METADATA.put(4, MIN_I32_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("maxI16Field", 5);
      THRIFT_NAMES_TO_IDS.put("max_i16_field", 5);
      FIELD_METADATA.put(5, MAX_I16_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("minI16Field", 6);
      THRIFT_NAMES_TO_IDS.put("min_i16_field", 6);
      FIELD_METADATA.put(6, MIN_I16_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("maxByteField", 7);
      THRIFT_NAMES_TO_IDS.put("max_byte_field", 7);
      FIELD_METADATA.put(7, MAX_BYTE_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("minByteField", 8);
      THRIFT_NAMES_TO_IDS.put("min_byte_field", 8);
      FIELD_METADATA.put(8, MIN_BYTE_FIELD_FIELD_DESC);
    }
    
    
    @com.facebook.swift.codec.ThriftField(value=1, name="max_i64_field", requiredness=Requiredness.NONE)
    public long getMaxI64Field() { return maxI64Field; }
    
    
    
    @com.facebook.swift.codec.ThriftField(value=2, name="min_i64_field", requiredness=Requiredness.NONE)
    public long getMinI64Field() { return minI64Field; }
    
    
    
    @com.facebook.swift.codec.ThriftField(value=3, name="max_i32_field", requiredness=Requiredness.NONE)
    public int getMaxI32Field() { return maxI32Field; }
    
    
    
    @com.facebook.swift.codec.ThriftField(value=4, name="min_i32_field", requiredness=Requiredness.NONE)
    public int getMinI32Field() { return minI32Field; }
    
    
    
    @com.facebook.swift.codec.ThriftField(value=5, name="max_i16_field", requiredness=Requiredness.NONE)
    public short getMaxI16Field() { return maxI16Field; }
    
    
    
    @com.facebook.swift.codec.ThriftField(value=6, name="min_i16_field", requiredness=Requiredness.NONE)
    public short getMinI16Field() { return minI16Field; }
    
    
    
    @com.facebook.swift.codec.ThriftField(value=7, name="max_byte_field", requiredness=Requiredness.NONE)
    public byte getMaxByteField() { return maxByteField; }
    
    
    
    @com.facebook.swift.codec.ThriftField(value=8, name="min_byte_field", requiredness=Requiredness.NONE)
    public byte getMinByteField() { return minByteField; }
    
    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("maxI64Field", maxI64Field);
        helper.add("minI64Field", minI64Field);
        helper.add("maxI32Field", maxI32Field);
        helper.add("minI32Field", minI32Field);
        helper.add("maxI16Field", maxI16Field);
        helper.add("minI16Field", minI16Field);
        helper.add("maxByteField", maxByteField);
        helper.add("minByteField", minByteField);
        return helper.toString();
    }
    
    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        Limits other = (Limits)o;
    
        return
            Objects.equals(maxI64Field, other.maxI64Field) &&
            Objects.equals(minI64Field, other.minI64Field) &&
            Objects.equals(maxI32Field, other.maxI32Field) &&
            Objects.equals(minI32Field, other.minI32Field) &&
            Objects.equals(maxI16Field, other.maxI16Field) &&
            Objects.equals(minI16Field, other.minI16Field) &&
            Objects.equals(maxByteField, other.maxByteField) &&
            Objects.equals(minByteField, other.minByteField) &&
            true;
    }
    
    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            maxI64Field,
            minI64Field,
            maxI32Field,
            minI32Field,
            maxI16Field,
            minI16Field,
            maxByteField,
            minByteField
        });
    }
    
    
    public static com.facebook.thrift.payload.Reader<Limits> asReader() {
      return Limits::read0;
    }
    
    public static Limits read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(Limits.NAMES_TO_IDS, Limits.THRIFT_NAMES_TO_IDS, Limits.FIELD_METADATA);
      Limits.Builder builder = new Limits.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _MAX_I64_FIELD:
          if (__field.type == TType.I64) {
            long maxI64Field = oprot.readI64();
            builder.setMaxI64Field(maxI64Field);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MIN_I64_FIELD:
          if (__field.type == TType.I64) {
            long minI64Field = oprot.readI64();
            builder.setMinI64Field(minI64Field);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MAX_I32_FIELD:
          if (__field.type == TType.I32) {
            int maxI32Field = oprot.readI32();
            builder.setMaxI32Field(maxI32Field);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MIN_I32_FIELD:
          if (__field.type == TType.I32) {
            int minI32Field = oprot.readI32();
            builder.setMinI32Field(minI32Field);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MAX_I16_FIELD:
          if (__field.type == TType.I16) {
            short maxI16Field = oprot.readI16();
            builder.setMaxI16Field(maxI16Field);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MIN_I16_FIELD:
          if (__field.type == TType.I16) {
            short minI16Field = oprot.readI16();
            builder.setMinI16Field(minI16Field);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MAX_BYTE_FIELD:
          if (__field.type == TType.BYTE) {
            byte maxByteField = oprot.readByte();
            builder.setMaxByteField(maxByteField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MIN_BYTE_FIELD:
          if (__field.type == TType.BYTE) {
            byte minByteField = oprot.readByte();
            builder.setMinByteField(minByteField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MAX_I64_FIELD_FIELD_DESC);
      oprot.writeI64(this.maxI64Field);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_I64_FIELD_FIELD_DESC);
      oprot.writeI64(this.minI64Field);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_I32_FIELD_FIELD_DESC);
      oprot.writeI32(this.maxI32Field);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_I32_FIELD_FIELD_DESC);
      oprot.writeI32(this.minI32Field);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_I16_FIELD_FIELD_DESC);
      oprot.writeI16(this.maxI16Field);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_I16_FIELD_FIELD_DESC);
      oprot.writeI16(this.minI16Field);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_BYTE_FIELD_FIELD_DESC);
      oprot.writeByte(this.maxByteField);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_BYTE_FIELD_FIELD_DESC);
      oprot.writeByte(this.minByteField);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    private static class _LimitsLazy {
        private static final Limits _DEFAULT = new Limits.Builder().build();
    }
    
    public static Limits defaultInstance() {
        return  _LimitsLazy._DEFAULT;
    }
}
