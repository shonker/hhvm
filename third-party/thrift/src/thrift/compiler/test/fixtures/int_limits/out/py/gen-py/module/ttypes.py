#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import absolute_import
import sys
from thrift.util.Recursive import fix_spec
from thrift.Thrift import TType, TMessageType, TPriority, TRequestContext, TProcessorEventHandler, TServerInterface, TProcessor, TException, TApplicationException, UnimplementedTypedef
from thrift.protocol.TProtocol import TProtocolException



import pprint
import warnings
from thrift import Thrift
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.protocol import TCompactProtocol
from thrift.protocol import THeaderProtocol
fastproto = None
try:
  from thrift.protocol import fastproto
except ImportError:
  pass

def __EXPAND_THRIFT_SPEC(spec):
    next_id = 0
    for item in spec:
        if next_id >= 0 and item[0] < 0:
            next_id = item[0]
        if item[0] != next_id:
            for _ in range(next_id, item[0]):
                yield None
        yield item
        next_id = item[0] + 1

class ThriftEnumWrapper(int):
  def __new__(cls, enum_class, value):
    return super().__new__(cls, value)
  def __init__(self, enum_class, value):    self.enum_class = enum_class
  def __repr__(self):
    return self.enum_class.__name__ + '.' + self.enum_class._VALUES_TO_NAMES[self]

all_structs = []
UTF8STRINGS = bool(0) or sys.version_info.major >= 3

__all__ = ['UTF8STRINGS', 'Limits']

class Limits:
  r"""
  Attributes:
   - max_i64_field
   - min_i64_field
   - max_i32_field
   - min_i32_field
   - max_i16_field
   - min_i16_field
   - max_byte_field
   - min_byte_field
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.max_i64_field = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.min_i64_field = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.max_i32_field = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.min_i32_field = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.max_i16_field = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.min_i16_field = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BYTE:
          self.max_byte_field = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BYTE:
          self.min_byte_field = iprot.readByte()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('Limits')
    if self.max_i64_field != None:
      oprot.writeFieldBegin('max_i64_field', TType.I64, 1)
      oprot.writeI64(self.max_i64_field)
      oprot.writeFieldEnd()
    if self.min_i64_field != None:
      oprot.writeFieldBegin('min_i64_field', TType.I64, 2)
      oprot.writeI64(self.min_i64_field)
      oprot.writeFieldEnd()
    if self.max_i32_field != None:
      oprot.writeFieldBegin('max_i32_field', TType.I32, 3)
      oprot.writeI32(self.max_i32_field)
      oprot.writeFieldEnd()
    if self.min_i32_field != None:
      oprot.writeFieldBegin('min_i32_field', TType.I32, 4)
      oprot.writeI32(self.min_i32_field)
      oprot.writeFieldEnd()
    if self.max_i16_field != None:
      oprot.writeFieldBegin('max_i16_field', TType.I16, 5)
      oprot.writeI16(self.max_i16_field)
      oprot.writeFieldEnd()
    if self.min_i16_field != None:
      oprot.writeFieldBegin('min_i16_field', TType.I16, 6)
      oprot.writeI16(self.min_i16_field)
      oprot.writeFieldEnd()
    if self.max_byte_field != None:
      oprot.writeFieldBegin('max_byte_field', TType.BYTE, 7)
      oprot.writeByte(self.max_byte_field)
      oprot.writeFieldEnd()
    if self.min_byte_field != None:
      oprot.writeFieldBegin('min_byte_field', TType.BYTE, 8)
      oprot.writeByte(self.min_byte_field)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.max_i64_field is not None:
      value = pprint.pformat(self.max_i64_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    max_i64_field=%s' % (value))
    if self.min_i64_field is not None:
      value = pprint.pformat(self.min_i64_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    min_i64_field=%s' % (value))
    if self.max_i32_field is not None:
      value = pprint.pformat(self.max_i32_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    max_i32_field=%s' % (value))
    if self.min_i32_field is not None:
      value = pprint.pformat(self.min_i32_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    min_i32_field=%s' % (value))
    if self.max_i16_field is not None:
      value = pprint.pformat(self.max_i16_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    max_i16_field=%s' % (value))
    if self.min_i16_field is not None:
      value = pprint.pformat(self.min_i16_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    min_i16_field=%s' % (value))
    if self.max_byte_field is not None:
      value = pprint.pformat(self.max_byte_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    max_byte_field=%s' % (value))
    if self.min_byte_field is not None:
      value = pprint.pformat(self.min_byte_field, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    min_byte_field=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'max_i64_field',
      'min_i64_field',
      'max_i32_field',
      'min_i32_field',
      'max_i16_field',
      'min_i16_field',
      'max_byte_field',
      'min_byte_field',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.Limits, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.Limits, self)

  def _to_py_deprecated(self):
    return self

all_structs.append(Limits)
Limits.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.I64, 'max_i64_field', None, 9223372036854775807, 2, ), # 1
  (2, TType.I64, 'min_i64_field', None, -9223372036854775808, 2, ), # 2
  (3, TType.I32, 'max_i32_field', None, 2147483647, 2, ), # 3
  (4, TType.I32, 'min_i32_field', None, -2147483648, 2, ), # 4
  (5, TType.I16, 'max_i16_field', None, 32767, 2, ), # 5
  (6, TType.I16, 'min_i16_field', None, -32768, 2, ), # 6
  (7, TType.BYTE, 'max_byte_field', None, 127, 2, ), # 7
  (8, TType.BYTE, 'min_byte_field', None, -128, 2, ), # 8
)))

Limits.thrift_struct_annotations = {
}
Limits.thrift_field_annotations = {
}

def Limits__init__(self, max_i64_field=Limits.thrift_spec[1][4], min_i64_field=Limits.thrift_spec[2][4], max_i32_field=Limits.thrift_spec[3][4], min_i32_field=Limits.thrift_spec[4][4], max_i16_field=Limits.thrift_spec[5][4], min_i16_field=Limits.thrift_spec[6][4], max_byte_field=Limits.thrift_spec[7][4], min_byte_field=Limits.thrift_spec[8][4],):
  self.max_i64_field = max_i64_field
  self.min_i64_field = min_i64_field
  self.max_i32_field = max_i32_field
  self.min_i32_field = min_i32_field
  self.max_i16_field = max_i16_field
  self.min_i16_field = min_i16_field
  self.max_byte_field = max_byte_field
  self.min_byte_field = min_byte_field

Limits.__init__ = Limits__init__

def Limits__setstate__(self, state):
  state.setdefault('max_i64_field', 9223372036854775807)
  state.setdefault('min_i64_field', -9223372036854775808)
  state.setdefault('max_i32_field', 2147483647)
  state.setdefault('min_i32_field', -2147483648)
  state.setdefault('max_i16_field', 32767)
  state.setdefault('min_i16_field', -32768)
  state.setdefault('max_byte_field', 127)
  state.setdefault('min_byte_field', -128)
  self.__dict__ = state

Limits.__getstate__ = lambda self: self.__dict__.copy()
Limits.__setstate__ = Limits__setstate__

fix_spec(all_structs)
del all_structs
