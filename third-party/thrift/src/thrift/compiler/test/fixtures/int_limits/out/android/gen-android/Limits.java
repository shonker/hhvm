/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Limits implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Limits");
  private static final TField MAX_I64_FIELD_FIELD_DESC = new TField("max_i64_field", TType.I64, (short)1);
  private static final TField MIN_I64_FIELD_FIELD_DESC = new TField("min_i64_field", TType.I64, (short)2);
  private static final TField MAX_I32_FIELD_FIELD_DESC = new TField("max_i32_field", TType.I32, (short)3);
  private static final TField MIN_I32_FIELD_FIELD_DESC = new TField("min_i32_field", TType.I32, (short)4);
  private static final TField MAX_I16_FIELD_FIELD_DESC = new TField("max_i16_field", TType.I16, (short)5);
  private static final TField MIN_I16_FIELD_FIELD_DESC = new TField("min_i16_field", TType.I16, (short)6);
  private static final TField MAX_BYTE_FIELD_FIELD_DESC = new TField("max_byte_field", TType.BYTE, (short)7);
  private static final TField MIN_BYTE_FIELD_FIELD_DESC = new TField("min_byte_field", TType.BYTE, (short)8);

  public final Long max_i64_field;
  public final Long min_i64_field;
  public final Integer max_i32_field;
  public final Integer min_i32_field;
  public final Short max_i16_field;
  public final Short min_i16_field;
  public final Byte max_byte_field;
  public final Byte min_byte_field;
  public static final int MAX_I64_FIELD = 1;
  public static final int MIN_I64_FIELD = 2;
  public static final int MAX_I32_FIELD = 3;
  public static final int MIN_I32_FIELD = 4;
  public static final int MAX_I16_FIELD = 5;
  public static final int MIN_I16_FIELD = 6;
  public static final int MAX_BYTE_FIELD = 7;
  public static final int MIN_BYTE_FIELD = 8;

  public Limits(
      Long max_i64_field,
      Long min_i64_field,
      Integer max_i32_field,
      Integer min_i32_field,
      Short max_i16_field,
      Short min_i16_field,
      Byte max_byte_field,
      Byte min_byte_field) {
    this.max_i64_field = max_i64_field;
    this.min_i64_field = min_i64_field;
    this.max_i32_field = max_i32_field;
    this.min_i32_field = min_i32_field;
    this.max_i16_field = max_i16_field;
    this.min_i16_field = min_i16_field;
    this.max_byte_field = max_byte_field;
    this.min_byte_field = min_byte_field;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Limits(Limits other) {
    if (other.isSetMax_i64_field()) {
      this.max_i64_field = TBaseHelper.deepCopy(other.max_i64_field);
    } else {
      this.max_i64_field = null;
    }
    if (other.isSetMin_i64_field()) {
      this.min_i64_field = TBaseHelper.deepCopy(other.min_i64_field);
    } else {
      this.min_i64_field = null;
    }
    if (other.isSetMax_i32_field()) {
      this.max_i32_field = TBaseHelper.deepCopy(other.max_i32_field);
    } else {
      this.max_i32_field = null;
    }
    if (other.isSetMin_i32_field()) {
      this.min_i32_field = TBaseHelper.deepCopy(other.min_i32_field);
    } else {
      this.min_i32_field = null;
    }
    if (other.isSetMax_i16_field()) {
      this.max_i16_field = TBaseHelper.deepCopy(other.max_i16_field);
    } else {
      this.max_i16_field = null;
    }
    if (other.isSetMin_i16_field()) {
      this.min_i16_field = TBaseHelper.deepCopy(other.min_i16_field);
    } else {
      this.min_i16_field = null;
    }
    if (other.isSetMax_byte_field()) {
      this.max_byte_field = TBaseHelper.deepCopy(other.max_byte_field);
    } else {
      this.max_byte_field = null;
    }
    if (other.isSetMin_byte_field()) {
      this.min_byte_field = TBaseHelper.deepCopy(other.min_byte_field);
    } else {
      this.min_byte_field = null;
    }
  }

  public Limits deepCopy() {
    return new Limits(this);
  }

  public Long getMax_i64_field() {
    return this.max_i64_field;
  }

  // Returns true if field max_i64_field is set (has been assigned a value) and false otherwise
  public boolean isSetMax_i64_field() {
    return this.max_i64_field != null;
  }

  public Long getMin_i64_field() {
    return this.min_i64_field;
  }

  // Returns true if field min_i64_field is set (has been assigned a value) and false otherwise
  public boolean isSetMin_i64_field() {
    return this.min_i64_field != null;
  }

  public Integer getMax_i32_field() {
    return this.max_i32_field;
  }

  // Returns true if field max_i32_field is set (has been assigned a value) and false otherwise
  public boolean isSetMax_i32_field() {
    return this.max_i32_field != null;
  }

  public Integer getMin_i32_field() {
    return this.min_i32_field;
  }

  // Returns true if field min_i32_field is set (has been assigned a value) and false otherwise
  public boolean isSetMin_i32_field() {
    return this.min_i32_field != null;
  }

  public Short getMax_i16_field() {
    return this.max_i16_field;
  }

  // Returns true if field max_i16_field is set (has been assigned a value) and false otherwise
  public boolean isSetMax_i16_field() {
    return this.max_i16_field != null;
  }

  public Short getMin_i16_field() {
    return this.min_i16_field;
  }

  // Returns true if field min_i16_field is set (has been assigned a value) and false otherwise
  public boolean isSetMin_i16_field() {
    return this.min_i16_field != null;
  }

  public Byte getMax_byte_field() {
    return this.max_byte_field;
  }

  // Returns true if field max_byte_field is set (has been assigned a value) and false otherwise
  public boolean isSetMax_byte_field() {
    return this.max_byte_field != null;
  }

  public Byte getMin_byte_field() {
    return this.min_byte_field;
  }

  // Returns true if field min_byte_field is set (has been assigned a value) and false otherwise
  public boolean isSetMin_byte_field() {
    return this.min_byte_field != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Limits))
      return false;
    Limits that = (Limits)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetMax_i64_field(), that.isSetMax_i64_field(), this.max_i64_field, that.max_i64_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMin_i64_field(), that.isSetMin_i64_field(), this.min_i64_field, that.min_i64_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMax_i32_field(), that.isSetMax_i32_field(), this.max_i32_field, that.max_i32_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMin_i32_field(), that.isSetMin_i32_field(), this.min_i32_field, that.min_i32_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMax_i16_field(), that.isSetMax_i16_field(), this.max_i16_field, that.max_i16_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMin_i16_field(), that.isSetMin_i16_field(), this.min_i16_field, that.min_i16_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMax_byte_field(), that.isSetMax_byte_field(), this.max_byte_field, that.max_byte_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMin_byte_field(), that.isSetMin_byte_field(), this.min_byte_field, that.min_byte_field)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {max_i64_field, min_i64_field, max_i32_field, min_i32_field, max_i16_field, min_i16_field, max_byte_field, min_byte_field});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static Limits deserialize(TProtocol iprot) throws TException {
    Long tmp_max_i64_field = null;
    Long tmp_min_i64_field = null;
    Integer tmp_max_i32_field = null;
    Integer tmp_min_i32_field = null;
    Short tmp_max_i16_field = null;
    Short tmp_min_i16_field = null;
    Byte tmp_max_byte_field = null;
    Byte tmp_min_byte_field = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case MAX_I64_FIELD:
          if (__field.type == TType.I64) {
            tmp_max_i64_field = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MIN_I64_FIELD:
          if (__field.type == TType.I64) {
            tmp_min_i64_field = iprot.readI64();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAX_I32_FIELD:
          if (__field.type == TType.I32) {
            tmp_max_i32_field = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MIN_I32_FIELD:
          if (__field.type == TType.I32) {
            tmp_min_i32_field = iprot.readI32();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAX_I16_FIELD:
          if (__field.type == TType.I16) {
            tmp_max_i16_field = iprot.readI16();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MIN_I16_FIELD:
          if (__field.type == TType.I16) {
            tmp_min_i16_field = iprot.readI16();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MAX_BYTE_FIELD:
          if (__field.type == TType.BYTE) {
            tmp_max_byte_field = iprot.readByte();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MIN_BYTE_FIELD:
          if (__field.type == TType.BYTE) {
            tmp_min_byte_field = iprot.readByte();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    Limits _that;
    _that = new Limits(
      tmp_max_i64_field
      ,tmp_min_i64_field
      ,tmp_max_i32_field
      ,tmp_min_i32_field
      ,tmp_max_i16_field
      ,tmp_min_i16_field
      ,tmp_max_byte_field
      ,tmp_min_byte_field
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.max_i64_field != null) {
      oprot.writeFieldBegin(MAX_I64_FIELD_FIELD_DESC);
      oprot.writeI64(this.max_i64_field);
      oprot.writeFieldEnd();
    }
    if (this.min_i64_field != null) {
      oprot.writeFieldBegin(MIN_I64_FIELD_FIELD_DESC);
      oprot.writeI64(this.min_i64_field);
      oprot.writeFieldEnd();
    }
    if (this.max_i32_field != null) {
      oprot.writeFieldBegin(MAX_I32_FIELD_FIELD_DESC);
      oprot.writeI32(this.max_i32_field);
      oprot.writeFieldEnd();
    }
    if (this.min_i32_field != null) {
      oprot.writeFieldBegin(MIN_I32_FIELD_FIELD_DESC);
      oprot.writeI32(this.min_i32_field);
      oprot.writeFieldEnd();
    }
    if (this.max_i16_field != null) {
      oprot.writeFieldBegin(MAX_I16_FIELD_FIELD_DESC);
      oprot.writeI16(this.max_i16_field);
      oprot.writeFieldEnd();
    }
    if (this.min_i16_field != null) {
      oprot.writeFieldBegin(MIN_I16_FIELD_FIELD_DESC);
      oprot.writeI16(this.min_i16_field);
      oprot.writeFieldEnd();
    }
    if (this.max_byte_field != null) {
      oprot.writeFieldBegin(MAX_BYTE_FIELD_FIELD_DESC);
      oprot.writeByte(this.max_byte_field);
      oprot.writeFieldEnd();
    }
    if (this.min_byte_field != null) {
      oprot.writeFieldBegin(MIN_BYTE_FIELD_FIELD_DESC);
      oprot.writeByte(this.min_byte_field);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

