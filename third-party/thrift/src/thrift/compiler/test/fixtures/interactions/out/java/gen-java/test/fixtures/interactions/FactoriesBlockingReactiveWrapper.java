/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.interactions;

import com.facebook.thrift.client.*;
import java.util.*;

public class FactoriesBlockingReactiveWrapper 
    implements Factories.Reactive {
    private final Factories _delegate;

    public FactoriesBlockingReactiveWrapper(Factories _delegate) {
        
        this._delegate = _delegate;
    }

    @java.lang.Override
    public void dispose() {
        _delegate.close();
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<Void> foo() {
        reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>create(_sink -> {
            try {
                reactor.util.context.ContextView _contextView = _sink.contextView();
                com.facebook.nifty.core.RequestContext
                    .tryContextView(_contextView)
                    .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                _delegate.foo();
                _sink.success();
            } catch (Throwable _e) {
                throw reactor.core.Exceptions.propagate(_e);
            }
        });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<Void> interact(final int arg) {
        reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>create(_sink -> {
            try {
                reactor.util.context.ContextView _contextView = _sink.contextView();
                com.facebook.nifty.core.RequestContext
                    .tryContextView(_contextView)
                    .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                _delegate.interact(arg);
                _sink.success();
            } catch (Throwable _e) {
                throw reactor.core.Exceptions.propagate(_e);
            }
        });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

    @java.lang.Override
    public reactor.core.publisher.Mono<Integer> interactFast() {
        reactor.core.publisher.Mono<Integer> _m = reactor.core.publisher.Mono.create(_sink -> {
            try {
                reactor.util.context.ContextView _contextView = _sink.contextView();
                com.facebook.nifty.core.RequestContext
                    .tryContextView(_contextView)
                    .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                _sink.success(_delegate.interactFast());
            } catch (Throwable _e) {
                _sink.error(_e);
            }
        });

        if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
            _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
        }

        return _m;
    }

    @java.lang.Override
    public reactor.core.publisher.Flux<com.facebook.thrift.model.StreamResponse<Integer,Integer>> serialize() {
        throw new UnsupportedOperationException();
    }

    public class MyInteractionImpl implements MyInteraction {
        private Factories.MyInteraction _delegateInteraction;

        MyInteractionImpl(Factories.MyInteraction delegateInteraction) {
            this._delegateInteraction = delegateInteraction;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Integer> frobnicate() {
                reactor.core.publisher.Mono<Integer> _m = reactor.core.publisher.Mono.create(_sink -> {
                    try {
                        reactor.util.context.ContextView _contextView = _sink.contextView();
                        com.facebook.nifty.core.RequestContext
                            .tryContextView(_contextView)
                            .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                        _sink.success(_delegateInteraction.frobnicate());
                    } catch (Throwable _e) {
                        _sink.error(_e);
                    }
                });

                if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
                    _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
                }

                return _m;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Integer> frobnicate(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<ResponseWrapper<Integer>> frobnicateWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Void> ping() {

                reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>create(_sink -> {
                    try {
                        reactor.util.context.ContextView _contextView = _sink.contextView();
                        com.facebook.nifty.core.RequestContext
                            .tryContextView(_contextView)
                            .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                        _delegateInteraction.ping();
                        _sink.success();
                    } catch (Throwable _e) {
                        throw reactor.core.Exceptions.propagate(_e);
                    }
                });

                if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
                    _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
                }

                return _m;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Void> ping(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<ResponseWrapper<Void>> pingWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Flux<Boolean> truthify() {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public void dispose() {}
    }

    public MyInteraction createMyInteraction() {
        return new MyInteractionImpl(_delegate.createMyInteraction());
    }

    public class MyInteractionFastImpl implements MyInteractionFast {
        private Factories.MyInteractionFast _delegateInteraction;

        MyInteractionFastImpl(Factories.MyInteractionFast delegateInteraction) {
            this._delegateInteraction = delegateInteraction;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Integer> frobnicate() {
                reactor.core.publisher.Mono<Integer> _m = reactor.core.publisher.Mono.create(_sink -> {
                    try {
                        reactor.util.context.ContextView _contextView = _sink.contextView();
                        com.facebook.nifty.core.RequestContext
                            .tryContextView(_contextView)
                            .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                        _sink.success(_delegateInteraction.frobnicate());
                    } catch (Throwable _e) {
                        _sink.error(_e);
                    }
                });

                if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
                    _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
                }

                return _m;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Integer> frobnicate(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<ResponseWrapper<Integer>> frobnicateWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Void> ping() {

                reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>create(_sink -> {
                    try {
                        reactor.util.context.ContextView _contextView = _sink.contextView();
                        com.facebook.nifty.core.RequestContext
                            .tryContextView(_contextView)
                            .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                        _delegateInteraction.ping();
                        _sink.success();
                    } catch (Throwable _e) {
                        throw reactor.core.Exceptions.propagate(_e);
                    }
                });

                if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
                    _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
                }

                return _m;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Void> ping(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<ResponseWrapper<Void>> pingWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Flux<Boolean> truthify() {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public void dispose() {}
    }

    public MyInteractionFast createMyInteractionFast() {
        return new MyInteractionFastImpl(_delegate.createMyInteractionFast());
    }

    public class SerialInteractionImpl implements SerialInteraction {
        private Factories.SerialInteraction _delegateInteraction;

        SerialInteractionImpl(Factories.SerialInteraction delegateInteraction) {
            this._delegateInteraction = delegateInteraction;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Void> frobnicate() {

                reactor.core.publisher.Mono<Void> _m = reactor.core.publisher.Mono.<Void>create(_sink -> {
                    try {
                        reactor.util.context.ContextView _contextView = _sink.contextView();
                        com.facebook.nifty.core.RequestContext
                            .tryContextView(_contextView)
                            .ifPresent(com.facebook.nifty.core.RequestContexts::setCurrentContext);
                        _delegateInteraction.frobnicate();
                        _sink.success();
                    } catch (Throwable _e) {
                        throw reactor.core.Exceptions.propagate(_e);
                    }
                });

                if (!com.facebook.thrift.util.resources.RpcResources.isForceExecutionOffEventLoop()) {
                    _m = _m.subscribeOn(com.facebook.thrift.util.resources.RpcResources.getOffLoopScheduler());
                }

                return _m;
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<Void> frobnicate(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public reactor.core.publisher.Mono<ResponseWrapper<Void>> frobnicateWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @java.lang.Override
        public void dispose() {}
    }

    public SerialInteraction createSerialInteraction() {
        return new SerialInteractionImpl(_delegate.createSerialInteraction());
    }
}
