
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.h>

namespace apache {
namespace thrift {
namespace python {
namespace capi {
template <>
struct Extractor<::test::fixtures::patch::MyData>
    : public BaseExtractor<::test::fixtures::patch::MyData> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::MyData> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>> {
  ExtractorResult<::test::fixtures::patch::MyData> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyData>
    : public BaseConstructor<::test::fixtures::patch::MyData> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::MyData& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>> {
  PyObject* operator()(const ::test::fixtures::patch::MyData& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataWithCustomDefault>
    : public BaseExtractor<::test::fixtures::patch::MyDataWithCustomDefault> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefault> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>> {
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefault> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataWithCustomDefault>
    : public BaseConstructor<::test::fixtures::patch::MyDataWithCustomDefault> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefault& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefault& val);
};

template <>
struct Extractor<::test::fixtures::patch::InnerUnion>
    : public BaseExtractor<::test::fixtures::patch::InnerUnion> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::InnerUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>> {
  ExtractorResult<::test::fixtures::patch::InnerUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::InnerUnion>
    : public BaseConstructor<::test::fixtures::patch::InnerUnion> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::InnerUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>> {
  PyObject* operator()(const ::test::fixtures::patch::InnerUnion& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyUnion>
    : public BaseExtractor<::test::fixtures::patch::MyUnion> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::MyUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>> {
  ExtractorResult<::test::fixtures::patch::MyUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyUnion>
    : public BaseConstructor<::test::fixtures::patch::MyUnion> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::MyUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>> {
  PyObject* operator()(const ::test::fixtures::patch::MyUnion& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::LateDefStruct>
    : public BaseExtractor<::test::fixtures::patch::LateDefStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::LateDefStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>> {
  ExtractorResult<::test::fixtures::patch::LateDefStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::LateDefStruct>
    : public BaseConstructor<::test::fixtures::patch::LateDefStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::LateDefStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::LateDefStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::Recursive>
    : public BaseExtractor<::test::fixtures::patch::Recursive> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::Recursive> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>> {
  ExtractorResult<::test::fixtures::patch::Recursive> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::Recursive>
    : public BaseConstructor<::test::fixtures::patch::Recursive> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::Recursive& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>> {
  PyObject* operator()(const ::test::fixtures::patch::Recursive& val);
};

template <>
struct Extractor<::test::fixtures::patch::Bar>
    : public BaseExtractor<::test::fixtures::patch::Bar> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::Bar> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>> {
  ExtractorResult<::test::fixtures::patch::Bar> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::Bar>
    : public BaseConstructor<::test::fixtures::patch::Bar> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::Bar& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>> {
  PyObject* operator()(const ::test::fixtures::patch::Bar& val);
};

template <>
struct Extractor<::test::fixtures::patch::Loop>
    : public BaseExtractor<::test::fixtures::patch::Loop> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::Loop> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>> {
  ExtractorResult<::test::fixtures::patch::Loop> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::Loop>
    : public BaseConstructor<::test::fixtures::patch::Loop> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::Loop& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>> {
  PyObject* operator()(const ::test::fixtures::patch::Loop& val);
};

template <>
struct Extractor<::test::fixtures::patch::RefFields>
    : public BaseExtractor<::test::fixtures::patch::RefFields> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::patch::RefFields> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>> {
  ExtractorResult<::test::fixtures::patch::RefFields> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RefFields>
    : public BaseConstructor<::test::fixtures::patch::RefFields> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::patch::RefFields& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>> {
  PyObject* operator()(const ::test::fixtures::patch::RefFields& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyDataPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyDataPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyDataPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyDataPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyDataPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataFieldPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyDataFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyDataFieldPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataFieldPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataFieldPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyDataFieldPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataFieldPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyDataFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyDataFieldPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataFieldPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataFieldPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataFieldPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataEnsureStruct>
    : public BaseExtractor<::test::fixtures::patch::MyDataEnsureStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyDataEnsureStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataEnsureStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataEnsureStruct>> {
  ExtractorResult<::test::fixtures::patch::MyDataEnsureStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataEnsureStruct>
    : public BaseConstructor<::test::fixtures::patch::MyDataEnsureStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyDataEnsureStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataEnsureStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataEnsureStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataEnsureStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataSafePatch>
    : public BaseExtractor<::test::fixtures::patch::MyDataSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyDataSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataSafePatch>> {
  ExtractorResult<::test::fixtures::patch::MyDataSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataSafePatch>
    : public BaseConstructor<::test::fixtures::patch::MyDataSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyDataSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
    : public BaseExtractor<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>> {
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
    : public BaseConstructor<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyDataWithCustomDefaultSafePatch>
    : public BaseExtractor<::test::fixtures::patch::MyDataWithCustomDefaultSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultSafePatch>> {
  ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyDataWithCustomDefaultSafePatch>
    : public BaseConstructor<::test::fixtures::patch::MyDataWithCustomDefaultSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefaultSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::MyDataWithCustomDefaultSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::InnerUnionPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::InnerUnionPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::InnerUnionPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::InnerUnionPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::InnerUnionPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::InnerUnionPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::InnerUnionPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::InnerUnionPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::InnerUnionFieldPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::InnerUnionFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::InnerUnionFieldPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionFieldPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionFieldPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::InnerUnionFieldPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::InnerUnionFieldPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::InnerUnionFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::InnerUnionFieldPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionFieldPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionFieldPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::InnerUnionFieldPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::InnerUnionSafePatch>
    : public BaseExtractor<::test::fixtures::patch::InnerUnionSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::InnerUnionSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionSafePatch>> {
  ExtractorResult<::test::fixtures::patch::InnerUnionSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::InnerUnionSafePatch>
    : public BaseConstructor<::test::fixtures::patch::InnerUnionSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::InnerUnionSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::InnerUnionSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyUnionPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyUnionPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyUnionPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyUnionPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyUnionPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyUnionPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyUnionPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyUnionPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyUnionFieldPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyUnionFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyUnionFieldPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionFieldPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionFieldPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyUnionFieldPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyUnionFieldPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyUnionFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyUnionFieldPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionFieldPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionFieldPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyUnionFieldPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyUnionSafePatch>
    : public BaseExtractor<::test::fixtures::patch::MyUnionSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyUnionSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionSafePatch>> {
  ExtractorResult<::test::fixtures::patch::MyUnionSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyUnionSafePatch>
    : public BaseConstructor<::test::fixtures::patch::MyUnionSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyUnionSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::MyUnionSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructField10PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructField10PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructField10PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField10PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField10PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructField10PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructField10PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructField10PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructField10PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField10PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField10PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructField10PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructField23PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructField23PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructField23PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField23PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField23PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructField23PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructField23PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructField23PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructField23PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField23PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField23PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructField23PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructField26PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructField26PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructField26PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField26PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField26PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructField26PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructField26PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructField26PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructField26PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField26PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField26PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructField26PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructField27PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructField27PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructField27PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField27PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField27PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructField27PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructField27PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructField27PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructField27PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField27PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField27PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructField27PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructField28PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructField28PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructField28PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField28PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField28PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructField28PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructField28PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructField28PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructField28PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField28PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField28PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructField28PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructField29PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructField29PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructField29PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField29PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField29PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructField29PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructField29PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructField29PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructField29PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField29PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField29PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructField29PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructField30PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructField30PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructField30PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructField30PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructField30PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructField30PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructField30PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructField30PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructField30Patch1Struct>
    : public BaseExtractor<::test::fixtures::patch::MyStructField30Patch1Struct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructField30Patch1Struct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30Patch1Struct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30Patch1Struct>> {
  ExtractorResult<::test::fixtures::patch::MyStructField30Patch1Struct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructField30Patch1Struct>
    : public BaseConstructor<::test::fixtures::patch::MyStructField30Patch1Struct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructField30Patch1Struct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30Patch1Struct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30Patch1Struct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructField30Patch1Struct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructFieldPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructFieldPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructFieldPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructFieldPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructFieldPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructFieldPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructFieldPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructFieldPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructFieldPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructFieldPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructEnsureStruct>
    : public BaseExtractor<::test::fixtures::patch::MyStructEnsureStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructEnsureStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructEnsureStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructEnsureStruct>> {
  ExtractorResult<::test::fixtures::patch::MyStructEnsureStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructEnsureStruct>
    : public BaseConstructor<::test::fixtures::patch::MyStructEnsureStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructEnsureStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructEnsureStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructEnsureStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructEnsureStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyStructSafePatch>
    : public BaseExtractor<::test::fixtures::patch::MyStructSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::MyStructSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructSafePatch>> {
  ExtractorResult<::test::fixtures::patch::MyStructSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyStructSafePatch>
    : public BaseConstructor<::test::fixtures::patch::MyStructSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::MyStructSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::MyStructSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::LateDefStructPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::LateDefStructPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::LateDefStructPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::LateDefStructPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::LateDefStructPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::LateDefStructPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::LateDefStructPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::LateDefStructPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::LateDefStructFieldPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::LateDefStructFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::LateDefStructFieldPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructFieldPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructFieldPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::LateDefStructFieldPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::LateDefStructFieldPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::LateDefStructFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::LateDefStructFieldPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructFieldPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructFieldPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::LateDefStructFieldPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::LateDefStructEnsureStruct>
    : public BaseExtractor<::test::fixtures::patch::LateDefStructEnsureStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::LateDefStructEnsureStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructEnsureStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructEnsureStruct>> {
  ExtractorResult<::test::fixtures::patch::LateDefStructEnsureStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::LateDefStructEnsureStruct>
    : public BaseConstructor<::test::fixtures::patch::LateDefStructEnsureStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::LateDefStructEnsureStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructEnsureStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructEnsureStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::LateDefStructEnsureStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::LateDefStructSafePatch>
    : public BaseExtractor<::test::fixtures::patch::LateDefStructSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::LateDefStructSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructSafePatch>> {
  ExtractorResult<::test::fixtures::patch::LateDefStructSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::LateDefStructSafePatch>
    : public BaseConstructor<::test::fixtures::patch::LateDefStructSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::LateDefStructSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::LateDefStructSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::RecursivePatchStruct>
    : public BaseExtractor<::test::fixtures::patch::RecursivePatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RecursivePatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursivePatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursivePatchStruct>> {
  ExtractorResult<::test::fixtures::patch::RecursivePatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RecursivePatchStruct>
    : public BaseConstructor<::test::fixtures::patch::RecursivePatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RecursivePatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursivePatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursivePatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RecursivePatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RecursiveField1PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::RecursiveField1PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RecursiveField1PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveField1PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveField1PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::RecursiveField1PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RecursiveField1PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::RecursiveField1PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RecursiveField1PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveField1PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveField1PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RecursiveField1PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RecursiveFieldPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::RecursiveFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RecursiveFieldPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveFieldPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveFieldPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::RecursiveFieldPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RecursiveFieldPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::RecursiveFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RecursiveFieldPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveFieldPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveFieldPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RecursiveFieldPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RecursiveEnsureStruct>
    : public BaseExtractor<::test::fixtures::patch::RecursiveEnsureStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RecursiveEnsureStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveEnsureStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveEnsureStruct>> {
  ExtractorResult<::test::fixtures::patch::RecursiveEnsureStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RecursiveEnsureStruct>
    : public BaseConstructor<::test::fixtures::patch::RecursiveEnsureStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RecursiveEnsureStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveEnsureStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveEnsureStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RecursiveEnsureStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RecursiveSafePatch>
    : public BaseExtractor<::test::fixtures::patch::RecursiveSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RecursiveSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveSafePatch>> {
  ExtractorResult<::test::fixtures::patch::RecursiveSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RecursiveSafePatch>
    : public BaseConstructor<::test::fixtures::patch::RecursiveSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RecursiveSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::RecursiveSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::BarPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::BarPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::BarPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::BarPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::BarPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::BarPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::BarPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::BarPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::BarFieldPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::BarFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::BarFieldPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarFieldPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarFieldPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::BarFieldPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::BarFieldPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::BarFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::BarFieldPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarFieldPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarFieldPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::BarFieldPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::BarEnsureStruct>
    : public BaseExtractor<::test::fixtures::patch::BarEnsureStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::BarEnsureStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarEnsureStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarEnsureStruct>> {
  ExtractorResult<::test::fixtures::patch::BarEnsureStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::BarEnsureStruct>
    : public BaseConstructor<::test::fixtures::patch::BarEnsureStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::BarEnsureStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarEnsureStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarEnsureStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::BarEnsureStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::BarSafePatch>
    : public BaseExtractor<::test::fixtures::patch::BarSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::BarSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarSafePatch>> {
  ExtractorResult<::test::fixtures::patch::BarSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::BarSafePatch>
    : public BaseConstructor<::test::fixtures::patch::BarSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::BarSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::BarSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::LoopPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::LoopPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::LoopPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LoopPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LoopPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::LoopPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::LoopPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::LoopPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::LoopPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LoopPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LoopPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::LoopPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::LoopSafePatch>
    : public BaseExtractor<::test::fixtures::patch::LoopSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::LoopSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LoopSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LoopSafePatch>> {
  ExtractorResult<::test::fixtures::patch::LoopSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::LoopSafePatch>
    : public BaseConstructor<::test::fixtures::patch::LoopSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::LoopSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LoopSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LoopSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::LoopSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::RefFieldsPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::RefFieldsPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RefFieldsPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::RefFieldsPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RefFieldsPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::RefFieldsPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RefFieldsField1PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::RefFieldsField1PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RefFieldsField1PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField1PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField1PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::RefFieldsField1PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RefFieldsField1PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::RefFieldsField1PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsField1PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField1PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField1PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsField1PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RefFieldsField4PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::RefFieldsField4PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RefFieldsField4PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField4PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField4PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::RefFieldsField4PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RefFieldsField4PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::RefFieldsField4PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsField4PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField4PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField4PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsField4PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RefFieldsField7PatchStruct>
    : public BaseExtractor<::test::fixtures::patch::RefFieldsField7PatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RefFieldsField7PatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField7PatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField7PatchStruct>> {
  ExtractorResult<::test::fixtures::patch::RefFieldsField7PatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RefFieldsField7PatchStruct>
    : public BaseConstructor<::test::fixtures::patch::RefFieldsField7PatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsField7PatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField7PatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField7PatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsField7PatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RefFieldsFieldPatchStruct>
    : public BaseExtractor<::test::fixtures::patch::RefFieldsFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RefFieldsFieldPatchStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsFieldPatchStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsFieldPatchStruct>> {
  ExtractorResult<::test::fixtures::patch::RefFieldsFieldPatchStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RefFieldsFieldPatchStruct>
    : public BaseConstructor<::test::fixtures::patch::RefFieldsFieldPatchStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsFieldPatchStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsFieldPatchStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsFieldPatchStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsFieldPatchStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RefFieldsEnsureStruct>
    : public BaseExtractor<::test::fixtures::patch::RefFieldsEnsureStruct> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RefFieldsEnsureStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsEnsureStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsEnsureStruct>> {
  ExtractorResult<::test::fixtures::patch::RefFieldsEnsureStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RefFieldsEnsureStruct>
    : public BaseConstructor<::test::fixtures::patch::RefFieldsEnsureStruct> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsEnsureStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsEnsureStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsEnsureStruct>> {
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsEnsureStruct& val);
};

template <>
struct Extractor<::test::fixtures::patch::RefFieldsSafePatch>
    : public BaseExtractor<::test::fixtures::patch::RefFieldsSafePatch> {
  static const bool kUsingMarshal = false;
  ExtractorResult<::test::fixtures::patch::RefFieldsSafePatch> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsSafePatch>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsSafePatch>> {
  ExtractorResult<::test::fixtures::patch::RefFieldsSafePatch> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::RefFieldsSafePatch>
    : public BaseConstructor<::test::fixtures::patch::RefFieldsSafePatch> {
  static const bool kUsingMarshal = false;
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsSafePatch& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsSafePatch>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsSafePatch>> {
  PyObject* operator()(const ::test::fixtures::patch::RefFieldsSafePatch& val);
};

template <>
struct Extractor<::test::fixtures::patch::MyEnum>
    : public BaseExtractor<::test::fixtures::patch::MyEnum> {
  ExtractorResult<::test::fixtures::patch::MyEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::patch::MyEnum> {
  PyObject* operator()(::test::fixtures::patch::MyEnum val);
};

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
