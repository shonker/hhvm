// Autogenerated by Thrift for thrift/lib/thrift/patch.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package patch

import (
    "fmt"
    "strings"

    standard "thrift/lib/thrift/standard"
    id "thrift/lib/thrift/id"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

var _ = standard.GoUnusedProtection__
var _ = id.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = strings.Split
var _ = thrift.ZERO


type FieldId = id.FieldId

func NewFieldId() FieldId {
    return id.NewFieldId()
}

func WriteFieldId(item FieldId, p thrift.Format) error {
    err := id.WriteFieldId(item, p)
if err != nil {
    return err
}
    return nil
}

func ReadFieldId(p thrift.Format) (FieldId, error) {
    var decodeResult FieldId
    decodeErr := func() error {
        result, err := id.ReadFieldId(p)
if err != nil {
    return err
}
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type FieldIdList = []int16

func NewFieldIdList() FieldIdList {
    return make([]int16, 0)
}

func WriteFieldIdList(item FieldIdList, p thrift.Format) error {
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}
    return nil
}

func ReadFieldIdList(p thrift.Format) (FieldIdList, error) {
    var decodeResult FieldIdList
    decodeErr := func() error {
        _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult
        decodeResult = result
        return nil
    }()
    return decodeResult, decodeErr
}

type GeneratePatch struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*GeneratePatch)(nil)

func NewGeneratePatch() *GeneratePatch {
    return (&GeneratePatch{})
}



func (x *GeneratePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("GeneratePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *GeneratePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *GeneratePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("GeneratePatch({")
    sb.WriteString("})")

    return sb.String()
}

type GeneratePatchNew struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*GeneratePatchNew)(nil)

func NewGeneratePatchNew() *GeneratePatchNew {
    return (&GeneratePatchNew{})
}



func (x *GeneratePatchNew) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("GeneratePatchNew"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *GeneratePatchNew) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *GeneratePatchNew) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("GeneratePatchNew({")
    sb.WriteString("})")

    return sb.String()
}

type AssignOnlyPatch struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*AssignOnlyPatch)(nil)

func NewAssignOnlyPatch() *AssignOnlyPatch {
    return (&AssignOnlyPatch{})
}



func (x *AssignOnlyPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("AssignOnlyPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *AssignOnlyPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *AssignOnlyPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("AssignOnlyPatch({")
    sb.WriteString("})")

    return sb.String()
}

type BoolPatch struct {
    Assign *bool `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Invert bool `thrift:"invert,9" json:"invert" db:"invert"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*BoolPatch)(nil)

func NewBoolPatch() *BoolPatch {
    return (&BoolPatch{}).
        SetClearNonCompat(false).
        SetInvertNonCompat(false)
}

func (x *BoolPatch) GetAssign() bool {
    if !x.IsSetAssign() {
        return false
    }

    return *x.Assign
}

func (x *BoolPatch) GetClear() bool {
    return x.Clear
}

func (x *BoolPatch) GetInvert() bool {
    return x.Invert
}

func (x *BoolPatch) SetAssignNonCompat(value bool) *BoolPatch {
    x.Assign = &value
    return x
}

func (x *BoolPatch) SetAssign(value *bool) *BoolPatch {
    x.Assign = value
    return x
}

func (x *BoolPatch) SetClearNonCompat(value bool) *BoolPatch {
    x.Clear = value
    return x
}

func (x *BoolPatch) SetClear(value bool) *BoolPatch {
    x.Clear = value
    return x
}

func (x *BoolPatch) SetInvertNonCompat(value bool) *BoolPatch {
    x.Invert = value
    return x
}

func (x *BoolPatch) SetInvert(value bool) *BoolPatch {
    x.Invert = value
    return x
}

func (x *BoolPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *BoolPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BoolPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BoolPatch) writeField9(p thrift.Format) error {  // Invert
    if err := p.WriteFieldBegin("invert", thrift.BOOL, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Invert
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BoolPatch) readField1(p thrift.Format) error {  // Assign
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *BoolPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *BoolPatch) readField9(p thrift.Format) error {  // Invert
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Invert = result
    return nil
}

func (x *BoolPatch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *BoolPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *BoolPatch) toString9() string {  // Invert
    return fmt.Sprintf("%v", x.Invert)
}




func (x *BoolPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("BoolPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BoolPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.BOOL)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.BOOL)):  // invert
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BoolPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BoolPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Invert:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type BytePatch struct {
    Assign *int8 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Add int8 `thrift:"add,8" json:"add" db:"add"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*BytePatch)(nil)

func NewBytePatch() *BytePatch {
    return (&BytePatch{}).
        SetClearNonCompat(false).
        SetAddNonCompat(0)
}

func (x *BytePatch) GetAssign() int8 {
    if !x.IsSetAssign() {
        return 0
    }

    return *x.Assign
}

func (x *BytePatch) GetClear() bool {
    return x.Clear
}

func (x *BytePatch) GetAdd() int8 {
    return x.Add
}

func (x *BytePatch) SetAssignNonCompat(value int8) *BytePatch {
    x.Assign = &value
    return x
}

func (x *BytePatch) SetAssign(value *int8) *BytePatch {
    x.Assign = value
    return x
}

func (x *BytePatch) SetClearNonCompat(value bool) *BytePatch {
    x.Clear = value
    return x
}

func (x *BytePatch) SetClear(value bool) *BytePatch {
    x.Clear = value
    return x
}

func (x *BytePatch) SetAddNonCompat(value int8) *BytePatch {
    x.Add = value
    return x
}

func (x *BytePatch) SetAdd(value int8) *BytePatch {
    x.Add = value
    return x
}

func (x *BytePatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *BytePatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.BYTE, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BytePatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BytePatch) writeField8(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.BYTE, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BytePatch) readField1(p thrift.Format) error {  // Assign
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *BytePatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *BytePatch) readField8(p thrift.Format) error {  // Add
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.Add = result
    return nil
}

func (x *BytePatch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *BytePatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *BytePatch) toString8() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}




func (x *BytePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("BytePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BytePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.BYTE)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.BYTE)):  // add
            if err := x.readField8(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BytePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BytePatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Add:%s", x.toString8()))
    sb.WriteString("})")

    return sb.String()
}

type I16Patch struct {
    Assign *int16 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Add int16 `thrift:"add,8" json:"add" db:"add"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*I16Patch)(nil)

func NewI16Patch() *I16Patch {
    return (&I16Patch{}).
        SetClearNonCompat(false).
        SetAddNonCompat(0)
}

func (x *I16Patch) GetAssign() int16 {
    if !x.IsSetAssign() {
        return 0
    }

    return *x.Assign
}

func (x *I16Patch) GetClear() bool {
    return x.Clear
}

func (x *I16Patch) GetAdd() int16 {
    return x.Add
}

func (x *I16Patch) SetAssignNonCompat(value int16) *I16Patch {
    x.Assign = &value
    return x
}

func (x *I16Patch) SetAssign(value *int16) *I16Patch {
    x.Assign = value
    return x
}

func (x *I16Patch) SetClearNonCompat(value bool) *I16Patch {
    x.Clear = value
    return x
}

func (x *I16Patch) SetClear(value bool) *I16Patch {
    x.Clear = value
    return x
}

func (x *I16Patch) SetAddNonCompat(value int16) *I16Patch {
    x.Add = value
    return x
}

func (x *I16Patch) SetAdd(value int16) *I16Patch {
    x.Add = value
    return x
}

func (x *I16Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *I16Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.I16, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *I16Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *I16Patch) writeField8(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.I16, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *I16Patch) readField1(p thrift.Format) error {  // Assign
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *I16Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *I16Patch) readField8(p thrift.Format) error {  // Add
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.Add = result
    return nil
}

func (x *I16Patch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *I16Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *I16Patch) toString8() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}




func (x *I16Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("I16Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *I16Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I16)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.I16)):  // add
            if err := x.readField8(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *I16Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("I16Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Add:%s", x.toString8()))
    sb.WriteString("})")

    return sb.String()
}

type I32Patch struct {
    Assign *int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Add int32 `thrift:"add,8" json:"add" db:"add"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*I32Patch)(nil)

func NewI32Patch() *I32Patch {
    return (&I32Patch{}).
        SetClearNonCompat(false).
        SetAddNonCompat(0)
}

func (x *I32Patch) GetAssign() int32 {
    if !x.IsSetAssign() {
        return 0
    }

    return *x.Assign
}

func (x *I32Patch) GetClear() bool {
    return x.Clear
}

func (x *I32Patch) GetAdd() int32 {
    return x.Add
}

func (x *I32Patch) SetAssignNonCompat(value int32) *I32Patch {
    x.Assign = &value
    return x
}

func (x *I32Patch) SetAssign(value *int32) *I32Patch {
    x.Assign = value
    return x
}

func (x *I32Patch) SetClearNonCompat(value bool) *I32Patch {
    x.Clear = value
    return x
}

func (x *I32Patch) SetClear(value bool) *I32Patch {
    x.Clear = value
    return x
}

func (x *I32Patch) SetAddNonCompat(value int32) *I32Patch {
    x.Add = value
    return x
}

func (x *I32Patch) SetAdd(value int32) *I32Patch {
    x.Add = value
    return x
}

func (x *I32Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *I32Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *I32Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *I32Patch) writeField8(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.I32, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *I32Patch) readField1(p thrift.Format) error {  // Assign
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *I32Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *I32Patch) readField8(p thrift.Format) error {  // Add
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Add = result
    return nil
}

func (x *I32Patch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *I32Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *I32Patch) toString8() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}




func (x *I32Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("I32Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *I32Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.I32)):  // add
            if err := x.readField8(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *I32Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("I32Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Add:%s", x.toString8()))
    sb.WriteString("})")

    return sb.String()
}

type I64Patch struct {
    Assign *int64 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Add int64 `thrift:"add,8" json:"add" db:"add"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*I64Patch)(nil)

func NewI64Patch() *I64Patch {
    return (&I64Patch{}).
        SetClearNonCompat(false).
        SetAddNonCompat(0)
}

func (x *I64Patch) GetAssign() int64 {
    if !x.IsSetAssign() {
        return 0
    }

    return *x.Assign
}

func (x *I64Patch) GetClear() bool {
    return x.Clear
}

func (x *I64Patch) GetAdd() int64 {
    return x.Add
}

func (x *I64Patch) SetAssignNonCompat(value int64) *I64Patch {
    x.Assign = &value
    return x
}

func (x *I64Patch) SetAssign(value *int64) *I64Patch {
    x.Assign = value
    return x
}

func (x *I64Patch) SetClearNonCompat(value bool) *I64Patch {
    x.Clear = value
    return x
}

func (x *I64Patch) SetClear(value bool) *I64Patch {
    x.Clear = value
    return x
}

func (x *I64Patch) SetAddNonCompat(value int64) *I64Patch {
    x.Add = value
    return x
}

func (x *I64Patch) SetAdd(value int64) *I64Patch {
    x.Add = value
    return x
}

func (x *I64Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *I64Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *I64Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *I64Patch) writeField8(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.I64, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *I64Patch) readField1(p thrift.Format) error {  // Assign
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *I64Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *I64Patch) readField8(p thrift.Format) error {  // Add
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.Add = result
    return nil
}

func (x *I64Patch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *I64Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *I64Patch) toString8() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}




func (x *I64Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("I64Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *I64Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I64)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.I64)):  // add
            if err := x.readField8(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *I64Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("I64Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Add:%s", x.toString8()))
    sb.WriteString("})")

    return sb.String()
}

type FloatPatch struct {
    Assign *float32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Add float32 `thrift:"add,8" json:"add" db:"add"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*FloatPatch)(nil)

func NewFloatPatch() *FloatPatch {
    return (&FloatPatch{}).
        SetClearNonCompat(false).
        SetAddNonCompat(0.0)
}

func (x *FloatPatch) GetAssign() float32 {
    if !x.IsSetAssign() {
        return 0.0
    }

    return *x.Assign
}

func (x *FloatPatch) GetClear() bool {
    return x.Clear
}

func (x *FloatPatch) GetAdd() float32 {
    return x.Add
}

func (x *FloatPatch) SetAssignNonCompat(value float32) *FloatPatch {
    x.Assign = &value
    return x
}

func (x *FloatPatch) SetAssign(value *float32) *FloatPatch {
    x.Assign = value
    return x
}

func (x *FloatPatch) SetClearNonCompat(value bool) *FloatPatch {
    x.Clear = value
    return x
}

func (x *FloatPatch) SetClear(value bool) *FloatPatch {
    x.Clear = value
    return x
}

func (x *FloatPatch) SetAddNonCompat(value float32) *FloatPatch {
    x.Add = value
    return x
}

func (x *FloatPatch) SetAdd(value float32) *FloatPatch {
    x.Add = value
    return x
}

func (x *FloatPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *FloatPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.FLOAT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FloatPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FloatPatch) writeField8(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.FLOAT, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *FloatPatch) readField1(p thrift.Format) error {  // Assign
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *FloatPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *FloatPatch) readField8(p thrift.Format) error {  // Add
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.Add = result
    return nil
}

func (x *FloatPatch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *FloatPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *FloatPatch) toString8() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}




func (x *FloatPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("FloatPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *FloatPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.FLOAT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.FLOAT)):  // add
            if err := x.readField8(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *FloatPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("FloatPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Add:%s", x.toString8()))
    sb.WriteString("})")

    return sb.String()
}

type DoublePatch struct {
    Assign *float64 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Add float64 `thrift:"add,8" json:"add" db:"add"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*DoublePatch)(nil)

func NewDoublePatch() *DoublePatch {
    return (&DoublePatch{}).
        SetClearNonCompat(false).
        SetAddNonCompat(0.0)
}

func (x *DoublePatch) GetAssign() float64 {
    if !x.IsSetAssign() {
        return 0.0
    }

    return *x.Assign
}

func (x *DoublePatch) GetClear() bool {
    return x.Clear
}

func (x *DoublePatch) GetAdd() float64 {
    return x.Add
}

func (x *DoublePatch) SetAssignNonCompat(value float64) *DoublePatch {
    x.Assign = &value
    return x
}

func (x *DoublePatch) SetAssign(value *float64) *DoublePatch {
    x.Assign = value
    return x
}

func (x *DoublePatch) SetClearNonCompat(value bool) *DoublePatch {
    x.Clear = value
    return x
}

func (x *DoublePatch) SetClear(value bool) *DoublePatch {
    x.Clear = value
    return x
}

func (x *DoublePatch) SetAddNonCompat(value float64) *DoublePatch {
    x.Add = value
    return x
}

func (x *DoublePatch) SetAdd(value float64) *DoublePatch {
    x.Add = value
    return x
}

func (x *DoublePatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *DoublePatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.DOUBLE, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *DoublePatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *DoublePatch) writeField8(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.DOUBLE, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *DoublePatch) readField1(p thrift.Format) error {  // Assign
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *DoublePatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *DoublePatch) readField8(p thrift.Format) error {  // Add
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.Add = result
    return nil
}

func (x *DoublePatch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *DoublePatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *DoublePatch) toString8() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}




func (x *DoublePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("DoublePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *DoublePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.DOUBLE)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.DOUBLE)):  // add
            if err := x.readField8(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *DoublePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("DoublePatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Add:%s", x.toString8()))
    sb.WriteString("})")

    return sb.String()
}

type StringPatch struct {
    Assign *string `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Prepend string `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append string `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*StringPatch)(nil)

func NewStringPatch() *StringPatch {
    return (&StringPatch{}).
        SetClearNonCompat(false).
        SetPrependNonCompat("").
        SetAppendNonCompat("")
}

func (x *StringPatch) GetAssign() string {
    if !x.IsSetAssign() {
        return ""
    }

    return *x.Assign
}

func (x *StringPatch) GetClear() bool {
    return x.Clear
}

func (x *StringPatch) GetPrepend() string {
    return x.Prepend
}

func (x *StringPatch) GetAppend() string {
    return x.Append
}

func (x *StringPatch) SetAssignNonCompat(value string) *StringPatch {
    x.Assign = &value
    return x
}

func (x *StringPatch) SetAssign(value *string) *StringPatch {
    x.Assign = value
    return x
}

func (x *StringPatch) SetClearNonCompat(value bool) *StringPatch {
    x.Clear = value
    return x
}

func (x *StringPatch) SetClear(value bool) *StringPatch {
    x.Clear = value
    return x
}

func (x *StringPatch) SetPrependNonCompat(value string) *StringPatch {
    x.Prepend = value
    return x
}

func (x *StringPatch) SetPrepend(value string) *StringPatch {
    x.Prepend = value
    return x
}

func (x *StringPatch) SetAppendNonCompat(value string) *StringPatch {
    x.Append = value
    return x
}

func (x *StringPatch) SetAppend(value string) *StringPatch {
    x.Append = value
    return x
}

func (x *StringPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *StringPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StringPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StringPatch) writeField8(p thrift.Format) error {  // Prepend
    if err := p.WriteFieldBegin("prepend", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Prepend
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StringPatch) writeField9(p thrift.Format) error {  // Append
    if err := p.WriteFieldBegin("append", thrift.STRING, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Append
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *StringPatch) readField1(p thrift.Format) error {  // Assign
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *StringPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *StringPatch) readField8(p thrift.Format) error {  // Prepend
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Prepend = result
    return nil
}

func (x *StringPatch) readField9(p thrift.Format) error {  // Append
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Append = result
    return nil
}

func (x *StringPatch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *StringPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *StringPatch) toString8() string {  // Prepend
    return fmt.Sprintf("%v", x.Prepend)
}

func (x *StringPatch) toString9() string {  // Append
    return fmt.Sprintf("%v", x.Append)
}




func (x *StringPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("StringPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *StringPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.STRING)):  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.STRING)):  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *StringPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("StringPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Prepend:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("Append:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type BinaryPatch struct {
    Assign standard.ByteBuffer `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Prepend standard.ByteBuffer `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append standard.ByteBuffer `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*BinaryPatch)(nil)

func NewBinaryPatch() *BinaryPatch {
    return (&BinaryPatch{}).
        SetClearNonCompat(false).
        SetPrependNonCompat(standard.NewByteBuffer()).
        SetAppendNonCompat(standard.NewByteBuffer())
}

func (x *BinaryPatch) GetAssign() standard.ByteBuffer {
    if !x.IsSetAssign() {
        return standard.NewByteBuffer()
    }

    return x.Assign
}

func (x *BinaryPatch) GetClear() bool {
    return x.Clear
}

func (x *BinaryPatch) GetPrepend() standard.ByteBuffer {
    if !x.IsSetPrepend() {
        return standard.NewByteBuffer()
    }

    return x.Prepend
}

func (x *BinaryPatch) GetAppend() standard.ByteBuffer {
    if !x.IsSetAppend() {
        return standard.NewByteBuffer()
    }

    return x.Append
}

func (x *BinaryPatch) SetAssignNonCompat(value standard.ByteBuffer) *BinaryPatch {
    x.Assign = value
    return x
}

func (x *BinaryPatch) SetAssign(value standard.ByteBuffer) *BinaryPatch {
    x.Assign = value
    return x
}

func (x *BinaryPatch) SetClearNonCompat(value bool) *BinaryPatch {
    x.Clear = value
    return x
}

func (x *BinaryPatch) SetClear(value bool) *BinaryPatch {
    x.Clear = value
    return x
}

func (x *BinaryPatch) SetPrependNonCompat(value standard.ByteBuffer) *BinaryPatch {
    x.Prepend = value
    return x
}

func (x *BinaryPatch) SetPrepend(value standard.ByteBuffer) *BinaryPatch {
    x.Prepend = value
    return x
}

func (x *BinaryPatch) SetAppendNonCompat(value standard.ByteBuffer) *BinaryPatch {
    x.Append = value
    return x
}

func (x *BinaryPatch) SetAppend(value standard.ByteBuffer) *BinaryPatch {
    x.Append = value
    return x
}

func (x *BinaryPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *BinaryPatch) IsSetPrepend() bool {
    return x != nil && x.Prepend != nil
}

func (x *BinaryPatch) IsSetAppend() bool {
    return x != nil && x.Append != nil
}

func (x *BinaryPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    err := standard.WriteByteBuffer(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BinaryPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BinaryPatch) writeField8(p thrift.Format) error {  // Prepend
    if err := p.WriteFieldBegin("prepend", thrift.STRING, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Prepend
    err := standard.WriteByteBuffer(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BinaryPatch) writeField9(p thrift.Format) error {  // Append
    if err := p.WriteFieldBegin("append", thrift.STRING, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Append
    err := standard.WriteByteBuffer(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BinaryPatch) readField1(p thrift.Format) error {  // Assign
    result, err := standard.ReadByteBuffer(p)
if err != nil {
    return err
}

    x.Assign = result
    return nil
}

func (x *BinaryPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *BinaryPatch) readField8(p thrift.Format) error {  // Prepend
    result, err := standard.ReadByteBuffer(p)
if err != nil {
    return err
}

    x.Prepend = result
    return nil
}

func (x *BinaryPatch) readField9(p thrift.Format) error {  // Append
    result, err := standard.ReadByteBuffer(p)
if err != nil {
    return err
}

    x.Append = result
    return nil
}

func (x *BinaryPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *BinaryPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *BinaryPatch) toString8() string {  // Prepend
    return fmt.Sprintf("%v", x.Prepend)
}

func (x *BinaryPatch) toString9() string {  // Append
    return fmt.Sprintf("%v", x.Append)
}



func (x *BinaryPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("BinaryPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BinaryPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.STRING)):  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.STRING)):  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BinaryPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BinaryPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Prepend:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("Append:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("facebook.com/thrift/op/GeneratePatch", func() any { return NewGeneratePatch() })
    registry.RegisterType("facebook.com/thrift/op/GeneratePatchNew", func() any { return NewGeneratePatchNew() })
    registry.RegisterType("facebook.com/thrift/op/AssignOnlyPatch", func() any { return NewAssignOnlyPatch() })
    registry.RegisterType("facebook.com/thrift/op/BoolPatch", func() any { return NewBoolPatch() })
    registry.RegisterType("facebook.com/thrift/op/BytePatch", func() any { return NewBytePatch() })
    registry.RegisterType("facebook.com/thrift/op/I16Patch", func() any { return NewI16Patch() })
    registry.RegisterType("facebook.com/thrift/op/I32Patch", func() any { return NewI32Patch() })
    registry.RegisterType("facebook.com/thrift/op/I64Patch", func() any { return NewI64Patch() })
    registry.RegisterType("facebook.com/thrift/op/FloatPatch", func() any { return NewFloatPatch() })
    registry.RegisterType("facebook.com/thrift/op/DoublePatch", func() any { return NewDoublePatch() })
    registry.RegisterType("facebook.com/thrift/op/StringPatch", func() any { return NewStringPatch() })
    registry.RegisterType("facebook.com/thrift/op/BinaryPatch", func() any { return NewBinaryPatch() })

}
