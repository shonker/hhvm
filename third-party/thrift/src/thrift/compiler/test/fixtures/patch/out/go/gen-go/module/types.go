// Autogenerated by Thrift for thrift/compiler/test/fixtures/patch/src/module.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package module

import (
    "fmt"
    "strings"

    patch "thrift/lib/thrift/patch"
    standard "thrift/lib/thrift/standard"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

var _ = patch.GoUnusedProtection__
var _ = standard.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = strings.Split
var _ = thrift.ZERO


type MyEnum int32

const (
    MyEnum_MyValue0 MyEnum = 0
)

// Enum value maps for MyEnum
var (
    MyEnumToName = map[MyEnum]string {
        MyEnum_MyValue0: "MyValue0",
    }

    MyEnumToValue = map[string]MyEnum {
        "MyValue0": MyEnum_MyValue0,
    }
)

func (x MyEnum) String() string {
    if v, ok := MyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x MyEnum) Ptr() *MyEnum {
    return &x
}

// Deprecated: Use MyEnumToValue instead (e.g. `x, ok := MyEnumToValue["name"]`).
func MyEnumFromString(s string) (MyEnum, error) {
    if v, ok := MyEnumToValue[s]; ok {
        return v, nil
    }
    return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}


type MyData struct {
    Data1 string `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 int32 `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyData)(nil)

func NewMyData() *MyData {
    return (&MyData{}).
        SetData1NonCompat("").
        SetData2NonCompat(0)
}

func (x *MyData) GetData1() string {
    return x.Data1
}

func (x *MyData) GetData2() int32 {
    return x.Data2
}

func (x *MyData) SetData1NonCompat(value string) *MyData {
    x.Data1 = value
    return x
}

func (x *MyData) SetData1(value string) *MyData {
    x.Data1 = value
    return x
}

func (x *MyData) SetData2NonCompat(value int32) *MyData {
    x.Data2 = value
    return x
}

func (x *MyData) SetData2(value int32) *MyData {
    x.Data2 = value
    return x
}

func (x *MyData) writeField1(p thrift.Format) error {  // Data1
    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data1
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyData) writeField2(p thrift.Format) error {  // Data2
    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data2
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyData) readField1(p thrift.Format) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Data1 = result
    return nil
}

func (x *MyData) readField2(p thrift.Format) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Data2 = result
    return nil
}

func (x *MyData) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.Data1)
}

func (x *MyData) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.Data2)
}



func (x *MyData) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyData"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyData) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyData) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyData({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefault struct {
    Data1 string `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 int32 `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataWithCustomDefault)(nil)

func NewMyDataWithCustomDefault() *MyDataWithCustomDefault {
    return (&MyDataWithCustomDefault{}).
        SetData1NonCompat("1").
        SetData2NonCompat(2)
}

func (x *MyDataWithCustomDefault) GetData1() string {
    return x.Data1
}

func (x *MyDataWithCustomDefault) GetData2() int32 {
    return x.Data2
}

func (x *MyDataWithCustomDefault) SetData1NonCompat(value string) *MyDataWithCustomDefault {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefault) SetData1(value string) *MyDataWithCustomDefault {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefault) SetData2NonCompat(value int32) *MyDataWithCustomDefault {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefault) SetData2(value int32) *MyDataWithCustomDefault {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefault) writeField1(p thrift.Format) error {  // Data1
    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data1
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefault) writeField2(p thrift.Format) error {  // Data2
    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data2
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefault) readField1(p thrift.Format) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Data1 = result
    return nil
}

func (x *MyDataWithCustomDefault) readField2(p thrift.Format) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Data2 = result
    return nil
}

func (x *MyDataWithCustomDefault) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.Data1)
}

func (x *MyDataWithCustomDefault) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.Data2)
}



func (x *MyDataWithCustomDefault) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefault"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefault) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefault) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefault({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type InnerUnion struct {
    InnerOption []byte `thrift:"innerOption,1" json:"innerOption,omitempty" db:"innerOption"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*InnerUnion)(nil)

func NewInnerUnion() *InnerUnion {
    return (&InnerUnion{})
}

func (x *InnerUnion) GetInnerOption() []byte {
    if !x.IsSetInnerOption() {
        return []byte("")
    }

    return x.InnerOption
}

func (x *InnerUnion) SetInnerOptionNonCompat(value []byte) *InnerUnion {
    x.InnerOption = value
    return x
}

func (x *InnerUnion) SetInnerOption(value []byte) *InnerUnion {
    x.InnerOption = value
    return x
}

func (x *InnerUnion) IsSetInnerOption() bool {
    return x != nil && x.InnerOption != nil
}

func (x *InnerUnion) writeField1(p thrift.Format) error {  // InnerOption
    if !x.IsSetInnerOption() {
        return nil
    }

    if err := p.WriteFieldBegin("innerOption", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.InnerOption
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnion) readField1(p thrift.Format) error {  // InnerOption
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.InnerOption = result
    return nil
}

func (x *InnerUnion) toString1() string {  // InnerOption
    return fmt.Sprintf("%v", x.InnerOption)
}

func (x *InnerUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetInnerOption()) {
        count++
    }
    return count
}

func (x *InnerUnion) CountSetFieldsInnerUnion() int {
    return x.countSetFields()
}



func (x *InnerUnion) Write(p thrift.Format) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("InnerUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnion) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // innerOption
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *InnerUnion) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("InnerUnion({")
    sb.WriteString(fmt.Sprintf("InnerOption:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type MyUnion struct {
    Option1 *string `thrift:"option1,1" json:"option1,omitempty" db:"option1"`
    Option2 *int32 `thrift:"option2,2" json:"option2,omitempty" db:"option2"`
    Option3 *InnerUnion `thrift:"option3,3" json:"option3,omitempty" db:"option3"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyUnion)(nil)

func NewMyUnion() *MyUnion {
    return (&MyUnion{})
}

func (x *MyUnion) GetOption1() string {
    if !x.IsSetOption1() {
        return ""
    }

    return *x.Option1
}

func (x *MyUnion) GetOption2() int32 {
    if !x.IsSetOption2() {
        return 0
    }

    return *x.Option2
}

func (x *MyUnion) GetOption3() *InnerUnion {
    if !x.IsSetOption3() {
        return nil
    }

    return x.Option3
}

func (x *MyUnion) SetOption1NonCompat(value string) *MyUnion {
    x.Option1 = &value
    return x
}

func (x *MyUnion) SetOption1(value *string) *MyUnion {
    x.Option1 = value
    return x
}

func (x *MyUnion) SetOption2NonCompat(value int32) *MyUnion {
    x.Option2 = &value
    return x
}

func (x *MyUnion) SetOption2(value *int32) *MyUnion {
    x.Option2 = value
    return x
}

func (x *MyUnion) SetOption3NonCompat(value InnerUnion) *MyUnion {
    x.Option3 = &value
    return x
}

func (x *MyUnion) SetOption3(value *InnerUnion) *MyUnion {
    x.Option3 = value
    return x
}

func (x *MyUnion) IsSetOption1() bool {
    return x != nil && x.Option1 != nil
}

func (x *MyUnion) IsSetOption2() bool {
    return x != nil && x.Option2 != nil
}

func (x *MyUnion) IsSetOption3() bool {
    return x != nil && x.Option3 != nil
}

func (x *MyUnion) writeField1(p thrift.Format) error {  // Option1
    if !x.IsSetOption1() {
        return nil
    }

    if err := p.WriteFieldBegin("option1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Option1
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField2(p thrift.Format) error {  // Option2
    if !x.IsSetOption2() {
        return nil
    }

    if err := p.WriteFieldBegin("option2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Option2
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField3(p thrift.Format) error {  // Option3
    if !x.IsSetOption3() {
        return nil
    }

    if err := p.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Option3
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) readField1(p thrift.Format) error {  // Option1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Option1 = &result
    return nil
}

func (x *MyUnion) readField2(p thrift.Format) error {  // Option2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Option2 = &result
    return nil
}

func (x *MyUnion) readField3(p thrift.Format) error {  // Option3
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.Option3 = &result
    return nil
}

func (x *MyUnion) toString1() string {  // Option1
    if x.IsSetOption1() {
        return fmt.Sprintf("%v", *x.Option1)
    }
    return fmt.Sprintf("%v", x.Option1)
}

func (x *MyUnion) toString2() string {  // Option2
    if x.IsSetOption2() {
        return fmt.Sprintf("%v", *x.Option2)
    }
    return fmt.Sprintf("%v", x.Option2)
}

func (x *MyUnion) toString3() string {  // Option3
    return fmt.Sprintf("%v", x.Option3)
}



// Deprecated: Use NewMyUnion().GetOption3() instead.
func (x *MyUnion) DefaultGetOption3() *InnerUnion {
    if !x.IsSetOption3() {
        return NewInnerUnion()
    }
    return x.Option3
}

func (x *MyUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetOption1()) {
        count++
    }
    if (x.IsSetOption2()) {
        count++
    }
    if (x.IsSetOption3()) {
        count++
    }
    return count
}

func (x *MyUnion) CountSetFieldsMyUnion() int {
    return x.countSetFields()
}



func (x *MyUnion) Write(p thrift.Format) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("MyUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // option1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // option2
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // option3
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnion) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnion({")
    sb.WriteString(fmt.Sprintf("Option1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Option2:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Option3:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type MyStruct struct {
    StructWithCustomDefault *MyDataWithCustomDefault `thrift:"structWithCustomDefault,-32" json:"structWithCustomDefault" db:"structWithCustomDefault"`
    I32WithCustomDefault int32 `thrift:"i32WithCustomDefault,-31" json:"i32WithCustomDefault" db:"i32WithCustomDefault"`
    MapMap map[string]map[string]int32 `thrift:"mapMap,-30" json:"mapMap" db:"mapMap"`
    ListMap []map[string]int32 `thrift:"listMap,-29" json:"listMap" db:"listMap"`
    OptMapVal map[string]string `thrift:"optMapVal,-28,optional" json:"optMapVal,omitempty" db:"optMapVal"`
    OptSetVal []string `thrift:"optSetVal,-27,optional" json:"optSetVal,omitempty" db:"optSetVal"`
    OptListVal []int16 `thrift:"optListVal,-26,optional" json:"optListVal,omitempty" db:"optListVal"`
    OptLateStructVal *LateDefStruct `thrift:"optLateStructVal,-25,optional" json:"optLateStructVal,omitempty" db:"optLateStructVal"`
    OptStructVal *MyData `thrift:"optStructVal,-24,optional" json:"optStructVal,omitempty" db:"optStructVal"`
    OptEnumVal *MyEnum `thrift:"optEnumVal,-23,optional" json:"optEnumVal,omitempty" db:"optEnumVal"`
    OptBinaryVal []byte `thrift:"optBinaryVal,-22,optional" json:"optBinaryVal,omitempty" db:"optBinaryVal"`
    OptStringVal *string `thrift:"optStringVal,-21,optional" json:"optStringVal,omitempty" db:"optStringVal"`
    OptDoubleVal *float64 `thrift:"optDoubleVal,-20,optional" json:"optDoubleVal,omitempty" db:"optDoubleVal"`
    OptFloatVal *float32 `thrift:"optFloatVal,-19,optional" json:"optFloatVal,omitempty" db:"optFloatVal"`
    OptI64Val *int64 `thrift:"optI64Val,-18,optional" json:"optI64Val,omitempty" db:"optI64Val"`
    OptI32Val *int32 `thrift:"optI32Val,-17,optional" json:"optI32Val,omitempty" db:"optI32Val"`
    OptI16Val *int16 `thrift:"optI16Val,-16,optional" json:"optI16Val,omitempty" db:"optI16Val"`
    OptByteVal *int8 `thrift:"optByteVal,-15,optional" json:"optByteVal,omitempty" db:"optByteVal"`
    OptBoolVal *bool `thrift:"optBoolVal,-14,optional" json:"optBoolVal,omitempty" db:"optBoolVal"`
    LateStructVal *LateDefStruct `thrift:"lateStructVal,-13" json:"lateStructVal" db:"lateStructVal"`
    UnionVal *MyUnion `thrift:"unionVal,-12" json:"unionVal" db:"unionVal"`
    StructVal *MyData `thrift:"structVal,-11" json:"structVal" db:"structVal"`
    EnumVal MyEnum `thrift:"enumVal,-10" json:"enumVal" db:"enumVal"`
    BinaryVal []byte `thrift:"binaryVal,-9" json:"binaryVal" db:"binaryVal"`
    StringVal string `thrift:"stringVal,-8" json:"stringVal" db:"stringVal"`
    DoubleVal float64 `thrift:"doubleVal,-7" json:"doubleVal" db:"doubleVal"`
    FloatVal float32 `thrift:"floatVal,-6" json:"floatVal" db:"floatVal"`
    I64Val int64 `thrift:"i64Val,-5" json:"i64Val" db:"i64Val"`
    I32Val int32 `thrift:"i32Val,-4" json:"i32Val" db:"i32Val"`
    I16Val int16 `thrift:"i16Val,-3" json:"i16Val" db:"i16Val"`
    ByteVal int8 `thrift:"byteVal,-2" json:"byteVal" db:"byteVal"`
    BoolVal bool `thrift:"boolVal,-1" json:"boolVal" db:"boolVal"`
    StructWithFieldCustomDefault *MyData `thrift:"structWithFieldCustomDefault,1" json:"structWithFieldCustomDefault" db:"structWithFieldCustomDefault"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStruct)(nil)

func NewMyStruct() *MyStruct {
    return (&MyStruct{}).
        SetStructWithCustomDefaultNonCompat(*NewMyDataWithCustomDefault()).
        SetI32WithCustomDefaultNonCompat(1).
        SetMapMapNonCompat(make(map[string]map[string]int32)).
        SetListMapNonCompat(make([]map[string]int32, 0)).
        SetLateStructValNonCompat(*NewLateDefStruct()).
        SetUnionValNonCompat(*NewMyUnion()).
        SetStructValNonCompat(*NewMyData()).
        SetEnumValNonCompat(0).
        SetBinaryValNonCompat([]byte("")).
        SetStringValNonCompat("").
        SetDoubleValNonCompat(0.0).
        SetFloatValNonCompat(0.0).
        SetI64ValNonCompat(0).
        SetI32ValNonCompat(0).
        SetI16ValNonCompat(0).
        SetByteValNonCompat(0).
        SetBoolValNonCompat(false).
        SetStructWithFieldCustomDefaultNonCompat(
              *NewMyData().
    SetData1NonCompat("1").
    SetData2NonCompat(2),
          )
}

func (x *MyStruct) GetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    return x.StructWithCustomDefault
}

func (x *MyStruct) GetI32WithCustomDefault() int32 {
    return x.I32WithCustomDefault
}

func (x *MyStruct) GetMapMap() map[string]map[string]int32 {
    if !x.IsSetMapMap() {
        return make(map[string]map[string]int32)
    }

    return x.MapMap
}

func (x *MyStruct) GetListMap() []map[string]int32 {
    if !x.IsSetListMap() {
        return make([]map[string]int32, 0)
    }

    return x.ListMap
}

func (x *MyStruct) GetOptMapVal() map[string]string {
    if !x.IsSetOptMapVal() {
        return make(map[string]string)
    }

    return x.OptMapVal
}

func (x *MyStruct) GetOptSetVal() []string {
    if !x.IsSetOptSetVal() {
        return make([]string, 0)
    }

    return x.OptSetVal
}

func (x *MyStruct) GetOptListVal() []int16 {
    if !x.IsSetOptListVal() {
        return make([]int16, 0)
    }

    return x.OptListVal
}

func (x *MyStruct) GetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    return x.OptLateStructVal
}

func (x *MyStruct) GetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return nil
    }

    return x.OptStructVal
}

func (x *MyStruct) GetOptEnumVal() MyEnum {
    if !x.IsSetOptEnumVal() {
        return 0
    }

    return *x.OptEnumVal
}

func (x *MyStruct) GetOptBinaryVal() []byte {
    if !x.IsSetOptBinaryVal() {
        return []byte("")
    }

    return x.OptBinaryVal
}

func (x *MyStruct) GetOptStringVal() string {
    if !x.IsSetOptStringVal() {
        return ""
    }

    return *x.OptStringVal
}

func (x *MyStruct) GetOptDoubleVal() float64 {
    if !x.IsSetOptDoubleVal() {
        return 0.0
    }

    return *x.OptDoubleVal
}

func (x *MyStruct) GetOptFloatVal() float32 {
    if !x.IsSetOptFloatVal() {
        return 0.0
    }

    return *x.OptFloatVal
}

func (x *MyStruct) GetOptI64Val() int64 {
    if !x.IsSetOptI64Val() {
        return 0
    }

    return *x.OptI64Val
}

func (x *MyStruct) GetOptI32Val() int32 {
    if !x.IsSetOptI32Val() {
        return 0
    }

    return *x.OptI32Val
}

func (x *MyStruct) GetOptI16Val() int16 {
    if !x.IsSetOptI16Val() {
        return 0
    }

    return *x.OptI16Val
}

func (x *MyStruct) GetOptByteVal() int8 {
    if !x.IsSetOptByteVal() {
        return 0
    }

    return *x.OptByteVal
}

func (x *MyStruct) GetOptBoolVal() bool {
    if !x.IsSetOptBoolVal() {
        return false
    }

    return *x.OptBoolVal
}

func (x *MyStruct) GetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return nil
    }

    return x.LateStructVal
}

func (x *MyStruct) GetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return nil
    }

    return x.UnionVal
}

func (x *MyStruct) GetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return nil
    }

    return x.StructVal
}

func (x *MyStruct) GetEnumVal() MyEnum {
    return x.EnumVal
}

func (x *MyStruct) GetBinaryVal() []byte {
    if !x.IsSetBinaryVal() {
        return []byte("")
    }

    return x.BinaryVal
}

func (x *MyStruct) GetStringVal() string {
    return x.StringVal
}

func (x *MyStruct) GetDoubleVal() float64 {
    return x.DoubleVal
}

func (x *MyStruct) GetFloatVal() float32 {
    return x.FloatVal
}

func (x *MyStruct) GetI64Val() int64 {
    return x.I64Val
}

func (x *MyStruct) GetI32Val() int32 {
    return x.I32Val
}

func (x *MyStruct) GetI16Val() int16 {
    return x.I16Val
}

func (x *MyStruct) GetByteVal() int8 {
    return x.ByteVal
}

func (x *MyStruct) GetBoolVal() bool {
    return x.BoolVal
}

func (x *MyStruct) GetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    return x.StructWithFieldCustomDefault
}

func (x *MyStruct) SetStructWithCustomDefaultNonCompat(value MyDataWithCustomDefault) *MyStruct {
    x.StructWithCustomDefault = &value
    return x
}

func (x *MyStruct) SetStructWithCustomDefault(value *MyDataWithCustomDefault) *MyStruct {
    x.StructWithCustomDefault = value
    return x
}

func (x *MyStruct) SetI32WithCustomDefaultNonCompat(value int32) *MyStruct {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStruct) SetI32WithCustomDefault(value int32) *MyStruct {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStruct) SetMapMapNonCompat(value map[string]map[string]int32) *MyStruct {
    x.MapMap = value
    return x
}

func (x *MyStruct) SetMapMap(value map[string]map[string]int32) *MyStruct {
    x.MapMap = value
    return x
}

func (x *MyStruct) SetListMapNonCompat(value []map[string]int32) *MyStruct {
    x.ListMap = value
    return x
}

func (x *MyStruct) SetListMap(value []map[string]int32) *MyStruct {
    x.ListMap = value
    return x
}

func (x *MyStruct) SetOptMapValNonCompat(value map[string]string) *MyStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStruct) SetOptMapVal(value map[string]string) *MyStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStruct) SetOptSetValNonCompat(value []string) *MyStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStruct) SetOptSetVal(value []string) *MyStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStruct) SetOptListValNonCompat(value []int16) *MyStruct {
    x.OptListVal = value
    return x
}

func (x *MyStruct) SetOptListVal(value []int16) *MyStruct {
    x.OptListVal = value
    return x
}

func (x *MyStruct) SetOptLateStructValNonCompat(value LateDefStruct) *MyStruct {
    x.OptLateStructVal = &value
    return x
}

func (x *MyStruct) SetOptLateStructVal(value *LateDefStruct) *MyStruct {
    x.OptLateStructVal = value
    return x
}

func (x *MyStruct) SetOptStructValNonCompat(value MyData) *MyStruct {
    x.OptStructVal = &value
    return x
}

func (x *MyStruct) SetOptStructVal(value *MyData) *MyStruct {
    x.OptStructVal = value
    return x
}

func (x *MyStruct) SetOptEnumValNonCompat(value MyEnum) *MyStruct {
    x.OptEnumVal = &value
    return x
}

func (x *MyStruct) SetOptEnumVal(value *MyEnum) *MyStruct {
    x.OptEnumVal = value
    return x
}

func (x *MyStruct) SetOptBinaryValNonCompat(value []byte) *MyStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStruct) SetOptBinaryVal(value []byte) *MyStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStruct) SetOptStringValNonCompat(value string) *MyStruct {
    x.OptStringVal = &value
    return x
}

func (x *MyStruct) SetOptStringVal(value *string) *MyStruct {
    x.OptStringVal = value
    return x
}

func (x *MyStruct) SetOptDoubleValNonCompat(value float64) *MyStruct {
    x.OptDoubleVal = &value
    return x
}

func (x *MyStruct) SetOptDoubleVal(value *float64) *MyStruct {
    x.OptDoubleVal = value
    return x
}

func (x *MyStruct) SetOptFloatValNonCompat(value float32) *MyStruct {
    x.OptFloatVal = &value
    return x
}

func (x *MyStruct) SetOptFloatVal(value *float32) *MyStruct {
    x.OptFloatVal = value
    return x
}

func (x *MyStruct) SetOptI64ValNonCompat(value int64) *MyStruct {
    x.OptI64Val = &value
    return x
}

func (x *MyStruct) SetOptI64Val(value *int64) *MyStruct {
    x.OptI64Val = value
    return x
}

func (x *MyStruct) SetOptI32ValNonCompat(value int32) *MyStruct {
    x.OptI32Val = &value
    return x
}

func (x *MyStruct) SetOptI32Val(value *int32) *MyStruct {
    x.OptI32Val = value
    return x
}

func (x *MyStruct) SetOptI16ValNonCompat(value int16) *MyStruct {
    x.OptI16Val = &value
    return x
}

func (x *MyStruct) SetOptI16Val(value *int16) *MyStruct {
    x.OptI16Val = value
    return x
}

func (x *MyStruct) SetOptByteValNonCompat(value int8) *MyStruct {
    x.OptByteVal = &value
    return x
}

func (x *MyStruct) SetOptByteVal(value *int8) *MyStruct {
    x.OptByteVal = value
    return x
}

func (x *MyStruct) SetOptBoolValNonCompat(value bool) *MyStruct {
    x.OptBoolVal = &value
    return x
}

func (x *MyStruct) SetOptBoolVal(value *bool) *MyStruct {
    x.OptBoolVal = value
    return x
}

func (x *MyStruct) SetLateStructValNonCompat(value LateDefStruct) *MyStruct {
    x.LateStructVal = &value
    return x
}

func (x *MyStruct) SetLateStructVal(value *LateDefStruct) *MyStruct {
    x.LateStructVal = value
    return x
}

func (x *MyStruct) SetUnionValNonCompat(value MyUnion) *MyStruct {
    x.UnionVal = &value
    return x
}

func (x *MyStruct) SetUnionVal(value *MyUnion) *MyStruct {
    x.UnionVal = value
    return x
}

func (x *MyStruct) SetStructValNonCompat(value MyData) *MyStruct {
    x.StructVal = &value
    return x
}

func (x *MyStruct) SetStructVal(value *MyData) *MyStruct {
    x.StructVal = value
    return x
}

func (x *MyStruct) SetEnumValNonCompat(value MyEnum) *MyStruct {
    x.EnumVal = value
    return x
}

func (x *MyStruct) SetEnumVal(value MyEnum) *MyStruct {
    x.EnumVal = value
    return x
}

func (x *MyStruct) SetBinaryValNonCompat(value []byte) *MyStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStruct) SetBinaryVal(value []byte) *MyStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStruct) SetStringValNonCompat(value string) *MyStruct {
    x.StringVal = value
    return x
}

func (x *MyStruct) SetStringVal(value string) *MyStruct {
    x.StringVal = value
    return x
}

func (x *MyStruct) SetDoubleValNonCompat(value float64) *MyStruct {
    x.DoubleVal = value
    return x
}

func (x *MyStruct) SetDoubleVal(value float64) *MyStruct {
    x.DoubleVal = value
    return x
}

func (x *MyStruct) SetFloatValNonCompat(value float32) *MyStruct {
    x.FloatVal = value
    return x
}

func (x *MyStruct) SetFloatVal(value float32) *MyStruct {
    x.FloatVal = value
    return x
}

func (x *MyStruct) SetI64ValNonCompat(value int64) *MyStruct {
    x.I64Val = value
    return x
}

func (x *MyStruct) SetI64Val(value int64) *MyStruct {
    x.I64Val = value
    return x
}

func (x *MyStruct) SetI32ValNonCompat(value int32) *MyStruct {
    x.I32Val = value
    return x
}

func (x *MyStruct) SetI32Val(value int32) *MyStruct {
    x.I32Val = value
    return x
}

func (x *MyStruct) SetI16ValNonCompat(value int16) *MyStruct {
    x.I16Val = value
    return x
}

func (x *MyStruct) SetI16Val(value int16) *MyStruct {
    x.I16Val = value
    return x
}

func (x *MyStruct) SetByteValNonCompat(value int8) *MyStruct {
    x.ByteVal = value
    return x
}

func (x *MyStruct) SetByteVal(value int8) *MyStruct {
    x.ByteVal = value
    return x
}

func (x *MyStruct) SetBoolValNonCompat(value bool) *MyStruct {
    x.BoolVal = value
    return x
}

func (x *MyStruct) SetBoolVal(value bool) *MyStruct {
    x.BoolVal = value
    return x
}

func (x *MyStruct) SetStructWithFieldCustomDefaultNonCompat(value MyData) *MyStruct {
    x.StructWithFieldCustomDefault = &value
    return x
}

func (x *MyStruct) SetStructWithFieldCustomDefault(value *MyData) *MyStruct {
    x.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStruct) IsSetStructWithCustomDefault() bool {
    return x != nil && x.StructWithCustomDefault != nil
}

func (x *MyStruct) IsSetMapMap() bool {
    return x != nil && x.MapMap != nil
}

func (x *MyStruct) IsSetListMap() bool {
    return x != nil && x.ListMap != nil
}

func (x *MyStruct) IsSetOptMapVal() bool {
    return x != nil && x.OptMapVal != nil
}

func (x *MyStruct) IsSetOptSetVal() bool {
    return x != nil && x.OptSetVal != nil
}

func (x *MyStruct) IsSetOptListVal() bool {
    return x != nil && x.OptListVal != nil
}

func (x *MyStruct) IsSetOptLateStructVal() bool {
    return x != nil && x.OptLateStructVal != nil
}

func (x *MyStruct) IsSetOptStructVal() bool {
    return x != nil && x.OptStructVal != nil
}

func (x *MyStruct) IsSetOptEnumVal() bool {
    return x != nil && x.OptEnumVal != nil
}

func (x *MyStruct) IsSetOptBinaryVal() bool {
    return x != nil && x.OptBinaryVal != nil
}

func (x *MyStruct) IsSetOptStringVal() bool {
    return x != nil && x.OptStringVal != nil
}

func (x *MyStruct) IsSetOptDoubleVal() bool {
    return x != nil && x.OptDoubleVal != nil
}

func (x *MyStruct) IsSetOptFloatVal() bool {
    return x != nil && x.OptFloatVal != nil
}

func (x *MyStruct) IsSetOptI64Val() bool {
    return x != nil && x.OptI64Val != nil
}

func (x *MyStruct) IsSetOptI32Val() bool {
    return x != nil && x.OptI32Val != nil
}

func (x *MyStruct) IsSetOptI16Val() bool {
    return x != nil && x.OptI16Val != nil
}

func (x *MyStruct) IsSetOptByteVal() bool {
    return x != nil && x.OptByteVal != nil
}

func (x *MyStruct) IsSetOptBoolVal() bool {
    return x != nil && x.OptBoolVal != nil
}

func (x *MyStruct) IsSetLateStructVal() bool {
    return x != nil && x.LateStructVal != nil
}

func (x *MyStruct) IsSetUnionVal() bool {
    return x != nil && x.UnionVal != nil
}

func (x *MyStruct) IsSetStructVal() bool {
    return x != nil && x.StructVal != nil
}

func (x *MyStruct) IsSetBinaryVal() bool {
    return x != nil && x.BinaryVal != nil
}

func (x *MyStruct) IsSetStructWithFieldCustomDefault() bool {
    return x != nil && x.StructWithFieldCustomDefault != nil
}

func (x *MyStruct) writeField_32(p thrift.Format) error {  // StructWithCustomDefault
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructWithCustomDefault
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_31(p thrift.Format) error {  // I32WithCustomDefault
    if err := p.WriteFieldBegin("i32WithCustomDefault", thrift.I32, -31); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I32WithCustomDefault
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_30(p thrift.Format) error {  // MapMap
    if err := p.WriteFieldBegin("mapMap", thrift.MAP, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MapMap
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_29(p thrift.Format) error {  // ListMap
    if err := p.WriteFieldBegin("listMap", thrift.LIST, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ListMap
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_28(p thrift.Format) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.MAP, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptMapVal
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_27(p thrift.Format) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.SET, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSetVal
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_26(p thrift.Format) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.LIST, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptListVal
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_25(p thrift.Format) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptLateStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_24(p thrift.Format) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_23(p thrift.Format) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.I32, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptEnumVal
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_22(p thrift.Format) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.STRING, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptBinaryVal
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_21(p thrift.Format) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRING, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptStringVal
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_20(p thrift.Format) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptDoubleVal
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_19(p thrift.Format) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.FLOAT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptFloatVal
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_18(p thrift.Format) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.I64, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptI64Val
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_17(p thrift.Format) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.I32, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptI32Val
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_16(p thrift.Format) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.I16, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptI16Val
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_15(p thrift.Format) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.BYTE, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptByteVal
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_14(p thrift.Format) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.BOOL, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptBoolVal
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_13(p thrift.Format) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.LateStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_12(p thrift.Format) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.UnionVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_11(p thrift.Format) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_10(p thrift.Format) error {  // EnumVal
    if err := p.WriteFieldBegin("enumVal", thrift.I32, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.EnumVal
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_9(p thrift.Format) error {  // BinaryVal
    if err := p.WriteFieldBegin("binaryVal", thrift.STRING, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BinaryVal
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_8(p thrift.Format) error {  // StringVal
    if err := p.WriteFieldBegin("stringVal", thrift.STRING, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StringVal
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_7(p thrift.Format) error {  // DoubleVal
    if err := p.WriteFieldBegin("doubleVal", thrift.DOUBLE, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.DoubleVal
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_6(p thrift.Format) error {  // FloatVal
    if err := p.WriteFieldBegin("floatVal", thrift.FLOAT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.FloatVal
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_5(p thrift.Format) error {  // I64Val
    if err := p.WriteFieldBegin("i64Val", thrift.I64, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I64Val
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_4(p thrift.Format) error {  // I32Val
    if err := p.WriteFieldBegin("i32Val", thrift.I32, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I32Val
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_3(p thrift.Format) error {  // I16Val
    if err := p.WriteFieldBegin("i16Val", thrift.I16, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I16Val
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_2(p thrift.Format) error {  // ByteVal
    if err := p.WriteFieldBegin("byteVal", thrift.BYTE, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ByteVal
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_1(p thrift.Format) error {  // BoolVal
    if err := p.WriteFieldBegin("boolVal", thrift.BOOL, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BoolVal
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField1(p thrift.Format) error {  // StructWithFieldCustomDefault
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructWithFieldCustomDefault
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) readField_32(p thrift.Format) error {  // StructWithCustomDefault
    result := *NewMyDataWithCustomDefault()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructWithCustomDefault = &result
    return nil
}

func (x *MyStruct) readField_31(p thrift.Format) error {  // I32WithCustomDefault
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.I32WithCustomDefault = result
    return nil
}

func (x *MyStruct) readField_30(p thrift.Format) error {  // MapMap
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.MapMap = result
    return nil
}

func (x *MyStruct) readField_29(p thrift.Format) error {  // ListMap
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.ListMap = result
    return nil
}

func (x *MyStruct) readField_28(p thrift.Format) error {  // OptMapVal
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.OptMapVal = result
    return nil
}

func (x *MyStruct) readField_27(p thrift.Format) error {  // OptSetVal
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.OptSetVal = result
    return nil
}

func (x *MyStruct) readField_26(p thrift.Format) error {  // OptListVal
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptListVal = result
    return nil
}

func (x *MyStruct) readField_25(p thrift.Format) error {  // OptLateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptLateStructVal = &result
    return nil
}

func (x *MyStruct) readField_24(p thrift.Format) error {  // OptStructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptStructVal = &result
    return nil
}

func (x *MyStruct) readField_23(p thrift.Format) error {  // OptEnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.OptEnumVal = &result
    return nil
}

func (x *MyStruct) readField_22(p thrift.Format) error {  // OptBinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.OptBinaryVal = result
    return nil
}

func (x *MyStruct) readField_21(p thrift.Format) error {  // OptStringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.OptStringVal = &result
    return nil
}

func (x *MyStruct) readField_20(p thrift.Format) error {  // OptDoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.OptDoubleVal = &result
    return nil
}

func (x *MyStruct) readField_19(p thrift.Format) error {  // OptFloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.OptFloatVal = &result
    return nil
}

func (x *MyStruct) readField_18(p thrift.Format) error {  // OptI64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.OptI64Val = &result
    return nil
}

func (x *MyStruct) readField_17(p thrift.Format) error {  // OptI32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.OptI32Val = &result
    return nil
}

func (x *MyStruct) readField_16(p thrift.Format) error {  // OptI16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.OptI16Val = &result
    return nil
}

func (x *MyStruct) readField_15(p thrift.Format) error {  // OptByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.OptByteVal = &result
    return nil
}

func (x *MyStruct) readField_14(p thrift.Format) error {  // OptBoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.OptBoolVal = &result
    return nil
}

func (x *MyStruct) readField_13(p thrift.Format) error {  // LateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.LateStructVal = &result
    return nil
}

func (x *MyStruct) readField_12(p thrift.Format) error {  // UnionVal
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.UnionVal = &result
    return nil
}

func (x *MyStruct) readField_11(p thrift.Format) error {  // StructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructVal = &result
    return nil
}

func (x *MyStruct) readField_10(p thrift.Format) error {  // EnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.EnumVal = result
    return nil
}

func (x *MyStruct) readField_9(p thrift.Format) error {  // BinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.BinaryVal = result
    return nil
}

func (x *MyStruct) readField_8(p thrift.Format) error {  // StringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.StringVal = result
    return nil
}

func (x *MyStruct) readField_7(p thrift.Format) error {  // DoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.DoubleVal = result
    return nil
}

func (x *MyStruct) readField_6(p thrift.Format) error {  // FloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.FloatVal = result
    return nil
}

func (x *MyStruct) readField_5(p thrift.Format) error {  // I64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.I64Val = result
    return nil
}

func (x *MyStruct) readField_4(p thrift.Format) error {  // I32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.I32Val = result
    return nil
}

func (x *MyStruct) readField_3(p thrift.Format) error {  // I16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.I16Val = result
    return nil
}

func (x *MyStruct) readField_2(p thrift.Format) error {  // ByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.ByteVal = result
    return nil
}

func (x *MyStruct) readField_1(p thrift.Format) error {  // BoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.BoolVal = result
    return nil
}

func (x *MyStruct) readField1(p thrift.Format) error {  // StructWithFieldCustomDefault
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructWithFieldCustomDefault = &result
    return nil
}

func (x *MyStruct) toString_32() string {  // StructWithCustomDefault
    return fmt.Sprintf("%v", x.StructWithCustomDefault)
}

func (x *MyStruct) toString_31() string {  // I32WithCustomDefault
    return fmt.Sprintf("%v", x.I32WithCustomDefault)
}

func (x *MyStruct) toString_30() string {  // MapMap
    return fmt.Sprintf("%v", x.MapMap)
}

func (x *MyStruct) toString_29() string {  // ListMap
    return fmt.Sprintf("%v", x.ListMap)
}

func (x *MyStruct) toString_28() string {  // OptMapVal
    return fmt.Sprintf("%v", x.OptMapVal)
}

func (x *MyStruct) toString_27() string {  // OptSetVal
    return fmt.Sprintf("%v", x.OptSetVal)
}

func (x *MyStruct) toString_26() string {  // OptListVal
    return fmt.Sprintf("%v", x.OptListVal)
}

func (x *MyStruct) toString_25() string {  // OptLateStructVal
    return fmt.Sprintf("%v", x.OptLateStructVal)
}

func (x *MyStruct) toString_24() string {  // OptStructVal
    return fmt.Sprintf("%v", x.OptStructVal)
}

func (x *MyStruct) toString_23() string {  // OptEnumVal
    if x.IsSetOptEnumVal() {
        return fmt.Sprintf("%v", *x.OptEnumVal)
    }
    return fmt.Sprintf("%v", x.OptEnumVal)
}

func (x *MyStruct) toString_22() string {  // OptBinaryVal
    return fmt.Sprintf("%v", x.OptBinaryVal)
}

func (x *MyStruct) toString_21() string {  // OptStringVal
    if x.IsSetOptStringVal() {
        return fmt.Sprintf("%v", *x.OptStringVal)
    }
    return fmt.Sprintf("%v", x.OptStringVal)
}

func (x *MyStruct) toString_20() string {  // OptDoubleVal
    if x.IsSetOptDoubleVal() {
        return fmt.Sprintf("%v", *x.OptDoubleVal)
    }
    return fmt.Sprintf("%v", x.OptDoubleVal)
}

func (x *MyStruct) toString_19() string {  // OptFloatVal
    if x.IsSetOptFloatVal() {
        return fmt.Sprintf("%v", *x.OptFloatVal)
    }
    return fmt.Sprintf("%v", x.OptFloatVal)
}

func (x *MyStruct) toString_18() string {  // OptI64Val
    if x.IsSetOptI64Val() {
        return fmt.Sprintf("%v", *x.OptI64Val)
    }
    return fmt.Sprintf("%v", x.OptI64Val)
}

func (x *MyStruct) toString_17() string {  // OptI32Val
    if x.IsSetOptI32Val() {
        return fmt.Sprintf("%v", *x.OptI32Val)
    }
    return fmt.Sprintf("%v", x.OptI32Val)
}

func (x *MyStruct) toString_16() string {  // OptI16Val
    if x.IsSetOptI16Val() {
        return fmt.Sprintf("%v", *x.OptI16Val)
    }
    return fmt.Sprintf("%v", x.OptI16Val)
}

func (x *MyStruct) toString_15() string {  // OptByteVal
    if x.IsSetOptByteVal() {
        return fmt.Sprintf("%v", *x.OptByteVal)
    }
    return fmt.Sprintf("%v", x.OptByteVal)
}

func (x *MyStruct) toString_14() string {  // OptBoolVal
    if x.IsSetOptBoolVal() {
        return fmt.Sprintf("%v", *x.OptBoolVal)
    }
    return fmt.Sprintf("%v", x.OptBoolVal)
}

func (x *MyStruct) toString_13() string {  // LateStructVal
    return fmt.Sprintf("%v", x.LateStructVal)
}

func (x *MyStruct) toString_12() string {  // UnionVal
    return fmt.Sprintf("%v", x.UnionVal)
}

func (x *MyStruct) toString_11() string {  // StructVal
    return fmt.Sprintf("%v", x.StructVal)
}

func (x *MyStruct) toString_10() string {  // EnumVal
    return fmt.Sprintf("%v", x.EnumVal)
}

func (x *MyStruct) toString_9() string {  // BinaryVal
    return fmt.Sprintf("%v", x.BinaryVal)
}

func (x *MyStruct) toString_8() string {  // StringVal
    return fmt.Sprintf("%v", x.StringVal)
}

func (x *MyStruct) toString_7() string {  // DoubleVal
    return fmt.Sprintf("%v", x.DoubleVal)
}

func (x *MyStruct) toString_6() string {  // FloatVal
    return fmt.Sprintf("%v", x.FloatVal)
}

func (x *MyStruct) toString_5() string {  // I64Val
    return fmt.Sprintf("%v", x.I64Val)
}

func (x *MyStruct) toString_4() string {  // I32Val
    return fmt.Sprintf("%v", x.I32Val)
}

func (x *MyStruct) toString_3() string {  // I16Val
    return fmt.Sprintf("%v", x.I16Val)
}

func (x *MyStruct) toString_2() string {  // ByteVal
    return fmt.Sprintf("%v", x.ByteVal)
}

func (x *MyStruct) toString_1() string {  // BoolVal
    return fmt.Sprintf("%v", x.BoolVal)
}

func (x *MyStruct) toString1() string {  // StructWithFieldCustomDefault
    return fmt.Sprintf("%v", x.StructWithFieldCustomDefault)
}

// Deprecated: Use NewMyStruct().GetStructWithCustomDefault() instead.
func (x *MyStruct) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return NewMyDataWithCustomDefault()
    }
    return x.StructWithCustomDefault
}

// Deprecated: Use NewMyStruct().GetOptLateStructVal() instead.
func (x *MyStruct) DefaultGetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return NewLateDefStruct()
    }
    return x.OptLateStructVal
}

// Deprecated: Use NewMyStruct().GetOptStructVal() instead.
func (x *MyStruct) DefaultGetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return NewMyData()
    }
    return x.OptStructVal
}










// Deprecated: Use NewMyStruct().GetLateStructVal() instead.
func (x *MyStruct) DefaultGetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return NewLateDefStruct()
    }
    return x.LateStructVal
}

// Deprecated: Use NewMyStruct().GetUnionVal() instead.
func (x *MyStruct) DefaultGetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return NewMyUnion()
    }
    return x.UnionVal
}

// Deprecated: Use NewMyStruct().GetStructVal() instead.
func (x *MyStruct) DefaultGetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return NewMyData()
    }
    return x.StructVal
}

// Deprecated: Use NewMyStruct().GetStructWithFieldCustomDefault() instead.
func (x *MyStruct) DefaultGetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return NewMyData()
    }
    return x.StructWithFieldCustomDefault
}



func (x *MyStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_32(p); err != nil {
        return err
    }

    if err := x.writeField_31(p); err != nil {
        return err
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -32 && wireType == thrift.Type(thrift.STRUCT)):  // structWithCustomDefault
            if err := x.readField_32(p); err != nil {
                return err
            }
        case (id == -31 && wireType == thrift.Type(thrift.I32)):  // i32WithCustomDefault
            if err := x.readField_31(p); err != nil {
                return err
            }
        case (id == -30 && wireType == thrift.Type(thrift.MAP)):  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        case (id == -29 && wireType == thrift.Type(thrift.LIST)):  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case (id == -28 && wireType == thrift.Type(thrift.MAP)):  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case (id == -27 && wireType == thrift.Type(thrift.SET)):  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case (id == -26 && wireType == thrift.Type(thrift.LIST)):  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case (id == -25 && wireType == thrift.Type(thrift.STRUCT)):  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case (id == -24 && wireType == thrift.Type(thrift.STRUCT)):  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case (id == -23 && wireType == thrift.Type(thrift.I32)):  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case (id == -22 && wireType == thrift.Type(thrift.STRING)):  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case (id == -21 && wireType == thrift.Type(thrift.STRING)):  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case (id == -20 && wireType == thrift.Type(thrift.DOUBLE)):  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case (id == -19 && wireType == thrift.Type(thrift.FLOAT)):  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case (id == -18 && wireType == thrift.Type(thrift.I64)):  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case (id == -17 && wireType == thrift.Type(thrift.I32)):  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case (id == -16 && wireType == thrift.Type(thrift.I16)):  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case (id == -15 && wireType == thrift.Type(thrift.BYTE)):  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case (id == -14 && wireType == thrift.Type(thrift.BOOL)):  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case (id == -13 && wireType == thrift.Type(thrift.STRUCT)):  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case (id == -12 && wireType == thrift.Type(thrift.STRUCT)):  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case (id == -11 && wireType == thrift.Type(thrift.STRUCT)):  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case (id == -10 && wireType == thrift.Type(thrift.I32)):  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case (id == -9 && wireType == thrift.Type(thrift.STRING)):  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case (id == -8 && wireType == thrift.Type(thrift.STRING)):  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case (id == -7 && wireType == thrift.Type(thrift.DOUBLE)):  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case (id == -6 && wireType == thrift.Type(thrift.FLOAT)):  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case (id == -5 && wireType == thrift.Type(thrift.I64)):  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case (id == -4 && wireType == thrift.Type(thrift.I32)):  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case (id == -3 && wireType == thrift.Type(thrift.I16)):  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case (id == -2 && wireType == thrift.Type(thrift.BYTE)):  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case (id == -1 && wireType == thrift.Type(thrift.BOOL)):  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // structWithFieldCustomDefault
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStruct({")
    sb.WriteString(fmt.Sprintf("StructWithCustomDefault:%s ", x.toString_32()))
    sb.WriteString(fmt.Sprintf("I32WithCustomDefault:%s ", x.toString_31()))
    sb.WriteString(fmt.Sprintf("MapMap:%s ", x.toString_30()))
    sb.WriteString(fmt.Sprintf("ListMap:%s ", x.toString_29()))
    sb.WriteString(fmt.Sprintf("OptMapVal:%s ", x.toString_28()))
    sb.WriteString(fmt.Sprintf("OptSetVal:%s ", x.toString_27()))
    sb.WriteString(fmt.Sprintf("OptListVal:%s ", x.toString_26()))
    sb.WriteString(fmt.Sprintf("OptLateStructVal:%s ", x.toString_25()))
    sb.WriteString(fmt.Sprintf("OptStructVal:%s ", x.toString_24()))
    sb.WriteString(fmt.Sprintf("OptEnumVal:%s ", x.toString_23()))
    sb.WriteString(fmt.Sprintf("OptBinaryVal:%s ", x.toString_22()))
    sb.WriteString(fmt.Sprintf("OptStringVal:%s ", x.toString_21()))
    sb.WriteString(fmt.Sprintf("OptDoubleVal:%s ", x.toString_20()))
    sb.WriteString(fmt.Sprintf("OptFloatVal:%s ", x.toString_19()))
    sb.WriteString(fmt.Sprintf("OptI64Val:%s ", x.toString_18()))
    sb.WriteString(fmt.Sprintf("OptI32Val:%s ", x.toString_17()))
    sb.WriteString(fmt.Sprintf("OptI16Val:%s ", x.toString_16()))
    sb.WriteString(fmt.Sprintf("OptByteVal:%s ", x.toString_15()))
    sb.WriteString(fmt.Sprintf("OptBoolVal:%s ", x.toString_14()))
    sb.WriteString(fmt.Sprintf("LateStructVal:%s ", x.toString_13()))
    sb.WriteString(fmt.Sprintf("UnionVal:%s ", x.toString_12()))
    sb.WriteString(fmt.Sprintf("StructVal:%s ", x.toString_11()))
    sb.WriteString(fmt.Sprintf("EnumVal:%s ", x.toString_10()))
    sb.WriteString(fmt.Sprintf("BinaryVal:%s ", x.toString_9()))
    sb.WriteString(fmt.Sprintf("StringVal:%s ", x.toString_8()))
    sb.WriteString(fmt.Sprintf("DoubleVal:%s ", x.toString_7()))
    sb.WriteString(fmt.Sprintf("FloatVal:%s ", x.toString_6()))
    sb.WriteString(fmt.Sprintf("I64Val:%s ", x.toString_5()))
    sb.WriteString(fmt.Sprintf("I32Val:%s ", x.toString_4()))
    sb.WriteString(fmt.Sprintf("I16Val:%s ", x.toString_3()))
    sb.WriteString(fmt.Sprintf("ByteVal:%s ", x.toString_2()))
    sb.WriteString(fmt.Sprintf("BoolVal:%s ", x.toString_1()))
    sb.WriteString(fmt.Sprintf("StructWithFieldCustomDefault:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type LateDefStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*LateDefStruct)(nil)

func NewLateDefStruct() *LateDefStruct {
    return (&LateDefStruct{})
}



func (x *LateDefStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("LateDefStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStruct({")
    sb.WriteString("})")

    return sb.String()
}

type Recursive struct {
    Nodes map[string]*Recursive `thrift:"nodes,-1" json:"nodes" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Recursive)(nil)

func NewRecursive() *Recursive {
    return (&Recursive{}).
        SetNodesNonCompat(make(map[string]*Recursive))
}

func (x *Recursive) GetNodes() map[string]*Recursive {
    if !x.IsSetNodes() {
        return make(map[string]*Recursive)
    }

    return x.Nodes
}

func (x *Recursive) SetNodesNonCompat(value map[string]*Recursive) *Recursive {
    x.Nodes = value
    return x
}

func (x *Recursive) SetNodes(value map[string]*Recursive) *Recursive {
    x.Nodes = value
    return x
}

func (x *Recursive) IsSetNodes() bool {
    return x != nil && x.Nodes != nil
}

func (x *Recursive) writeField_1(p thrift.Format) error {  // Nodes
    if err := p.WriteFieldBegin("nodes", thrift.MAP, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Nodes
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Recursive) readField_1(p thrift.Format) error {  // Nodes
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Nodes = result
    return nil
}

func (x *Recursive) toString_1() string {  // Nodes
    return fmt.Sprintf("%v", x.Nodes)
}



func (x *Recursive) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("Recursive"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Recursive) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.MAP)):  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Recursive) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Recursive({")
    sb.WriteString(fmt.Sprintf("Nodes:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type Bar struct {
    Loop *Loop `thrift:"loop,-1" json:"loop" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Bar)(nil)

func NewBar() *Bar {
    return (&Bar{}).
        SetLoopNonCompat(*NewLoop())
}

func (x *Bar) GetLoop() *Loop {
    if !x.IsSetLoop() {
        return nil
    }

    return x.Loop
}

func (x *Bar) SetLoopNonCompat(value Loop) *Bar {
    x.Loop = &value
    return x
}

func (x *Bar) SetLoop(value *Loop) *Bar {
    x.Loop = value
    return x
}

func (x *Bar) IsSetLoop() bool {
    return x != nil && x.Loop != nil
}

func (x *Bar) writeField_1(p thrift.Format) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Loop
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Bar) readField_1(p thrift.Format) error {  // Loop
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.Loop = &result
    return nil
}

func (x *Bar) toString_1() string {  // Loop
    return fmt.Sprintf("%v", x.Loop)
}

// Deprecated: Use NewBar().GetLoop() instead.
func (x *Bar) DefaultGetLoop() *Loop {
    if !x.IsSetLoop() {
        return NewLoop()
    }
    return x.Loop
}



func (x *Bar) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("Bar"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Bar) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.STRUCT)):  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Bar) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Bar({")
    sb.WriteString(fmt.Sprintf("Loop:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type Loop struct {
    Bar *Bar `thrift:"bar,-1" json:"bar" db:"bar"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*Loop)(nil)

func NewLoop() *Loop {
    return (&Loop{}).
        SetBarNonCompat(*NewBar())
}

func (x *Loop) GetBar() *Bar {
    if !x.IsSetBar() {
        return nil
    }

    return x.Bar
}

func (x *Loop) SetBarNonCompat(value Bar) *Loop {
    x.Bar = &value
    return x
}

func (x *Loop) SetBar(value *Bar) *Loop {
    x.Bar = value
    return x
}

func (x *Loop) IsSetBar() bool {
    return x != nil && x.Bar != nil
}

func (x *Loop) writeField_1(p thrift.Format) error {  // Bar
    if !x.IsSetBar() {
        return nil
    }

    if err := p.WriteFieldBegin("bar", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Bar
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Loop) readField_1(p thrift.Format) error {  // Bar
    result := *NewBar()
err := result.Read(p)
if err != nil {
    return err
}

    x.Bar = &result
    return nil
}

func (x *Loop) toString_1() string {  // Bar
    return fmt.Sprintf("%v", x.Bar)
}

// Deprecated: Use NewLoop().GetBar() instead.
func (x *Loop) DefaultGetBar() *Bar {
    if !x.IsSetBar() {
        return NewBar()
    }
    return x.Bar
}



func (x *Loop) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("Loop"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Loop) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.STRUCT)):  // bar
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Loop) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Loop({")
    sb.WriteString(fmt.Sprintf("Bar:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type RefFields struct {
    Unique []int32 `thrift:"unique,1" json:"unique" db:"unique"`
    SharedConst []int32 `thrift:"shared_const,2" json:"shared_const" db:"shared_const"`
    SharedMustable []int32 `thrift:"shared_mustable,3" json:"shared_mustable" db:"shared_mustable"`
    OptUnique []int32 `thrift:"opt_unique,4,optional" json:"opt_unique,omitempty" db:"opt_unique"`
    OptSharedConst []int32 `thrift:"opt_shared_const,5,optional" json:"opt_shared_const,omitempty" db:"opt_shared_const"`
    OptSharedMustable []int32 `thrift:"opt_shared_mustable,6,optional" json:"opt_shared_mustable,omitempty" db:"opt_shared_mustable"`
    OptBox []int32 `thrift:"opt_box,7,optional" json:"opt_box,omitempty" db:"opt_box"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RefFields)(nil)

func NewRefFields() *RefFields {
    return (&RefFields{}).
        SetUniqueNonCompat(make([]int32, 0)).
        SetSharedConstNonCompat(make([]int32, 0)).
        SetSharedMustableNonCompat(make([]int32, 0))
}

func (x *RefFields) GetUnique() []int32 {
    if !x.IsSetUnique() {
        return make([]int32, 0)
    }

    return x.Unique
}

func (x *RefFields) GetSharedConst() []int32 {
    if !x.IsSetSharedConst() {
        return make([]int32, 0)
    }

    return x.SharedConst
}

func (x *RefFields) GetSharedMustable() []int32 {
    if !x.IsSetSharedMustable() {
        return make([]int32, 0)
    }

    return x.SharedMustable
}

func (x *RefFields) GetOptUnique() []int32 {
    if !x.IsSetOptUnique() {
        return make([]int32, 0)
    }

    return x.OptUnique
}

func (x *RefFields) GetOptSharedConst() []int32 {
    if !x.IsSetOptSharedConst() {
        return make([]int32, 0)
    }

    return x.OptSharedConst
}

func (x *RefFields) GetOptSharedMustable() []int32 {
    if !x.IsSetOptSharedMustable() {
        return make([]int32, 0)
    }

    return x.OptSharedMustable
}

func (x *RefFields) GetOptBox() []int32 {
    if !x.IsSetOptBox() {
        return make([]int32, 0)
    }

    return x.OptBox
}

func (x *RefFields) SetUniqueNonCompat(value []int32) *RefFields {
    x.Unique = value
    return x
}

func (x *RefFields) SetUnique(value []int32) *RefFields {
    x.Unique = value
    return x
}

func (x *RefFields) SetSharedConstNonCompat(value []int32) *RefFields {
    x.SharedConst = value
    return x
}

func (x *RefFields) SetSharedConst(value []int32) *RefFields {
    x.SharedConst = value
    return x
}

func (x *RefFields) SetSharedMustableNonCompat(value []int32) *RefFields {
    x.SharedMustable = value
    return x
}

func (x *RefFields) SetSharedMustable(value []int32) *RefFields {
    x.SharedMustable = value
    return x
}

func (x *RefFields) SetOptUniqueNonCompat(value []int32) *RefFields {
    x.OptUnique = value
    return x
}

func (x *RefFields) SetOptUnique(value []int32) *RefFields {
    x.OptUnique = value
    return x
}

func (x *RefFields) SetOptSharedConstNonCompat(value []int32) *RefFields {
    x.OptSharedConst = value
    return x
}

func (x *RefFields) SetOptSharedConst(value []int32) *RefFields {
    x.OptSharedConst = value
    return x
}

func (x *RefFields) SetOptSharedMustableNonCompat(value []int32) *RefFields {
    x.OptSharedMustable = value
    return x
}

func (x *RefFields) SetOptSharedMustable(value []int32) *RefFields {
    x.OptSharedMustable = value
    return x
}

func (x *RefFields) SetOptBoxNonCompat(value []int32) *RefFields {
    x.OptBox = value
    return x
}

func (x *RefFields) SetOptBox(value []int32) *RefFields {
    x.OptBox = value
    return x
}

func (x *RefFields) IsSetUnique() bool {
    return x != nil && x.Unique != nil
}

func (x *RefFields) IsSetSharedConst() bool {
    return x != nil && x.SharedConst != nil
}

func (x *RefFields) IsSetSharedMustable() bool {
    return x != nil && x.SharedMustable != nil
}

func (x *RefFields) IsSetOptUnique() bool {
    return x != nil && x.OptUnique != nil
}

func (x *RefFields) IsSetOptSharedConst() bool {
    return x != nil && x.OptSharedConst != nil
}

func (x *RefFields) IsSetOptSharedMustable() bool {
    return x != nil && x.OptSharedMustable != nil
}

func (x *RefFields) IsSetOptBox() bool {
    return x != nil && x.OptBox != nil
}

func (x *RefFields) writeField1(p thrift.Format) error {  // Unique
    if err := p.WriteFieldBegin("unique", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Unique
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField2(p thrift.Format) error {  // SharedConst
    if err := p.WriteFieldBegin("shared_const", thrift.LIST, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SharedConst
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField3(p thrift.Format) error {  // SharedMustable
    if err := p.WriteFieldBegin("shared_mustable", thrift.LIST, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SharedMustable
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField4(p thrift.Format) error {  // OptUnique
    if !x.IsSetOptUnique() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_unique", thrift.LIST, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptUnique
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField5(p thrift.Format) error {  // OptSharedConst
    if !x.IsSetOptSharedConst() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_shared_const", thrift.LIST, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSharedConst
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField6(p thrift.Format) error {  // OptSharedMustable
    if !x.IsSetOptSharedMustable() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_shared_mustable", thrift.LIST, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSharedMustable
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) writeField7(p thrift.Format) error {  // OptBox
    if !x.IsSetOptBox() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_box", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptBox
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFields) readField1(p thrift.Format) error {  // Unique
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Unique = result
    return nil
}

func (x *RefFields) readField2(p thrift.Format) error {  // SharedConst
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SharedConst = result
    return nil
}

func (x *RefFields) readField3(p thrift.Format) error {  // SharedMustable
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SharedMustable = result
    return nil
}

func (x *RefFields) readField4(p thrift.Format) error {  // OptUnique
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptUnique = result
    return nil
}

func (x *RefFields) readField5(p thrift.Format) error {  // OptSharedConst
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptSharedConst = result
    return nil
}

func (x *RefFields) readField6(p thrift.Format) error {  // OptSharedMustable
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptSharedMustable = result
    return nil
}

func (x *RefFields) readField7(p thrift.Format) error {  // OptBox
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptBox = result
    return nil
}

func (x *RefFields) toString1() string {  // Unique
    return fmt.Sprintf("%v", x.Unique)
}

func (x *RefFields) toString2() string {  // SharedConst
    return fmt.Sprintf("%v", x.SharedConst)
}

func (x *RefFields) toString3() string {  // SharedMustable
    return fmt.Sprintf("%v", x.SharedMustable)
}

func (x *RefFields) toString4() string {  // OptUnique
    return fmt.Sprintf("%v", x.OptUnique)
}

func (x *RefFields) toString5() string {  // OptSharedConst
    return fmt.Sprintf("%v", x.OptSharedConst)
}

func (x *RefFields) toString6() string {  // OptSharedMustable
    return fmt.Sprintf("%v", x.OptSharedMustable)
}

func (x *RefFields) toString7() string {  // OptBox
    return fmt.Sprintf("%v", x.OptBox)
}



func (x *RefFields) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RefFields"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RefFields) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.LIST)):  // unique
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.LIST)):  // shared_const
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.LIST)):  // shared_mustable
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.LIST)):  // opt_unique
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.LIST)):  // opt_shared_const
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.LIST)):  // opt_shared_mustable
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // opt_box
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RefFields) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RefFields({")
    sb.WriteString(fmt.Sprintf("Unique:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("SharedConst:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("SharedMustable:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("OptUnique:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("OptSharedConst:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("OptSharedMustable:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("OptBox:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataPatch struct {
    Assign *MyData `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyDataFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyDataEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *MyDataFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataPatch)(nil)

func NewMyDataPatch() *MyDataPatch {
    return (&MyDataPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewMyDataFieldPatch()).
        SetEnsureNonCompat(*NewMyDataEnsureStruct()).
        SetPatchNonCompat(*NewMyDataFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *MyDataPatch) GetAssign() *MyData {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyDataPatch) GetClear() bool {
    return x.Clear
}

func (x *MyDataPatch) GetPatchPrior() *MyDataFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyDataPatch) GetEnsure() *MyDataEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *MyDataPatch) GetPatch() *MyDataFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyDataPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *MyDataPatch) SetAssignNonCompat(value MyData) *MyDataPatch {
    x.Assign = &value
    return x
}

func (x *MyDataPatch) SetAssign(value *MyData) *MyDataPatch {
    x.Assign = value
    return x
}

func (x *MyDataPatch) SetClearNonCompat(value bool) *MyDataPatch {
    x.Clear = value
    return x
}

func (x *MyDataPatch) SetClear(value bool) *MyDataPatch {
    x.Clear = value
    return x
}

func (x *MyDataPatch) SetPatchPriorNonCompat(value MyDataFieldPatch) *MyDataPatch {
    x.PatchPrior = &value
    return x
}

func (x *MyDataPatch) SetPatchPrior(value *MyDataFieldPatch) *MyDataPatch {
    x.PatchPrior = value
    return x
}

func (x *MyDataPatch) SetEnsureNonCompat(value MyDataEnsureStruct) *MyDataPatch {
    x.Ensure = &value
    return x
}

func (x *MyDataPatch) SetEnsure(value *MyDataEnsureStruct) *MyDataPatch {
    x.Ensure = value
    return x
}

func (x *MyDataPatch) SetPatchNonCompat(value MyDataFieldPatch) *MyDataPatch {
    x.Patch = &value
    return x
}

func (x *MyDataPatch) SetPatch(value *MyDataFieldPatch) *MyDataPatch {
    x.Patch = value
    return x
}

func (x *MyDataPatch) SetRemoveNonCompat(value patch.FieldIdList) *MyDataPatch {
    x.Remove = value
    return x
}

func (x *MyDataPatch) SetRemove(value patch.FieldIdList) *MyDataPatch {
    x.Remove = value
    return x
}

func (x *MyDataPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyDataPatch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *MyDataPatch) IsSetEnsure() bool {
    return x != nil && x.Ensure != nil
}

func (x *MyDataPatch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *MyDataPatch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *MyDataPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField3(p thrift.Format) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField5(p thrift.Format) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Ensure
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField6(p thrift.Format) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) readField1(p thrift.Format) error {  // Assign
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *MyDataPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyDataPatch) readField3(p thrift.Format) error {  // PatchPrior
    result := *NewMyDataFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.PatchPrior = &result
    return nil
}

func (x *MyDataPatch) readField5(p thrift.Format) error {  // Ensure
    result := *NewMyDataEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.Ensure = &result
    return nil
}

func (x *MyDataPatch) readField6(p thrift.Format) error {  // Patch
    result := *NewMyDataFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Patch = &result
    return nil
}

func (x *MyDataPatch) readField7(p thrift.Format) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.Remove = result
    return nil
}

func (x *MyDataPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyDataPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyDataPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *MyDataPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.Ensure)
}

func (x *MyDataPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *MyDataPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

// Deprecated: Use NewMyDataPatch().GetAssign() instead.
func (x *MyDataPatch) DefaultGetAssign() *MyData {
    if !x.IsSetAssign() {
        return NewMyData()
    }
    return x.Assign
}

// Deprecated: Use NewMyDataPatch().GetPatchPrior() instead.
func (x *MyDataPatch) DefaultGetPatchPrior() *MyDataFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewMyDataFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewMyDataPatch().GetEnsure() instead.
func (x *MyDataPatch) DefaultGetEnsure() *MyDataEnsureStruct {
    if !x.IsSetEnsure() {
        return NewMyDataEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewMyDataPatch().GetPatch() instead.
func (x *MyDataPatch) DefaultGetPatch() *MyDataFieldPatch {
    if !x.IsSetPatch() {
        return NewMyDataFieldPatch()
    }
    return x.Patch
}



func (x *MyDataPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.STRUCT)):  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataFieldPatch struct {
    Data1 *patch.StringPatch `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 *patch.I32Patch `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataFieldPatch)(nil)

func NewMyDataFieldPatch() *MyDataFieldPatch {
    return (&MyDataFieldPatch{}).
        SetData1NonCompat(*patch.NewStringPatch()).
        SetData2NonCompat(*patch.NewI32Patch())
}

func (x *MyDataFieldPatch) GetData1() *patch.StringPatch {
    if !x.IsSetData1() {
        return nil
    }

    return x.Data1
}

func (x *MyDataFieldPatch) GetData2() *patch.I32Patch {
    if !x.IsSetData2() {
        return nil
    }

    return x.Data2
}

func (x *MyDataFieldPatch) SetData1NonCompat(value patch.StringPatch) *MyDataFieldPatch {
    x.Data1 = &value
    return x
}

func (x *MyDataFieldPatch) SetData1(value *patch.StringPatch) *MyDataFieldPatch {
    x.Data1 = value
    return x
}

func (x *MyDataFieldPatch) SetData2NonCompat(value patch.I32Patch) *MyDataFieldPatch {
    x.Data2 = &value
    return x
}

func (x *MyDataFieldPatch) SetData2(value *patch.I32Patch) *MyDataFieldPatch {
    x.Data2 = value
    return x
}

func (x *MyDataFieldPatch) IsSetData1() bool {
    return x != nil && x.Data1 != nil
}

func (x *MyDataFieldPatch) IsSetData2() bool {
    return x != nil && x.Data2 != nil
}

func (x *MyDataFieldPatch) writeField1(p thrift.Format) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data1
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataFieldPatch) writeField2(p thrift.Format) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data2
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataFieldPatch) readField1(p thrift.Format) error {  // Data1
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Data1 = &result
    return nil
}

func (x *MyDataFieldPatch) readField2(p thrift.Format) error {  // Data2
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Data2 = &result
    return nil
}

func (x *MyDataFieldPatch) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.Data1)
}

func (x *MyDataFieldPatch) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.Data2)
}

// Deprecated: Use NewMyDataFieldPatch().GetData1() instead.
func (x *MyDataFieldPatch) DefaultGetData1() *patch.StringPatch {
    if !x.IsSetData1() {
        return patch.NewStringPatch()
    }
    return x.Data1
}

// Deprecated: Use NewMyDataFieldPatch().GetData2() instead.
func (x *MyDataFieldPatch) DefaultGetData2() *patch.I32Patch {
    if !x.IsSetData2() {
        return patch.NewI32Patch()
    }
    return x.Data2
}



func (x *MyDataFieldPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataFieldPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataFieldPatch({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataEnsureStruct struct {
    Data1 *string `thrift:"data1,1,optional" json:"data1,omitempty" db:"data1"`
    Data2 *int32 `thrift:"data2,2,optional" json:"data2,omitempty" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataEnsureStruct)(nil)

func NewMyDataEnsureStruct() *MyDataEnsureStruct {
    return (&MyDataEnsureStruct{})
}

func (x *MyDataEnsureStruct) GetData1() string {
    if !x.IsSetData1() {
        return ""
    }

    return *x.Data1
}

func (x *MyDataEnsureStruct) GetData2() int32 {
    if !x.IsSetData2() {
        return 0
    }

    return *x.Data2
}

func (x *MyDataEnsureStruct) SetData1NonCompat(value string) *MyDataEnsureStruct {
    x.Data1 = &value
    return x
}

func (x *MyDataEnsureStruct) SetData1(value *string) *MyDataEnsureStruct {
    x.Data1 = value
    return x
}

func (x *MyDataEnsureStruct) SetData2NonCompat(value int32) *MyDataEnsureStruct {
    x.Data2 = &value
    return x
}

func (x *MyDataEnsureStruct) SetData2(value *int32) *MyDataEnsureStruct {
    x.Data2 = value
    return x
}

func (x *MyDataEnsureStruct) IsSetData1() bool {
    return x != nil && x.Data1 != nil
}

func (x *MyDataEnsureStruct) IsSetData2() bool {
    return x != nil && x.Data2 != nil
}

func (x *MyDataEnsureStruct) writeField1(p thrift.Format) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Data1
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataEnsureStruct) writeField2(p thrift.Format) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Data2
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataEnsureStruct) readField1(p thrift.Format) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Data1 = &result
    return nil
}

func (x *MyDataEnsureStruct) readField2(p thrift.Format) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Data2 = &result
    return nil
}

func (x *MyDataEnsureStruct) toString1() string {  // Data1
    if x.IsSetData1() {
        return fmt.Sprintf("%v", *x.Data1)
    }
    return fmt.Sprintf("%v", x.Data1)
}

func (x *MyDataEnsureStruct) toString2() string {  // Data2
    if x.IsSetData2() {
        return fmt.Sprintf("%v", *x.Data2)
    }
    return fmt.Sprintf("%v", x.Data2)
}





func (x *MyDataEnsureStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataEnsureStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataEnsureStruct({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataSafePatch)(nil)

func NewMyDataSafePatch() *MyDataSafePatch {
    return (&MyDataSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *MyDataSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *MyDataSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *MyDataSafePatch) SetVersionNonCompat(value int32) *MyDataSafePatch {
    x.Version = value
    return x
}

func (x *MyDataSafePatch) SetVersion(value int32) *MyDataSafePatch {
    x.Version = value
    return x
}

func (x *MyDataSafePatch) SetDataNonCompat(value []byte) *MyDataSafePatch {
    x.Data = value
    return x
}

func (x *MyDataSafePatch) SetData(value []byte) *MyDataSafePatch {
    x.Data = value
    return x
}

func (x *MyDataSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *MyDataSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *MyDataSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *MyDataSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *MyDataSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *MyDataSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefaultPatch struct {
    Assign *MyDataWithCustomDefault `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyDataWithCustomDefaultFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyDataWithCustomDefaultEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *MyDataWithCustomDefaultFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataWithCustomDefaultPatch)(nil)

func NewMyDataWithCustomDefaultPatch() *MyDataWithCustomDefaultPatch {
    return (&MyDataWithCustomDefaultPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewMyDataWithCustomDefaultFieldPatch()).
        SetEnsureNonCompat(*NewMyDataWithCustomDefaultEnsureStruct()).
        SetPatchNonCompat(*NewMyDataWithCustomDefaultFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *MyDataWithCustomDefaultPatch) GetAssign() *MyDataWithCustomDefault {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyDataWithCustomDefaultPatch) GetClear() bool {
    return x.Clear
}

func (x *MyDataWithCustomDefaultPatch) GetPatchPrior() *MyDataWithCustomDefaultFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyDataWithCustomDefaultPatch) GetEnsure() *MyDataWithCustomDefaultEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *MyDataWithCustomDefaultPatch) GetPatch() *MyDataWithCustomDefaultFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyDataWithCustomDefaultPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *MyDataWithCustomDefaultPatch) SetAssignNonCompat(value MyDataWithCustomDefault) *MyDataWithCustomDefaultPatch {
    x.Assign = &value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetAssign(value *MyDataWithCustomDefault) *MyDataWithCustomDefaultPatch {
    x.Assign = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetClearNonCompat(value bool) *MyDataWithCustomDefaultPatch {
    x.Clear = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetClear(value bool) *MyDataWithCustomDefaultPatch {
    x.Clear = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetPatchPriorNonCompat(value MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
    x.PatchPrior = &value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetPatchPrior(value *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
    x.PatchPrior = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetEnsureNonCompat(value MyDataWithCustomDefaultEnsureStruct) *MyDataWithCustomDefaultPatch {
    x.Ensure = &value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetEnsure(value *MyDataWithCustomDefaultEnsureStruct) *MyDataWithCustomDefaultPatch {
    x.Ensure = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetPatchNonCompat(value MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
    x.Patch = &value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetPatch(value *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
    x.Patch = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetRemoveNonCompat(value patch.FieldIdList) *MyDataWithCustomDefaultPatch {
    x.Remove = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetRemove(value patch.FieldIdList) *MyDataWithCustomDefaultPatch {
    x.Remove = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyDataWithCustomDefaultPatch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *MyDataWithCustomDefaultPatch) IsSetEnsure() bool {
    return x != nil && x.Ensure != nil
}

func (x *MyDataWithCustomDefaultPatch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *MyDataWithCustomDefaultPatch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *MyDataWithCustomDefaultPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField3(p thrift.Format) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField5(p thrift.Format) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Ensure
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField6(p thrift.Format) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField1(p thrift.Format) error {  // Assign
    result := *NewMyDataWithCustomDefault()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField3(p thrift.Format) error {  // PatchPrior
    result := *NewMyDataWithCustomDefaultFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.PatchPrior = &result
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField5(p thrift.Format) error {  // Ensure
    result := *NewMyDataWithCustomDefaultEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.Ensure = &result
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField6(p thrift.Format) error {  // Patch
    result := *NewMyDataWithCustomDefaultFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Patch = &result
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField7(p thrift.Format) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.Remove = result
    return nil
}

func (x *MyDataWithCustomDefaultPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyDataWithCustomDefaultPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyDataWithCustomDefaultPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *MyDataWithCustomDefaultPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.Ensure)
}

func (x *MyDataWithCustomDefaultPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *MyDataWithCustomDefaultPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetAssign() instead.
func (x *MyDataWithCustomDefaultPatch) DefaultGetAssign() *MyDataWithCustomDefault {
    if !x.IsSetAssign() {
        return NewMyDataWithCustomDefault()
    }
    return x.Assign
}

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetPatchPrior() instead.
func (x *MyDataWithCustomDefaultPatch) DefaultGetPatchPrior() *MyDataWithCustomDefaultFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewMyDataWithCustomDefaultFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetEnsure() instead.
func (x *MyDataWithCustomDefaultPatch) DefaultGetEnsure() *MyDataWithCustomDefaultEnsureStruct {
    if !x.IsSetEnsure() {
        return NewMyDataWithCustomDefaultEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetPatch() instead.
func (x *MyDataWithCustomDefaultPatch) DefaultGetPatch() *MyDataWithCustomDefaultFieldPatch {
    if !x.IsSetPatch() {
        return NewMyDataWithCustomDefaultFieldPatch()
    }
    return x.Patch
}



func (x *MyDataWithCustomDefaultPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefaultPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.STRUCT)):  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefaultPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefaultPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefaultFieldPatch struct {
    Data1 *patch.StringPatch `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 *patch.I32Patch `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataWithCustomDefaultFieldPatch)(nil)

func NewMyDataWithCustomDefaultFieldPatch() *MyDataWithCustomDefaultFieldPatch {
    return (&MyDataWithCustomDefaultFieldPatch{}).
        SetData1NonCompat(*patch.NewStringPatch()).
        SetData2NonCompat(*patch.NewI32Patch())
}

func (x *MyDataWithCustomDefaultFieldPatch) GetData1() *patch.StringPatch {
    if !x.IsSetData1() {
        return nil
    }

    return x.Data1
}

func (x *MyDataWithCustomDefaultFieldPatch) GetData2() *patch.I32Patch {
    if !x.IsSetData2() {
        return nil
    }

    return x.Data2
}

func (x *MyDataWithCustomDefaultFieldPatch) SetData1NonCompat(value patch.StringPatch) *MyDataWithCustomDefaultFieldPatch {
    x.Data1 = &value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatch) SetData1(value *patch.StringPatch) *MyDataWithCustomDefaultFieldPatch {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatch) SetData2NonCompat(value patch.I32Patch) *MyDataWithCustomDefaultFieldPatch {
    x.Data2 = &value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatch) SetData2(value *patch.I32Patch) *MyDataWithCustomDefaultFieldPatch {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatch) IsSetData1() bool {
    return x != nil && x.Data1 != nil
}

func (x *MyDataWithCustomDefaultFieldPatch) IsSetData2() bool {
    return x != nil && x.Data2 != nil
}

func (x *MyDataWithCustomDefaultFieldPatch) writeField1(p thrift.Format) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data1
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) writeField2(p thrift.Format) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data2
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) readField1(p thrift.Format) error {  // Data1
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Data1 = &result
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) readField2(p thrift.Format) error {  // Data2
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Data2 = &result
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.Data1)
}

func (x *MyDataWithCustomDefaultFieldPatch) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.Data2)
}

// Deprecated: Use NewMyDataWithCustomDefaultFieldPatch().GetData1() instead.
func (x *MyDataWithCustomDefaultFieldPatch) DefaultGetData1() *patch.StringPatch {
    if !x.IsSetData1() {
        return patch.NewStringPatch()
    }
    return x.Data1
}

// Deprecated: Use NewMyDataWithCustomDefaultFieldPatch().GetData2() instead.
func (x *MyDataWithCustomDefaultFieldPatch) DefaultGetData2() *patch.I32Patch {
    if !x.IsSetData2() {
        return patch.NewI32Patch()
    }
    return x.Data2
}



func (x *MyDataWithCustomDefaultFieldPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefaultFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefaultFieldPatch({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefaultEnsureStruct struct {
    Data1 *string `thrift:"data1,1,optional" json:"data1,omitempty" db:"data1"`
    Data2 *int32 `thrift:"data2,2,optional" json:"data2,omitempty" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataWithCustomDefaultEnsureStruct)(nil)

func NewMyDataWithCustomDefaultEnsureStruct() *MyDataWithCustomDefaultEnsureStruct {
    return (&MyDataWithCustomDefaultEnsureStruct{})
}

func (x *MyDataWithCustomDefaultEnsureStruct) GetData1() string {
    if !x.IsSetData1() {
        return ""
    }

    return *x.Data1
}

func (x *MyDataWithCustomDefaultEnsureStruct) GetData2() int32 {
    if !x.IsSetData2() {
        return 0
    }

    return *x.Data2
}

func (x *MyDataWithCustomDefaultEnsureStruct) SetData1NonCompat(value string) *MyDataWithCustomDefaultEnsureStruct {
    x.Data1 = &value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStruct) SetData1(value *string) *MyDataWithCustomDefaultEnsureStruct {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStruct) SetData2NonCompat(value int32) *MyDataWithCustomDefaultEnsureStruct {
    x.Data2 = &value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStruct) SetData2(value *int32) *MyDataWithCustomDefaultEnsureStruct {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStruct) IsSetData1() bool {
    return x != nil && x.Data1 != nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) IsSetData2() bool {
    return x != nil && x.Data2 != nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) writeField1(p thrift.Format) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Data1
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) writeField2(p thrift.Format) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Data2
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) readField1(p thrift.Format) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.Data1 = &result
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) readField2(p thrift.Format) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Data2 = &result
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) toString1() string {  // Data1
    if x.IsSetData1() {
        return fmt.Sprintf("%v", *x.Data1)
    }
    return fmt.Sprintf("%v", x.Data1)
}

func (x *MyDataWithCustomDefaultEnsureStruct) toString2() string {  // Data2
    if x.IsSetData2() {
        return fmt.Sprintf("%v", *x.Data2)
    }
    return fmt.Sprintf("%v", x.Data2)
}





func (x *MyDataWithCustomDefaultEnsureStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefaultEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I32)):  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefaultEnsureStruct({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefaultSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyDataWithCustomDefaultSafePatch)(nil)

func NewMyDataWithCustomDefaultSafePatch() *MyDataWithCustomDefaultSafePatch {
    return (&MyDataWithCustomDefaultSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *MyDataWithCustomDefaultSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *MyDataWithCustomDefaultSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *MyDataWithCustomDefaultSafePatch) SetVersionNonCompat(value int32) *MyDataWithCustomDefaultSafePatch {
    x.Version = value
    return x
}

func (x *MyDataWithCustomDefaultSafePatch) SetVersion(value int32) *MyDataWithCustomDefaultSafePatch {
    x.Version = value
    return x
}

func (x *MyDataWithCustomDefaultSafePatch) SetDataNonCompat(value []byte) *MyDataWithCustomDefaultSafePatch {
    x.Data = value
    return x
}

func (x *MyDataWithCustomDefaultSafePatch) SetData(value []byte) *MyDataWithCustomDefaultSafePatch {
    x.Data = value
    return x
}

func (x *MyDataWithCustomDefaultSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *MyDataWithCustomDefaultSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *MyDataWithCustomDefaultSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *MyDataWithCustomDefaultSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *MyDataWithCustomDefaultSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *MyDataWithCustomDefaultSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefaultSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefaultSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefaultSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type InnerUnionPatch struct {
    Assign *InnerUnion `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *InnerUnionFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *InnerUnion `thrift:"ensure,4" json:"ensure" db:"ensure"`
    Patch *InnerUnionFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*InnerUnionPatch)(nil)

func NewInnerUnionPatch() *InnerUnionPatch {
    return (&InnerUnionPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewInnerUnionFieldPatch()).
        SetEnsureNonCompat(*NewInnerUnion()).
        SetPatchNonCompat(*NewInnerUnionFieldPatch())
}

func (x *InnerUnionPatch) GetAssign() *InnerUnion {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *InnerUnionPatch) GetClear() bool {
    return x.Clear
}

func (x *InnerUnionPatch) GetPatchPrior() *InnerUnionFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *InnerUnionPatch) GetEnsure() *InnerUnion {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *InnerUnionPatch) GetPatch() *InnerUnionFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *InnerUnionPatch) SetAssignNonCompat(value InnerUnion) *InnerUnionPatch {
    x.Assign = &value
    return x
}

func (x *InnerUnionPatch) SetAssign(value *InnerUnion) *InnerUnionPatch {
    x.Assign = value
    return x
}

func (x *InnerUnionPatch) SetClearNonCompat(value bool) *InnerUnionPatch {
    x.Clear = value
    return x
}

func (x *InnerUnionPatch) SetClear(value bool) *InnerUnionPatch {
    x.Clear = value
    return x
}

func (x *InnerUnionPatch) SetPatchPriorNonCompat(value InnerUnionFieldPatch) *InnerUnionPatch {
    x.PatchPrior = &value
    return x
}

func (x *InnerUnionPatch) SetPatchPrior(value *InnerUnionFieldPatch) *InnerUnionPatch {
    x.PatchPrior = value
    return x
}

func (x *InnerUnionPatch) SetEnsureNonCompat(value InnerUnion) *InnerUnionPatch {
    x.Ensure = &value
    return x
}

func (x *InnerUnionPatch) SetEnsure(value *InnerUnion) *InnerUnionPatch {
    x.Ensure = value
    return x
}

func (x *InnerUnionPatch) SetPatchNonCompat(value InnerUnionFieldPatch) *InnerUnionPatch {
    x.Patch = &value
    return x
}

func (x *InnerUnionPatch) SetPatch(value *InnerUnionFieldPatch) *InnerUnionPatch {
    x.Patch = value
    return x
}

func (x *InnerUnionPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *InnerUnionPatch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *InnerUnionPatch) IsSetEnsure() bool {
    return x != nil && x.Ensure != nil
}

func (x *InnerUnionPatch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *InnerUnionPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField3(p thrift.Format) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField4(p thrift.Format) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Ensure
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField6(p thrift.Format) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) readField1(p thrift.Format) error {  // Assign
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *InnerUnionPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *InnerUnionPatch) readField3(p thrift.Format) error {  // PatchPrior
    result := *NewInnerUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.PatchPrior = &result
    return nil
}

func (x *InnerUnionPatch) readField4(p thrift.Format) error {  // Ensure
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.Ensure = &result
    return nil
}

func (x *InnerUnionPatch) readField6(p thrift.Format) error {  // Patch
    result := *NewInnerUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Patch = &result
    return nil
}

func (x *InnerUnionPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *InnerUnionPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *InnerUnionPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *InnerUnionPatch) toString4() string {  // Ensure
    return fmt.Sprintf("%v", x.Ensure)
}

func (x *InnerUnionPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

// Deprecated: Use NewInnerUnionPatch().GetAssign() instead.
func (x *InnerUnionPatch) DefaultGetAssign() *InnerUnion {
    if !x.IsSetAssign() {
        return NewInnerUnion()
    }
    return x.Assign
}

// Deprecated: Use NewInnerUnionPatch().GetPatchPrior() instead.
func (x *InnerUnionPatch) DefaultGetPatchPrior() *InnerUnionFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewInnerUnionFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewInnerUnionPatch().GetEnsure() instead.
func (x *InnerUnionPatch) DefaultGetEnsure() *InnerUnion {
    if !x.IsSetEnsure() {
        return NewInnerUnion()
    }
    return x.Ensure
}

// Deprecated: Use NewInnerUnionPatch().GetPatch() instead.
func (x *InnerUnionPatch) DefaultGetPatch() *InnerUnionFieldPatch {
    if !x.IsSetPatch() {
        return NewInnerUnionFieldPatch()
    }
    return x.Patch
}



func (x *InnerUnionPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("InnerUnionPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.STRUCT)):  // ensure
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *InnerUnionPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("InnerUnionPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("Patch:%s", x.toString6()))
    sb.WriteString("})")

    return sb.String()
}

type InnerUnionFieldPatch struct {
    InnerOption *patch.BinaryPatch `thrift:"innerOption,1" json:"innerOption" db:"innerOption"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*InnerUnionFieldPatch)(nil)

func NewInnerUnionFieldPatch() *InnerUnionFieldPatch {
    return (&InnerUnionFieldPatch{}).
        SetInnerOptionNonCompat(*patch.NewBinaryPatch())
}

func (x *InnerUnionFieldPatch) GetInnerOption() *patch.BinaryPatch {
    if !x.IsSetInnerOption() {
        return nil
    }

    return x.InnerOption
}

func (x *InnerUnionFieldPatch) SetInnerOptionNonCompat(value patch.BinaryPatch) *InnerUnionFieldPatch {
    x.InnerOption = &value
    return x
}

func (x *InnerUnionFieldPatch) SetInnerOption(value *patch.BinaryPatch) *InnerUnionFieldPatch {
    x.InnerOption = value
    return x
}

func (x *InnerUnionFieldPatch) IsSetInnerOption() bool {
    return x != nil && x.InnerOption != nil
}

func (x *InnerUnionFieldPatch) writeField1(p thrift.Format) error {  // InnerOption
    if !x.IsSetInnerOption() {
        return nil
    }

    if err := p.WriteFieldBegin("innerOption", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.InnerOption
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionFieldPatch) readField1(p thrift.Format) error {  // InnerOption
    result := *patch.NewBinaryPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.InnerOption = &result
    return nil
}

func (x *InnerUnionFieldPatch) toString1() string {  // InnerOption
    return fmt.Sprintf("%v", x.InnerOption)
}

// Deprecated: Use NewInnerUnionFieldPatch().GetInnerOption() instead.
func (x *InnerUnionFieldPatch) DefaultGetInnerOption() *patch.BinaryPatch {
    if !x.IsSetInnerOption() {
        return patch.NewBinaryPatch()
    }
    return x.InnerOption
}



func (x *InnerUnionFieldPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("InnerUnionFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionFieldPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // innerOption
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *InnerUnionFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("InnerUnionFieldPatch({")
    sb.WriteString(fmt.Sprintf("InnerOption:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type InnerUnionSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*InnerUnionSafePatch)(nil)

func NewInnerUnionSafePatch() *InnerUnionSafePatch {
    return (&InnerUnionSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *InnerUnionSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *InnerUnionSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *InnerUnionSafePatch) SetVersionNonCompat(value int32) *InnerUnionSafePatch {
    x.Version = value
    return x
}

func (x *InnerUnionSafePatch) SetVersion(value int32) *InnerUnionSafePatch {
    x.Version = value
    return x
}

func (x *InnerUnionSafePatch) SetDataNonCompat(value []byte) *InnerUnionSafePatch {
    x.Data = value
    return x
}

func (x *InnerUnionSafePatch) SetData(value []byte) *InnerUnionSafePatch {
    x.Data = value
    return x
}

func (x *InnerUnionSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *InnerUnionSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *InnerUnionSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *InnerUnionSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *InnerUnionSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *InnerUnionSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("InnerUnionSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *InnerUnionSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("InnerUnionSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyUnionPatch struct {
    Assign *MyUnion `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyUnionFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyUnion `thrift:"ensure,4" json:"ensure" db:"ensure"`
    Patch *MyUnionFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyUnionPatch)(nil)

func NewMyUnionPatch() *MyUnionPatch {
    return (&MyUnionPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewMyUnionFieldPatch()).
        SetEnsureNonCompat(*NewMyUnion()).
        SetPatchNonCompat(*NewMyUnionFieldPatch())
}

func (x *MyUnionPatch) GetAssign() *MyUnion {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyUnionPatch) GetClear() bool {
    return x.Clear
}

func (x *MyUnionPatch) GetPatchPrior() *MyUnionFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyUnionPatch) GetEnsure() *MyUnion {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *MyUnionPatch) GetPatch() *MyUnionFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyUnionPatch) SetAssignNonCompat(value MyUnion) *MyUnionPatch {
    x.Assign = &value
    return x
}

func (x *MyUnionPatch) SetAssign(value *MyUnion) *MyUnionPatch {
    x.Assign = value
    return x
}

func (x *MyUnionPatch) SetClearNonCompat(value bool) *MyUnionPatch {
    x.Clear = value
    return x
}

func (x *MyUnionPatch) SetClear(value bool) *MyUnionPatch {
    x.Clear = value
    return x
}

func (x *MyUnionPatch) SetPatchPriorNonCompat(value MyUnionFieldPatch) *MyUnionPatch {
    x.PatchPrior = &value
    return x
}

func (x *MyUnionPatch) SetPatchPrior(value *MyUnionFieldPatch) *MyUnionPatch {
    x.PatchPrior = value
    return x
}

func (x *MyUnionPatch) SetEnsureNonCompat(value MyUnion) *MyUnionPatch {
    x.Ensure = &value
    return x
}

func (x *MyUnionPatch) SetEnsure(value *MyUnion) *MyUnionPatch {
    x.Ensure = value
    return x
}

func (x *MyUnionPatch) SetPatchNonCompat(value MyUnionFieldPatch) *MyUnionPatch {
    x.Patch = &value
    return x
}

func (x *MyUnionPatch) SetPatch(value *MyUnionFieldPatch) *MyUnionPatch {
    x.Patch = value
    return x
}

func (x *MyUnionPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyUnionPatch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *MyUnionPatch) IsSetEnsure() bool {
    return x != nil && x.Ensure != nil
}

func (x *MyUnionPatch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *MyUnionPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField3(p thrift.Format) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField4(p thrift.Format) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Ensure
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField6(p thrift.Format) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) readField1(p thrift.Format) error {  // Assign
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *MyUnionPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyUnionPatch) readField3(p thrift.Format) error {  // PatchPrior
    result := *NewMyUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.PatchPrior = &result
    return nil
}

func (x *MyUnionPatch) readField4(p thrift.Format) error {  // Ensure
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.Ensure = &result
    return nil
}

func (x *MyUnionPatch) readField6(p thrift.Format) error {  // Patch
    result := *NewMyUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Patch = &result
    return nil
}

func (x *MyUnionPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyUnionPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyUnionPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *MyUnionPatch) toString4() string {  // Ensure
    return fmt.Sprintf("%v", x.Ensure)
}

func (x *MyUnionPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

// Deprecated: Use NewMyUnionPatch().GetAssign() instead.
func (x *MyUnionPatch) DefaultGetAssign() *MyUnion {
    if !x.IsSetAssign() {
        return NewMyUnion()
    }
    return x.Assign
}

// Deprecated: Use NewMyUnionPatch().GetPatchPrior() instead.
func (x *MyUnionPatch) DefaultGetPatchPrior() *MyUnionFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewMyUnionFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewMyUnionPatch().GetEnsure() instead.
func (x *MyUnionPatch) DefaultGetEnsure() *MyUnion {
    if !x.IsSetEnsure() {
        return NewMyUnion()
    }
    return x.Ensure
}

// Deprecated: Use NewMyUnionPatch().GetPatch() instead.
func (x *MyUnionPatch) DefaultGetPatch() *MyUnionFieldPatch {
    if !x.IsSetPatch() {
        return NewMyUnionFieldPatch()
    }
    return x.Patch
}



func (x *MyUnionPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyUnionPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.STRUCT)):  // ensure
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnionPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnionPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("Patch:%s", x.toString6()))
    sb.WriteString("})")

    return sb.String()
}

type MyUnionFieldPatch struct {
    Option1 *patch.StringPatch `thrift:"option1,1" json:"option1" db:"option1"`
    Option2 *patch.I32Patch `thrift:"option2,2" json:"option2" db:"option2"`
    Option3 *InnerUnionPatch `thrift:"option3,3" json:"option3" db:"option3"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyUnionFieldPatch)(nil)

func NewMyUnionFieldPatch() *MyUnionFieldPatch {
    return (&MyUnionFieldPatch{}).
        SetOption1NonCompat(*patch.NewStringPatch()).
        SetOption2NonCompat(*patch.NewI32Patch()).
        SetOption3NonCompat(*NewInnerUnionPatch())
}

func (x *MyUnionFieldPatch) GetOption1() *patch.StringPatch {
    if !x.IsSetOption1() {
        return nil
    }

    return x.Option1
}

func (x *MyUnionFieldPatch) GetOption2() *patch.I32Patch {
    if !x.IsSetOption2() {
        return nil
    }

    return x.Option2
}

func (x *MyUnionFieldPatch) GetOption3() *InnerUnionPatch {
    if !x.IsSetOption3() {
        return nil
    }

    return x.Option3
}

func (x *MyUnionFieldPatch) SetOption1NonCompat(value patch.StringPatch) *MyUnionFieldPatch {
    x.Option1 = &value
    return x
}

func (x *MyUnionFieldPatch) SetOption1(value *patch.StringPatch) *MyUnionFieldPatch {
    x.Option1 = value
    return x
}

func (x *MyUnionFieldPatch) SetOption2NonCompat(value patch.I32Patch) *MyUnionFieldPatch {
    x.Option2 = &value
    return x
}

func (x *MyUnionFieldPatch) SetOption2(value *patch.I32Patch) *MyUnionFieldPatch {
    x.Option2 = value
    return x
}

func (x *MyUnionFieldPatch) SetOption3NonCompat(value InnerUnionPatch) *MyUnionFieldPatch {
    x.Option3 = &value
    return x
}

func (x *MyUnionFieldPatch) SetOption3(value *InnerUnionPatch) *MyUnionFieldPatch {
    x.Option3 = value
    return x
}

func (x *MyUnionFieldPatch) IsSetOption1() bool {
    return x != nil && x.Option1 != nil
}

func (x *MyUnionFieldPatch) IsSetOption2() bool {
    return x != nil && x.Option2 != nil
}

func (x *MyUnionFieldPatch) IsSetOption3() bool {
    return x != nil && x.Option3 != nil
}

func (x *MyUnionFieldPatch) writeField1(p thrift.Format) error {  // Option1
    if !x.IsSetOption1() {
        return nil
    }

    if err := p.WriteFieldBegin("option1", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Option1
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) writeField2(p thrift.Format) error {  // Option2
    if !x.IsSetOption2() {
        return nil
    }

    if err := p.WriteFieldBegin("option2", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Option2
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) writeField3(p thrift.Format) error {  // Option3
    if !x.IsSetOption3() {
        return nil
    }

    if err := p.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Option3
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) readField1(p thrift.Format) error {  // Option1
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Option1 = &result
    return nil
}

func (x *MyUnionFieldPatch) readField2(p thrift.Format) error {  // Option2
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Option2 = &result
    return nil
}

func (x *MyUnionFieldPatch) readField3(p thrift.Format) error {  // Option3
    result := *NewInnerUnionPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Option3 = &result
    return nil
}

func (x *MyUnionFieldPatch) toString1() string {  // Option1
    return fmt.Sprintf("%v", x.Option1)
}

func (x *MyUnionFieldPatch) toString2() string {  // Option2
    return fmt.Sprintf("%v", x.Option2)
}

func (x *MyUnionFieldPatch) toString3() string {  // Option3
    return fmt.Sprintf("%v", x.Option3)
}

// Deprecated: Use NewMyUnionFieldPatch().GetOption1() instead.
func (x *MyUnionFieldPatch) DefaultGetOption1() *patch.StringPatch {
    if !x.IsSetOption1() {
        return patch.NewStringPatch()
    }
    return x.Option1
}

// Deprecated: Use NewMyUnionFieldPatch().GetOption2() instead.
func (x *MyUnionFieldPatch) DefaultGetOption2() *patch.I32Patch {
    if !x.IsSetOption2() {
        return patch.NewI32Patch()
    }
    return x.Option2
}

// Deprecated: Use NewMyUnionFieldPatch().GetOption3() instead.
func (x *MyUnionFieldPatch) DefaultGetOption3() *InnerUnionPatch {
    if !x.IsSetOption3() {
        return NewInnerUnionPatch()
    }
    return x.Option3
}



func (x *MyUnionFieldPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyUnionFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // option1
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // option2
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // option3
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnionFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnionFieldPatch({")
    sb.WriteString(fmt.Sprintf("Option1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Option2:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Option3:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type MyUnionSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyUnionSafePatch)(nil)

func NewMyUnionSafePatch() *MyUnionSafePatch {
    return (&MyUnionSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *MyUnionSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *MyUnionSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *MyUnionSafePatch) SetVersionNonCompat(value int32) *MyUnionSafePatch {
    x.Version = value
    return x
}

func (x *MyUnionSafePatch) SetVersion(value int32) *MyUnionSafePatch {
    x.Version = value
    return x
}

func (x *MyUnionSafePatch) SetDataNonCompat(value []byte) *MyUnionSafePatch {
    x.Data = value
    return x
}

func (x *MyUnionSafePatch) SetData(value []byte) *MyUnionSafePatch {
    x.Data = value
    return x
}

func (x *MyUnionSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *MyUnionSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *MyUnionSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *MyUnionSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *MyUnionSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *MyUnionSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyUnionSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnionSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnionSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnionSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructPatch struct {
    Assign *MyStruct `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyStructFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyStructEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *MyStructFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructPatch)(nil)

func NewMyStructPatch() *MyStructPatch {
    return (&MyStructPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewMyStructFieldPatch()).
        SetEnsureNonCompat(*NewMyStructEnsureStruct()).
        SetPatchNonCompat(*NewMyStructFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *MyStructPatch) GetAssign() *MyStruct {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyStructPatch) GetClear() bool {
    return x.Clear
}

func (x *MyStructPatch) GetPatchPrior() *MyStructFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyStructPatch) GetEnsure() *MyStructEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *MyStructPatch) GetPatch() *MyStructFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyStructPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *MyStructPatch) SetAssignNonCompat(value MyStruct) *MyStructPatch {
    x.Assign = &value
    return x
}

func (x *MyStructPatch) SetAssign(value *MyStruct) *MyStructPatch {
    x.Assign = value
    return x
}

func (x *MyStructPatch) SetClearNonCompat(value bool) *MyStructPatch {
    x.Clear = value
    return x
}

func (x *MyStructPatch) SetClear(value bool) *MyStructPatch {
    x.Clear = value
    return x
}

func (x *MyStructPatch) SetPatchPriorNonCompat(value MyStructFieldPatch) *MyStructPatch {
    x.PatchPrior = &value
    return x
}

func (x *MyStructPatch) SetPatchPrior(value *MyStructFieldPatch) *MyStructPatch {
    x.PatchPrior = value
    return x
}

func (x *MyStructPatch) SetEnsureNonCompat(value MyStructEnsureStruct) *MyStructPatch {
    x.Ensure = &value
    return x
}

func (x *MyStructPatch) SetEnsure(value *MyStructEnsureStruct) *MyStructPatch {
    x.Ensure = value
    return x
}

func (x *MyStructPatch) SetPatchNonCompat(value MyStructFieldPatch) *MyStructPatch {
    x.Patch = &value
    return x
}

func (x *MyStructPatch) SetPatch(value *MyStructFieldPatch) *MyStructPatch {
    x.Patch = value
    return x
}

func (x *MyStructPatch) SetRemoveNonCompat(value patch.FieldIdList) *MyStructPatch {
    x.Remove = value
    return x
}

func (x *MyStructPatch) SetRemove(value patch.FieldIdList) *MyStructPatch {
    x.Remove = value
    return x
}

func (x *MyStructPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyStructPatch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *MyStructPatch) IsSetEnsure() bool {
    return x != nil && x.Ensure != nil
}

func (x *MyStructPatch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *MyStructPatch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *MyStructPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField3(p thrift.Format) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField5(p thrift.Format) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Ensure
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField6(p thrift.Format) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) readField1(p thrift.Format) error {  // Assign
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *MyStructPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyStructPatch) readField3(p thrift.Format) error {  // PatchPrior
    result := *NewMyStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.PatchPrior = &result
    return nil
}

func (x *MyStructPatch) readField5(p thrift.Format) error {  // Ensure
    result := *NewMyStructEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.Ensure = &result
    return nil
}

func (x *MyStructPatch) readField6(p thrift.Format) error {  // Patch
    result := *NewMyStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Patch = &result
    return nil
}

func (x *MyStructPatch) readField7(p thrift.Format) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.Remove = result
    return nil
}

func (x *MyStructPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyStructPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyStructPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *MyStructPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.Ensure)
}

func (x *MyStructPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *MyStructPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

// Deprecated: Use NewMyStructPatch().GetAssign() instead.
func (x *MyStructPatch) DefaultGetAssign() *MyStruct {
    if !x.IsSetAssign() {
        return NewMyStruct()
    }
    return x.Assign
}

// Deprecated: Use NewMyStructPatch().GetPatchPrior() instead.
func (x *MyStructPatch) DefaultGetPatchPrior() *MyStructFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewMyStructFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewMyStructPatch().GetEnsure() instead.
func (x *MyStructPatch) DefaultGetEnsure() *MyStructEnsureStruct {
    if !x.IsSetEnsure() {
        return NewMyStructEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewMyStructPatch().GetPatch() instead.
func (x *MyStructPatch) DefaultGetPatch() *MyStructFieldPatch {
    if !x.IsSetPatch() {
        return NewMyStructFieldPatch()
    }
    return x.Patch
}



func (x *MyStructPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.STRUCT)):  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField10Patch struct {
    Assign *MyEnum `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructField10Patch)(nil)

func NewMyStructField10Patch() *MyStructField10Patch {
    return (&MyStructField10Patch{}).
        SetClearNonCompat(false)
}

func (x *MyStructField10Patch) GetAssign() MyEnum {
    if !x.IsSetAssign() {
        return 0
    }

    return *x.Assign
}

func (x *MyStructField10Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField10Patch) SetAssignNonCompat(value MyEnum) *MyStructField10Patch {
    x.Assign = &value
    return x
}

func (x *MyStructField10Patch) SetAssign(value *MyEnum) *MyStructField10Patch {
    x.Assign = value
    return x
}

func (x *MyStructField10Patch) SetClearNonCompat(value bool) *MyStructField10Patch {
    x.Clear = value
    return x
}

func (x *MyStructField10Patch) SetClear(value bool) *MyStructField10Patch {
    x.Clear = value
    return x
}

func (x *MyStructField10Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyStructField10Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField10Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField10Patch) readField1(p thrift.Format) error {  // Assign
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.Assign = &result
    return nil
}

func (x *MyStructField10Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyStructField10Patch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyStructField10Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}




func (x *MyStructField10Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructField10Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField10Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField10Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField10Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField23Patch struct {
    Assign *MyEnum `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructField23Patch)(nil)

func NewMyStructField23Patch() *MyStructField23Patch {
    return (&MyStructField23Patch{}).
        SetClearNonCompat(false)
}

func (x *MyStructField23Patch) GetAssign() MyEnum {
    if !x.IsSetAssign() {
        return 0
    }

    return *x.Assign
}

func (x *MyStructField23Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField23Patch) SetAssignNonCompat(value MyEnum) *MyStructField23Patch {
    x.Assign = &value
    return x
}

func (x *MyStructField23Patch) SetAssign(value *MyEnum) *MyStructField23Patch {
    x.Assign = value
    return x
}

func (x *MyStructField23Patch) SetClearNonCompat(value bool) *MyStructField23Patch {
    x.Clear = value
    return x
}

func (x *MyStructField23Patch) SetClear(value bool) *MyStructField23Patch {
    x.Clear = value
    return x
}

func (x *MyStructField23Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyStructField23Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Assign
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField23Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField23Patch) readField1(p thrift.Format) error {  // Assign
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.Assign = &result
    return nil
}

func (x *MyStructField23Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyStructField23Patch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.Assign)
    }
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyStructField23Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}




func (x *MyStructField23Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructField23Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField23Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField23Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField23Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField26Patch struct {
    Assign []int16 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Prepend []int16 `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append []int16 `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructField26Patch)(nil)

func NewMyStructField26Patch() *MyStructField26Patch {
    return (&MyStructField26Patch{}).
        SetClearNonCompat(false).
        SetPrependNonCompat(make([]int16, 0)).
        SetAppendNonCompat(make([]int16, 0))
}

func (x *MyStructField26Patch) GetAssign() []int16 {
    if !x.IsSetAssign() {
        return make([]int16, 0)
    }

    return x.Assign
}

func (x *MyStructField26Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField26Patch) GetPrepend() []int16 {
    if !x.IsSetPrepend() {
        return make([]int16, 0)
    }

    return x.Prepend
}

func (x *MyStructField26Patch) GetAppend() []int16 {
    if !x.IsSetAppend() {
        return make([]int16, 0)
    }

    return x.Append
}

func (x *MyStructField26Patch) SetAssignNonCompat(value []int16) *MyStructField26Patch {
    x.Assign = value
    return x
}

func (x *MyStructField26Patch) SetAssign(value []int16) *MyStructField26Patch {
    x.Assign = value
    return x
}

func (x *MyStructField26Patch) SetClearNonCompat(value bool) *MyStructField26Patch {
    x.Clear = value
    return x
}

func (x *MyStructField26Patch) SetClear(value bool) *MyStructField26Patch {
    x.Clear = value
    return x
}

func (x *MyStructField26Patch) SetPrependNonCompat(value []int16) *MyStructField26Patch {
    x.Prepend = value
    return x
}

func (x *MyStructField26Patch) SetPrepend(value []int16) *MyStructField26Patch {
    x.Prepend = value
    return x
}

func (x *MyStructField26Patch) SetAppendNonCompat(value []int16) *MyStructField26Patch {
    x.Append = value
    return x
}

func (x *MyStructField26Patch) SetAppend(value []int16) *MyStructField26Patch {
    x.Append = value
    return x
}

func (x *MyStructField26Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyStructField26Patch) IsSetPrepend() bool {
    return x != nil && x.Prepend != nil
}

func (x *MyStructField26Patch) IsSetAppend() bool {
    return x != nil && x.Append != nil
}

func (x *MyStructField26Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField8(p thrift.Format) error {  // Prepend
    if err := p.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Prepend
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField9(p thrift.Format) error {  // Append
    if err := p.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Append
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) readField1(p thrift.Format) error {  // Assign
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Assign = result
    return nil
}

func (x *MyStructField26Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyStructField26Patch) readField8(p thrift.Format) error {  // Prepend
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Prepend = result
    return nil
}

func (x *MyStructField26Patch) readField9(p thrift.Format) error {  // Append
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Append = result
    return nil
}

func (x *MyStructField26Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyStructField26Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyStructField26Patch) toString8() string {  // Prepend
    return fmt.Sprintf("%v", x.Prepend)
}

func (x *MyStructField26Patch) toString9() string {  // Append
    return fmt.Sprintf("%v", x.Append)
}



func (x *MyStructField26Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructField26Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.LIST)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.LIST)):  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.LIST)):  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField26Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField26Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Prepend:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("Append:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField27Patch struct {
    Assign []string `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Add []string `thrift:"add,8" json:"add" db:"add"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructField27Patch)(nil)

func NewMyStructField27Patch() *MyStructField27Patch {
    return (&MyStructField27Patch{}).
        SetClearNonCompat(false).
        SetRemoveNonCompat(make([]string, 0)).
        SetAddNonCompat(make([]string, 0))
}

func (x *MyStructField27Patch) GetAssign() []string {
    if !x.IsSetAssign() {
        return make([]string, 0)
    }

    return x.Assign
}

func (x *MyStructField27Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField27Patch) GetRemove() []string {
    if !x.IsSetRemove() {
        return make([]string, 0)
    }

    return x.Remove
}

func (x *MyStructField27Patch) GetAdd() []string {
    if !x.IsSetAdd() {
        return make([]string, 0)
    }

    return x.Add
}

func (x *MyStructField27Patch) SetAssignNonCompat(value []string) *MyStructField27Patch {
    x.Assign = value
    return x
}

func (x *MyStructField27Patch) SetAssign(value []string) *MyStructField27Patch {
    x.Assign = value
    return x
}

func (x *MyStructField27Patch) SetClearNonCompat(value bool) *MyStructField27Patch {
    x.Clear = value
    return x
}

func (x *MyStructField27Patch) SetClear(value bool) *MyStructField27Patch {
    x.Clear = value
    return x
}

func (x *MyStructField27Patch) SetRemoveNonCompat(value []string) *MyStructField27Patch {
    x.Remove = value
    return x
}

func (x *MyStructField27Patch) SetRemove(value []string) *MyStructField27Patch {
    x.Remove = value
    return x
}

func (x *MyStructField27Patch) SetAddNonCompat(value []string) *MyStructField27Patch {
    x.Add = value
    return x
}

func (x *MyStructField27Patch) SetAdd(value []string) *MyStructField27Patch {
    x.Add = value
    return x
}

func (x *MyStructField27Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyStructField27Patch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *MyStructField27Patch) IsSetAdd() bool {
    return x != nil && x.Add != nil
}

func (x *MyStructField27Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.SET, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) writeField8(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.SET, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) readField1(p thrift.Format) error {  // Assign
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.Assign = result
    return nil
}

func (x *MyStructField27Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyStructField27Patch) readField7(p thrift.Format) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.Remove = result
    return nil
}

func (x *MyStructField27Patch) readField8(p thrift.Format) error {  // Add
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.Add = result
    return nil
}

func (x *MyStructField27Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyStructField27Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyStructField27Patch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

func (x *MyStructField27Patch) toString8() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}



func (x *MyStructField27Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructField27Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.SET)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.SET)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.SET)):  // add
            if err := x.readField8(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField27Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField27Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Remove:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("Add:%s", x.toString8()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField28Patch struct {
    Assign map[string]string `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*patch.StringPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]string `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*patch.StringPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]string `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructField28Patch)(nil)

func NewMyStructField28Patch() *MyStructField28Patch {
    return (&MyStructField28Patch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(make(map[string]*patch.StringPatch)).
        SetAddNonCompat(make(map[string]string)).
        SetPatchNonCompat(make(map[string]*patch.StringPatch)).
        SetRemoveNonCompat(make([]string, 0)).
        SetPutNonCompat(make(map[string]string))
}

func (x *MyStructField28Patch) GetAssign() map[string]string {
    if !x.IsSetAssign() {
        return make(map[string]string)
    }

    return x.Assign
}

func (x *MyStructField28Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField28Patch) GetPatchPrior() map[string]*patch.StringPatch {
    if !x.IsSetPatchPrior() {
        return make(map[string]*patch.StringPatch)
    }

    return x.PatchPrior
}

func (x *MyStructField28Patch) GetAdd() map[string]string {
    if !x.IsSetAdd() {
        return make(map[string]string)
    }

    return x.Add
}

func (x *MyStructField28Patch) GetPatch() map[string]*patch.StringPatch {
    if !x.IsSetPatch() {
        return make(map[string]*patch.StringPatch)
    }

    return x.Patch
}

func (x *MyStructField28Patch) GetRemove() []string {
    if !x.IsSetRemove() {
        return make([]string, 0)
    }

    return x.Remove
}

func (x *MyStructField28Patch) GetPut() map[string]string {
    if !x.IsSetPut() {
        return make(map[string]string)
    }

    return x.Put
}

func (x *MyStructField28Patch) SetAssignNonCompat(value map[string]string) *MyStructField28Patch {
    x.Assign = value
    return x
}

func (x *MyStructField28Patch) SetAssign(value map[string]string) *MyStructField28Patch {
    x.Assign = value
    return x
}

func (x *MyStructField28Patch) SetClearNonCompat(value bool) *MyStructField28Patch {
    x.Clear = value
    return x
}

func (x *MyStructField28Patch) SetClear(value bool) *MyStructField28Patch {
    x.Clear = value
    return x
}

func (x *MyStructField28Patch) SetPatchPriorNonCompat(value map[string]*patch.StringPatch) *MyStructField28Patch {
    x.PatchPrior = value
    return x
}

func (x *MyStructField28Patch) SetPatchPrior(value map[string]*patch.StringPatch) *MyStructField28Patch {
    x.PatchPrior = value
    return x
}

func (x *MyStructField28Patch) SetAddNonCompat(value map[string]string) *MyStructField28Patch {
    x.Add = value
    return x
}

func (x *MyStructField28Patch) SetAdd(value map[string]string) *MyStructField28Patch {
    x.Add = value
    return x
}

func (x *MyStructField28Patch) SetPatchNonCompat(value map[string]*patch.StringPatch) *MyStructField28Patch {
    x.Patch = value
    return x
}

func (x *MyStructField28Patch) SetPatch(value map[string]*patch.StringPatch) *MyStructField28Patch {
    x.Patch = value
    return x
}

func (x *MyStructField28Patch) SetRemoveNonCompat(value []string) *MyStructField28Patch {
    x.Remove = value
    return x
}

func (x *MyStructField28Patch) SetRemove(value []string) *MyStructField28Patch {
    x.Remove = value
    return x
}

func (x *MyStructField28Patch) SetPutNonCompat(value map[string]string) *MyStructField28Patch {
    x.Put = value
    return x
}

func (x *MyStructField28Patch) SetPut(value map[string]string) *MyStructField28Patch {
    x.Put = value
    return x
}

func (x *MyStructField28Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyStructField28Patch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *MyStructField28Patch) IsSetAdd() bool {
    return x != nil && x.Add != nil
}

func (x *MyStructField28Patch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *MyStructField28Patch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *MyStructField28Patch) IsSetPut() bool {
    return x != nil && x.Put != nil
}

func (x *MyStructField28Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField3(p thrift.Format) error {  // PatchPrior
    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField5(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField6(p thrift.Format) error {  // Patch
    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField9(p thrift.Format) error {  // Put
    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Put
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) readField1(p thrift.Format) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Assign = result
    return nil
}

func (x *MyStructField28Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyStructField28Patch) readField3(p thrift.Format) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.StringPatch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.StringPatch
    {
        result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.PatchPrior = result
    return nil
}

func (x *MyStructField28Patch) readField5(p thrift.Format) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Add = result
    return nil
}

func (x *MyStructField28Patch) readField6(p thrift.Format) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.StringPatch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.StringPatch
    {
        result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Patch = result
    return nil
}

func (x *MyStructField28Patch) readField7(p thrift.Format) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.Remove = result
    return nil
}

func (x *MyStructField28Patch) readField9(p thrift.Format) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Put = result
    return nil
}

func (x *MyStructField28Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyStructField28Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyStructField28Patch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *MyStructField28Patch) toString5() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}

func (x *MyStructField28Patch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *MyStructField28Patch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

func (x *MyStructField28Patch) toString9() string {  // Put
    return fmt.Sprintf("%v", x.Put)
}



func (x *MyStructField28Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructField28Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.MAP)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.MAP)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.MAP)):  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.MAP)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.SET)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.MAP)):  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField28Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField28Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Add:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("Put:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField29Patch struct {
    Assign []map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Prepend []map[string]int32 `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append []map[string]int32 `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructField29Patch)(nil)

func NewMyStructField29Patch() *MyStructField29Patch {
    return (&MyStructField29Patch{}).
        SetClearNonCompat(false).
        SetPrependNonCompat(make([]map[string]int32, 0)).
        SetAppendNonCompat(make([]map[string]int32, 0))
}

func (x *MyStructField29Patch) GetAssign() []map[string]int32 {
    if !x.IsSetAssign() {
        return make([]map[string]int32, 0)
    }

    return x.Assign
}

func (x *MyStructField29Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField29Patch) GetPrepend() []map[string]int32 {
    if !x.IsSetPrepend() {
        return make([]map[string]int32, 0)
    }

    return x.Prepend
}

func (x *MyStructField29Patch) GetAppend() []map[string]int32 {
    if !x.IsSetAppend() {
        return make([]map[string]int32, 0)
    }

    return x.Append
}

func (x *MyStructField29Patch) SetAssignNonCompat(value []map[string]int32) *MyStructField29Patch {
    x.Assign = value
    return x
}

func (x *MyStructField29Patch) SetAssign(value []map[string]int32) *MyStructField29Patch {
    x.Assign = value
    return x
}

func (x *MyStructField29Patch) SetClearNonCompat(value bool) *MyStructField29Patch {
    x.Clear = value
    return x
}

func (x *MyStructField29Patch) SetClear(value bool) *MyStructField29Patch {
    x.Clear = value
    return x
}

func (x *MyStructField29Patch) SetPrependNonCompat(value []map[string]int32) *MyStructField29Patch {
    x.Prepend = value
    return x
}

func (x *MyStructField29Patch) SetPrepend(value []map[string]int32) *MyStructField29Patch {
    x.Prepend = value
    return x
}

func (x *MyStructField29Patch) SetAppendNonCompat(value []map[string]int32) *MyStructField29Patch {
    x.Append = value
    return x
}

func (x *MyStructField29Patch) SetAppend(value []map[string]int32) *MyStructField29Patch {
    x.Append = value
    return x
}

func (x *MyStructField29Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyStructField29Patch) IsSetPrepend() bool {
    return x != nil && x.Prepend != nil
}

func (x *MyStructField29Patch) IsSetAppend() bool {
    return x != nil && x.Append != nil
}

func (x *MyStructField29Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField8(p thrift.Format) error {  // Prepend
    if err := p.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Prepend
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField9(p thrift.Format) error {  // Append
    if err := p.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Append
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) readField1(p thrift.Format) error {  // Assign
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Assign = result
    return nil
}

func (x *MyStructField29Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyStructField29Patch) readField8(p thrift.Format) error {  // Prepend
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Prepend = result
    return nil
}

func (x *MyStructField29Patch) readField9(p thrift.Format) error {  // Append
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Append = result
    return nil
}

func (x *MyStructField29Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyStructField29Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyStructField29Patch) toString8() string {  // Prepend
    return fmt.Sprintf("%v", x.Prepend)
}

func (x *MyStructField29Patch) toString9() string {  // Append
    return fmt.Sprintf("%v", x.Append)
}



func (x *MyStructField29Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructField29Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.LIST)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.LIST)):  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.LIST)):  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField29Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField29Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Prepend:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("Append:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField30Patch struct {
    Assign map[string]map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*MyStructField30Patch1 `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]map[string]int32 `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*MyStructField30Patch1 `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]map[string]int32 `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructField30Patch)(nil)

func NewMyStructField30Patch() *MyStructField30Patch {
    return (&MyStructField30Patch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(make(map[string]*MyStructField30Patch1)).
        SetAddNonCompat(make(map[string]map[string]int32)).
        SetPatchNonCompat(make(map[string]*MyStructField30Patch1)).
        SetRemoveNonCompat(make([]string, 0)).
        SetPutNonCompat(make(map[string]map[string]int32))
}

func (x *MyStructField30Patch) GetAssign() map[string]map[string]int32 {
    if !x.IsSetAssign() {
        return make(map[string]map[string]int32)
    }

    return x.Assign
}

func (x *MyStructField30Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField30Patch) GetPatchPrior() map[string]*MyStructField30Patch1 {
    if !x.IsSetPatchPrior() {
        return make(map[string]*MyStructField30Patch1)
    }

    return x.PatchPrior
}

func (x *MyStructField30Patch) GetAdd() map[string]map[string]int32 {
    if !x.IsSetAdd() {
        return make(map[string]map[string]int32)
    }

    return x.Add
}

func (x *MyStructField30Patch) GetPatch() map[string]*MyStructField30Patch1 {
    if !x.IsSetPatch() {
        return make(map[string]*MyStructField30Patch1)
    }

    return x.Patch
}

func (x *MyStructField30Patch) GetRemove() []string {
    if !x.IsSetRemove() {
        return make([]string, 0)
    }

    return x.Remove
}

func (x *MyStructField30Patch) GetPut() map[string]map[string]int32 {
    if !x.IsSetPut() {
        return make(map[string]map[string]int32)
    }

    return x.Put
}

func (x *MyStructField30Patch) SetAssignNonCompat(value map[string]map[string]int32) *MyStructField30Patch {
    x.Assign = value
    return x
}

func (x *MyStructField30Patch) SetAssign(value map[string]map[string]int32) *MyStructField30Patch {
    x.Assign = value
    return x
}

func (x *MyStructField30Patch) SetClearNonCompat(value bool) *MyStructField30Patch {
    x.Clear = value
    return x
}

func (x *MyStructField30Patch) SetClear(value bool) *MyStructField30Patch {
    x.Clear = value
    return x
}

func (x *MyStructField30Patch) SetPatchPriorNonCompat(value map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.PatchPrior = value
    return x
}

func (x *MyStructField30Patch) SetPatchPrior(value map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.PatchPrior = value
    return x
}

func (x *MyStructField30Patch) SetAddNonCompat(value map[string]map[string]int32) *MyStructField30Patch {
    x.Add = value
    return x
}

func (x *MyStructField30Patch) SetAdd(value map[string]map[string]int32) *MyStructField30Patch {
    x.Add = value
    return x
}

func (x *MyStructField30Patch) SetPatchNonCompat(value map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.Patch = value
    return x
}

func (x *MyStructField30Patch) SetPatch(value map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.Patch = value
    return x
}

func (x *MyStructField30Patch) SetRemoveNonCompat(value []string) *MyStructField30Patch {
    x.Remove = value
    return x
}

func (x *MyStructField30Patch) SetRemove(value []string) *MyStructField30Patch {
    x.Remove = value
    return x
}

func (x *MyStructField30Patch) SetPutNonCompat(value map[string]map[string]int32) *MyStructField30Patch {
    x.Put = value
    return x
}

func (x *MyStructField30Patch) SetPut(value map[string]map[string]int32) *MyStructField30Patch {
    x.Put = value
    return x
}

func (x *MyStructField30Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyStructField30Patch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *MyStructField30Patch) IsSetAdd() bool {
    return x != nil && x.Add != nil
}

func (x *MyStructField30Patch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *MyStructField30Patch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *MyStructField30Patch) IsSetPut() bool {
    return x != nil && x.Put != nil
}

func (x *MyStructField30Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField3(p thrift.Format) error {  // PatchPrior
    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField5(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField6(p thrift.Format) error {  // Patch
    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField9(p thrift.Format) error {  // Put
    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Put
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) readField1(p thrift.Format) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Assign = result
    return nil
}

func (x *MyStructField30Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyStructField30Patch) readField3(p thrift.Format) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*MyStructField30Patch1, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *MyStructField30Patch1
    {
        result := *NewMyStructField30Patch1()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.PatchPrior = result
    return nil
}

func (x *MyStructField30Patch) readField5(p thrift.Format) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Add = result
    return nil
}

func (x *MyStructField30Patch) readField6(p thrift.Format) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*MyStructField30Patch1, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *MyStructField30Patch1
    {
        result := *NewMyStructField30Patch1()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Patch = result
    return nil
}

func (x *MyStructField30Patch) readField7(p thrift.Format) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.Remove = result
    return nil
}

func (x *MyStructField30Patch) readField9(p thrift.Format) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Put = result
    return nil
}

func (x *MyStructField30Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyStructField30Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyStructField30Patch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *MyStructField30Patch) toString5() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}

func (x *MyStructField30Patch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *MyStructField30Patch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

func (x *MyStructField30Patch) toString9() string {  // Put
    return fmt.Sprintf("%v", x.Put)
}



func (x *MyStructField30Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructField30Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.MAP)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.MAP)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.MAP)):  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.MAP)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.SET)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.MAP)):  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField30Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField30Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Add:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("Put:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField30Patch1 struct {
    Assign map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*patch.I32Patch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]int32 `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*patch.I32Patch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]int32 `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructField30Patch1)(nil)

func NewMyStructField30Patch1() *MyStructField30Patch1 {
    return (&MyStructField30Patch1{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(make(map[string]*patch.I32Patch)).
        SetAddNonCompat(make(map[string]int32)).
        SetPatchNonCompat(make(map[string]*patch.I32Patch)).
        SetRemoveNonCompat(make([]string, 0)).
        SetPutNonCompat(make(map[string]int32))
}

func (x *MyStructField30Patch1) GetAssign() map[string]int32 {
    if !x.IsSetAssign() {
        return make(map[string]int32)
    }

    return x.Assign
}

func (x *MyStructField30Patch1) GetClear() bool {
    return x.Clear
}

func (x *MyStructField30Patch1) GetPatchPrior() map[string]*patch.I32Patch {
    if !x.IsSetPatchPrior() {
        return make(map[string]*patch.I32Patch)
    }

    return x.PatchPrior
}

func (x *MyStructField30Patch1) GetAdd() map[string]int32 {
    if !x.IsSetAdd() {
        return make(map[string]int32)
    }

    return x.Add
}

func (x *MyStructField30Patch1) GetPatch() map[string]*patch.I32Patch {
    if !x.IsSetPatch() {
        return make(map[string]*patch.I32Patch)
    }

    return x.Patch
}

func (x *MyStructField30Patch1) GetRemove() []string {
    if !x.IsSetRemove() {
        return make([]string, 0)
    }

    return x.Remove
}

func (x *MyStructField30Patch1) GetPut() map[string]int32 {
    if !x.IsSetPut() {
        return make(map[string]int32)
    }

    return x.Put
}

func (x *MyStructField30Patch1) SetAssignNonCompat(value map[string]int32) *MyStructField30Patch1 {
    x.Assign = value
    return x
}

func (x *MyStructField30Patch1) SetAssign(value map[string]int32) *MyStructField30Patch1 {
    x.Assign = value
    return x
}

func (x *MyStructField30Patch1) SetClearNonCompat(value bool) *MyStructField30Patch1 {
    x.Clear = value
    return x
}

func (x *MyStructField30Patch1) SetClear(value bool) *MyStructField30Patch1 {
    x.Clear = value
    return x
}

func (x *MyStructField30Patch1) SetPatchPriorNonCompat(value map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.PatchPrior = value
    return x
}

func (x *MyStructField30Patch1) SetPatchPrior(value map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.PatchPrior = value
    return x
}

func (x *MyStructField30Patch1) SetAddNonCompat(value map[string]int32) *MyStructField30Patch1 {
    x.Add = value
    return x
}

func (x *MyStructField30Patch1) SetAdd(value map[string]int32) *MyStructField30Patch1 {
    x.Add = value
    return x
}

func (x *MyStructField30Patch1) SetPatchNonCompat(value map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.Patch = value
    return x
}

func (x *MyStructField30Patch1) SetPatch(value map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.Patch = value
    return x
}

func (x *MyStructField30Patch1) SetRemoveNonCompat(value []string) *MyStructField30Patch1 {
    x.Remove = value
    return x
}

func (x *MyStructField30Patch1) SetRemove(value []string) *MyStructField30Patch1 {
    x.Remove = value
    return x
}

func (x *MyStructField30Patch1) SetPutNonCompat(value map[string]int32) *MyStructField30Patch1 {
    x.Put = value
    return x
}

func (x *MyStructField30Patch1) SetPut(value map[string]int32) *MyStructField30Patch1 {
    x.Put = value
    return x
}

func (x *MyStructField30Patch1) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *MyStructField30Patch1) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *MyStructField30Patch1) IsSetAdd() bool {
    return x != nil && x.Add != nil
}

func (x *MyStructField30Patch1) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *MyStructField30Patch1) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *MyStructField30Patch1) IsSetPut() bool {
    return x != nil && x.Put != nil
}

func (x *MyStructField30Patch1) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField3(p thrift.Format) error {  // PatchPrior
    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField5(p thrift.Format) error {  // Add
    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Add
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField6(p thrift.Format) error {  // Patch
    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField9(p thrift.Format) error {  // Put
    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Put
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) readField1(p thrift.Format) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Assign = result
    return nil
}

func (x *MyStructField30Patch1) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *MyStructField30Patch1) readField3(p thrift.Format) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.I32Patch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.I32Patch
    {
        result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.PatchPrior = result
    return nil
}

func (x *MyStructField30Patch1) readField5(p thrift.Format) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Add = result
    return nil
}

func (x *MyStructField30Patch1) readField6(p thrift.Format) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.I32Patch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.I32Patch
    {
        result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Patch = result
    return nil
}

func (x *MyStructField30Patch1) readField7(p thrift.Format) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.Remove = result
    return nil
}

func (x *MyStructField30Patch1) readField9(p thrift.Format) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Put = result
    return nil
}

func (x *MyStructField30Patch1) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *MyStructField30Patch1) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *MyStructField30Patch1) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *MyStructField30Patch1) toString5() string {  // Add
    return fmt.Sprintf("%v", x.Add)
}

func (x *MyStructField30Patch1) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *MyStructField30Patch1) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

func (x *MyStructField30Patch1) toString9() string {  // Put
    return fmt.Sprintf("%v", x.Put)
}



func (x *MyStructField30Patch1) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructField30Patch1"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.MAP)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.MAP)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.MAP)):  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.MAP)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.SET)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.MAP)):  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField30Patch1) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField30Patch1({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Add:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("Put:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructFieldPatch struct {
    StructWithCustomDefault *MyDataWithCustomDefaultPatch `thrift:"structWithCustomDefault,-32" json:"structWithCustomDefault" db:"structWithCustomDefault"`
    I32WithCustomDefault *patch.I32Patch `thrift:"i32WithCustomDefault,-31" json:"i32WithCustomDefault" db:"i32WithCustomDefault"`
    MapMap *MyStructField30Patch `thrift:"mapMap,-30" json:"mapMap" db:"mapMap"`
    ListMap *MyStructField29Patch `thrift:"listMap,-29" json:"listMap" db:"listMap"`
    OptMapVal *MyStructField28Patch `thrift:"optMapVal,-28" json:"optMapVal" db:"optMapVal"`
    OptSetVal *MyStructField27Patch `thrift:"optSetVal,-27" json:"optSetVal" db:"optSetVal"`
    OptListVal *MyStructField26Patch `thrift:"optListVal,-26" json:"optListVal" db:"optListVal"`
    OptLateStructVal *LateDefStructPatch `thrift:"optLateStructVal,-25" json:"optLateStructVal" db:"optLateStructVal"`
    OptStructVal *MyDataPatch `thrift:"optStructVal,-24" json:"optStructVal" db:"optStructVal"`
    OptEnumVal *MyStructField23Patch `thrift:"optEnumVal,-23" json:"optEnumVal" db:"optEnumVal"`
    OptBinaryVal *patch.BinaryPatch `thrift:"optBinaryVal,-22" json:"optBinaryVal" db:"optBinaryVal"`
    OptStringVal *patch.StringPatch `thrift:"optStringVal,-21" json:"optStringVal" db:"optStringVal"`
    OptDoubleVal *patch.DoublePatch `thrift:"optDoubleVal,-20" json:"optDoubleVal" db:"optDoubleVal"`
    OptFloatVal *patch.FloatPatch `thrift:"optFloatVal,-19" json:"optFloatVal" db:"optFloatVal"`
    OptI64Val *patch.I64Patch `thrift:"optI64Val,-18" json:"optI64Val" db:"optI64Val"`
    OptI32Val *patch.I32Patch `thrift:"optI32Val,-17" json:"optI32Val" db:"optI32Val"`
    OptI16Val *patch.I16Patch `thrift:"optI16Val,-16" json:"optI16Val" db:"optI16Val"`
    OptByteVal *patch.BytePatch `thrift:"optByteVal,-15" json:"optByteVal" db:"optByteVal"`
    OptBoolVal *patch.BoolPatch `thrift:"optBoolVal,-14" json:"optBoolVal" db:"optBoolVal"`
    LateStructVal *LateDefStructPatch `thrift:"lateStructVal,-13" json:"lateStructVal" db:"lateStructVal"`
    UnionVal *MyUnionPatch `thrift:"unionVal,-12" json:"unionVal" db:"unionVal"`
    StructVal *MyDataPatch `thrift:"structVal,-11" json:"structVal" db:"structVal"`
    EnumVal *MyStructField10Patch `thrift:"enumVal,-10" json:"enumVal" db:"enumVal"`
    BinaryVal *patch.BinaryPatch `thrift:"binaryVal,-9" json:"binaryVal" db:"binaryVal"`
    StringVal *patch.StringPatch `thrift:"stringVal,-8" json:"stringVal" db:"stringVal"`
    DoubleVal *patch.DoublePatch `thrift:"doubleVal,-7" json:"doubleVal" db:"doubleVal"`
    FloatVal *patch.FloatPatch `thrift:"floatVal,-6" json:"floatVal" db:"floatVal"`
    I64Val *patch.I64Patch `thrift:"i64Val,-5" json:"i64Val" db:"i64Val"`
    I32Val *patch.I32Patch `thrift:"i32Val,-4" json:"i32Val" db:"i32Val"`
    I16Val *patch.I16Patch `thrift:"i16Val,-3" json:"i16Val" db:"i16Val"`
    ByteVal *patch.BytePatch `thrift:"byteVal,-2" json:"byteVal" db:"byteVal"`
    BoolVal *patch.BoolPatch `thrift:"boolVal,-1" json:"boolVal" db:"boolVal"`
    StructWithFieldCustomDefault *MyDataPatch `thrift:"structWithFieldCustomDefault,1" json:"structWithFieldCustomDefault" db:"structWithFieldCustomDefault"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructFieldPatch)(nil)

func NewMyStructFieldPatch() *MyStructFieldPatch {
    return (&MyStructFieldPatch{}).
        SetStructWithCustomDefaultNonCompat(*NewMyDataWithCustomDefaultPatch()).
        SetI32WithCustomDefaultNonCompat(*patch.NewI32Patch()).
        SetMapMapNonCompat(*NewMyStructField30Patch()).
        SetListMapNonCompat(*NewMyStructField29Patch()).
        SetOptMapValNonCompat(*NewMyStructField28Patch()).
        SetOptSetValNonCompat(*NewMyStructField27Patch()).
        SetOptListValNonCompat(*NewMyStructField26Patch()).
        SetOptLateStructValNonCompat(*NewLateDefStructPatch()).
        SetOptStructValNonCompat(*NewMyDataPatch()).
        SetOptEnumValNonCompat(*NewMyStructField23Patch()).
        SetOptBinaryValNonCompat(*patch.NewBinaryPatch()).
        SetOptStringValNonCompat(*patch.NewStringPatch()).
        SetOptDoubleValNonCompat(*patch.NewDoublePatch()).
        SetOptFloatValNonCompat(*patch.NewFloatPatch()).
        SetOptI64ValNonCompat(*patch.NewI64Patch()).
        SetOptI32ValNonCompat(*patch.NewI32Patch()).
        SetOptI16ValNonCompat(*patch.NewI16Patch()).
        SetOptByteValNonCompat(*patch.NewBytePatch()).
        SetOptBoolValNonCompat(*patch.NewBoolPatch()).
        SetLateStructValNonCompat(*NewLateDefStructPatch()).
        SetUnionValNonCompat(*NewMyUnionPatch()).
        SetStructValNonCompat(*NewMyDataPatch()).
        SetEnumValNonCompat(*NewMyStructField10Patch()).
        SetBinaryValNonCompat(*patch.NewBinaryPatch()).
        SetStringValNonCompat(*patch.NewStringPatch()).
        SetDoubleValNonCompat(*patch.NewDoublePatch()).
        SetFloatValNonCompat(*patch.NewFloatPatch()).
        SetI64ValNonCompat(*patch.NewI64Patch()).
        SetI32ValNonCompat(*patch.NewI32Patch()).
        SetI16ValNonCompat(*patch.NewI16Patch()).
        SetByteValNonCompat(*patch.NewBytePatch()).
        SetBoolValNonCompat(*patch.NewBoolPatch()).
        SetStructWithFieldCustomDefaultNonCompat(*NewMyDataPatch())
}

func (x *MyStructFieldPatch) GetStructWithCustomDefault() *MyDataWithCustomDefaultPatch {
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    return x.StructWithCustomDefault
}

func (x *MyStructFieldPatch) GetI32WithCustomDefault() *patch.I32Patch {
    if !x.IsSetI32WithCustomDefault() {
        return nil
    }

    return x.I32WithCustomDefault
}

func (x *MyStructFieldPatch) GetMapMap() *MyStructField30Patch {
    if !x.IsSetMapMap() {
        return nil
    }

    return x.MapMap
}

func (x *MyStructFieldPatch) GetListMap() *MyStructField29Patch {
    if !x.IsSetListMap() {
        return nil
    }

    return x.ListMap
}

func (x *MyStructFieldPatch) GetOptMapVal() *MyStructField28Patch {
    if !x.IsSetOptMapVal() {
        return nil
    }

    return x.OptMapVal
}

func (x *MyStructFieldPatch) GetOptSetVal() *MyStructField27Patch {
    if !x.IsSetOptSetVal() {
        return nil
    }

    return x.OptSetVal
}

func (x *MyStructFieldPatch) GetOptListVal() *MyStructField26Patch {
    if !x.IsSetOptListVal() {
        return nil
    }

    return x.OptListVal
}

func (x *MyStructFieldPatch) GetOptLateStructVal() *LateDefStructPatch {
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    return x.OptLateStructVal
}

func (x *MyStructFieldPatch) GetOptStructVal() *MyDataPatch {
    if !x.IsSetOptStructVal() {
        return nil
    }

    return x.OptStructVal
}

func (x *MyStructFieldPatch) GetOptEnumVal() *MyStructField23Patch {
    if !x.IsSetOptEnumVal() {
        return nil
    }

    return x.OptEnumVal
}

func (x *MyStructFieldPatch) GetOptBinaryVal() *patch.BinaryPatch {
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    return x.OptBinaryVal
}

func (x *MyStructFieldPatch) GetOptStringVal() *patch.StringPatch {
    if !x.IsSetOptStringVal() {
        return nil
    }

    return x.OptStringVal
}

func (x *MyStructFieldPatch) GetOptDoubleVal() *patch.DoublePatch {
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    return x.OptDoubleVal
}

func (x *MyStructFieldPatch) GetOptFloatVal() *patch.FloatPatch {
    if !x.IsSetOptFloatVal() {
        return nil
    }

    return x.OptFloatVal
}

func (x *MyStructFieldPatch) GetOptI64Val() *patch.I64Patch {
    if !x.IsSetOptI64Val() {
        return nil
    }

    return x.OptI64Val
}

func (x *MyStructFieldPatch) GetOptI32Val() *patch.I32Patch {
    if !x.IsSetOptI32Val() {
        return nil
    }

    return x.OptI32Val
}

func (x *MyStructFieldPatch) GetOptI16Val() *patch.I16Patch {
    if !x.IsSetOptI16Val() {
        return nil
    }

    return x.OptI16Val
}

func (x *MyStructFieldPatch) GetOptByteVal() *patch.BytePatch {
    if !x.IsSetOptByteVal() {
        return nil
    }

    return x.OptByteVal
}

func (x *MyStructFieldPatch) GetOptBoolVal() *patch.BoolPatch {
    if !x.IsSetOptBoolVal() {
        return nil
    }

    return x.OptBoolVal
}

func (x *MyStructFieldPatch) GetLateStructVal() *LateDefStructPatch {
    if !x.IsSetLateStructVal() {
        return nil
    }

    return x.LateStructVal
}

func (x *MyStructFieldPatch) GetUnionVal() *MyUnionPatch {
    if !x.IsSetUnionVal() {
        return nil
    }

    return x.UnionVal
}

func (x *MyStructFieldPatch) GetStructVal() *MyDataPatch {
    if !x.IsSetStructVal() {
        return nil
    }

    return x.StructVal
}

func (x *MyStructFieldPatch) GetEnumVal() *MyStructField10Patch {
    if !x.IsSetEnumVal() {
        return nil
    }

    return x.EnumVal
}

func (x *MyStructFieldPatch) GetBinaryVal() *patch.BinaryPatch {
    if !x.IsSetBinaryVal() {
        return nil
    }

    return x.BinaryVal
}

func (x *MyStructFieldPatch) GetStringVal() *patch.StringPatch {
    if !x.IsSetStringVal() {
        return nil
    }

    return x.StringVal
}

func (x *MyStructFieldPatch) GetDoubleVal() *patch.DoublePatch {
    if !x.IsSetDoubleVal() {
        return nil
    }

    return x.DoubleVal
}

func (x *MyStructFieldPatch) GetFloatVal() *patch.FloatPatch {
    if !x.IsSetFloatVal() {
        return nil
    }

    return x.FloatVal
}

func (x *MyStructFieldPatch) GetI64Val() *patch.I64Patch {
    if !x.IsSetI64Val() {
        return nil
    }

    return x.I64Val
}

func (x *MyStructFieldPatch) GetI32Val() *patch.I32Patch {
    if !x.IsSetI32Val() {
        return nil
    }

    return x.I32Val
}

func (x *MyStructFieldPatch) GetI16Val() *patch.I16Patch {
    if !x.IsSetI16Val() {
        return nil
    }

    return x.I16Val
}

func (x *MyStructFieldPatch) GetByteVal() *patch.BytePatch {
    if !x.IsSetByteVal() {
        return nil
    }

    return x.ByteVal
}

func (x *MyStructFieldPatch) GetBoolVal() *patch.BoolPatch {
    if !x.IsSetBoolVal() {
        return nil
    }

    return x.BoolVal
}

func (x *MyStructFieldPatch) GetStructWithFieldCustomDefault() *MyDataPatch {
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    return x.StructWithFieldCustomDefault
}

func (x *MyStructFieldPatch) SetStructWithCustomDefaultNonCompat(value MyDataWithCustomDefaultPatch) *MyStructFieldPatch {
    x.StructWithCustomDefault = &value
    return x
}

func (x *MyStructFieldPatch) SetStructWithCustomDefault(value *MyDataWithCustomDefaultPatch) *MyStructFieldPatch {
    x.StructWithCustomDefault = value
    return x
}

func (x *MyStructFieldPatch) SetI32WithCustomDefaultNonCompat(value patch.I32Patch) *MyStructFieldPatch {
    x.I32WithCustomDefault = &value
    return x
}

func (x *MyStructFieldPatch) SetI32WithCustomDefault(value *patch.I32Patch) *MyStructFieldPatch {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStructFieldPatch) SetMapMapNonCompat(value MyStructField30Patch) *MyStructFieldPatch {
    x.MapMap = &value
    return x
}

func (x *MyStructFieldPatch) SetMapMap(value *MyStructField30Patch) *MyStructFieldPatch {
    x.MapMap = value
    return x
}

func (x *MyStructFieldPatch) SetListMapNonCompat(value MyStructField29Patch) *MyStructFieldPatch {
    x.ListMap = &value
    return x
}

func (x *MyStructFieldPatch) SetListMap(value *MyStructField29Patch) *MyStructFieldPatch {
    x.ListMap = value
    return x
}

func (x *MyStructFieldPatch) SetOptMapValNonCompat(value MyStructField28Patch) *MyStructFieldPatch {
    x.OptMapVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptMapVal(value *MyStructField28Patch) *MyStructFieldPatch {
    x.OptMapVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptSetValNonCompat(value MyStructField27Patch) *MyStructFieldPatch {
    x.OptSetVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptSetVal(value *MyStructField27Patch) *MyStructFieldPatch {
    x.OptSetVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptListValNonCompat(value MyStructField26Patch) *MyStructFieldPatch {
    x.OptListVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptListVal(value *MyStructField26Patch) *MyStructFieldPatch {
    x.OptListVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptLateStructValNonCompat(value LateDefStructPatch) *MyStructFieldPatch {
    x.OptLateStructVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptLateStructVal(value *LateDefStructPatch) *MyStructFieldPatch {
    x.OptLateStructVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptStructValNonCompat(value MyDataPatch) *MyStructFieldPatch {
    x.OptStructVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptStructVal(value *MyDataPatch) *MyStructFieldPatch {
    x.OptStructVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptEnumValNonCompat(value MyStructField23Patch) *MyStructFieldPatch {
    x.OptEnumVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptEnumVal(value *MyStructField23Patch) *MyStructFieldPatch {
    x.OptEnumVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptBinaryValNonCompat(value patch.BinaryPatch) *MyStructFieldPatch {
    x.OptBinaryVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptBinaryVal(value *patch.BinaryPatch) *MyStructFieldPatch {
    x.OptBinaryVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptStringValNonCompat(value patch.StringPatch) *MyStructFieldPatch {
    x.OptStringVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptStringVal(value *patch.StringPatch) *MyStructFieldPatch {
    x.OptStringVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptDoubleValNonCompat(value patch.DoublePatch) *MyStructFieldPatch {
    x.OptDoubleVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptDoubleVal(value *patch.DoublePatch) *MyStructFieldPatch {
    x.OptDoubleVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptFloatValNonCompat(value patch.FloatPatch) *MyStructFieldPatch {
    x.OptFloatVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptFloatVal(value *patch.FloatPatch) *MyStructFieldPatch {
    x.OptFloatVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptI64ValNonCompat(value patch.I64Patch) *MyStructFieldPatch {
    x.OptI64Val = &value
    return x
}

func (x *MyStructFieldPatch) SetOptI64Val(value *patch.I64Patch) *MyStructFieldPatch {
    x.OptI64Val = value
    return x
}

func (x *MyStructFieldPatch) SetOptI32ValNonCompat(value patch.I32Patch) *MyStructFieldPatch {
    x.OptI32Val = &value
    return x
}

func (x *MyStructFieldPatch) SetOptI32Val(value *patch.I32Patch) *MyStructFieldPatch {
    x.OptI32Val = value
    return x
}

func (x *MyStructFieldPatch) SetOptI16ValNonCompat(value patch.I16Patch) *MyStructFieldPatch {
    x.OptI16Val = &value
    return x
}

func (x *MyStructFieldPatch) SetOptI16Val(value *patch.I16Patch) *MyStructFieldPatch {
    x.OptI16Val = value
    return x
}

func (x *MyStructFieldPatch) SetOptByteValNonCompat(value patch.BytePatch) *MyStructFieldPatch {
    x.OptByteVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptByteVal(value *patch.BytePatch) *MyStructFieldPatch {
    x.OptByteVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptBoolValNonCompat(value patch.BoolPatch) *MyStructFieldPatch {
    x.OptBoolVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptBoolVal(value *patch.BoolPatch) *MyStructFieldPatch {
    x.OptBoolVal = value
    return x
}

func (x *MyStructFieldPatch) SetLateStructValNonCompat(value LateDefStructPatch) *MyStructFieldPatch {
    x.LateStructVal = &value
    return x
}

func (x *MyStructFieldPatch) SetLateStructVal(value *LateDefStructPatch) *MyStructFieldPatch {
    x.LateStructVal = value
    return x
}

func (x *MyStructFieldPatch) SetUnionValNonCompat(value MyUnionPatch) *MyStructFieldPatch {
    x.UnionVal = &value
    return x
}

func (x *MyStructFieldPatch) SetUnionVal(value *MyUnionPatch) *MyStructFieldPatch {
    x.UnionVal = value
    return x
}

func (x *MyStructFieldPatch) SetStructValNonCompat(value MyDataPatch) *MyStructFieldPatch {
    x.StructVal = &value
    return x
}

func (x *MyStructFieldPatch) SetStructVal(value *MyDataPatch) *MyStructFieldPatch {
    x.StructVal = value
    return x
}

func (x *MyStructFieldPatch) SetEnumValNonCompat(value MyStructField10Patch) *MyStructFieldPatch {
    x.EnumVal = &value
    return x
}

func (x *MyStructFieldPatch) SetEnumVal(value *MyStructField10Patch) *MyStructFieldPatch {
    x.EnumVal = value
    return x
}

func (x *MyStructFieldPatch) SetBinaryValNonCompat(value patch.BinaryPatch) *MyStructFieldPatch {
    x.BinaryVal = &value
    return x
}

func (x *MyStructFieldPatch) SetBinaryVal(value *patch.BinaryPatch) *MyStructFieldPatch {
    x.BinaryVal = value
    return x
}

func (x *MyStructFieldPatch) SetStringValNonCompat(value patch.StringPatch) *MyStructFieldPatch {
    x.StringVal = &value
    return x
}

func (x *MyStructFieldPatch) SetStringVal(value *patch.StringPatch) *MyStructFieldPatch {
    x.StringVal = value
    return x
}

func (x *MyStructFieldPatch) SetDoubleValNonCompat(value patch.DoublePatch) *MyStructFieldPatch {
    x.DoubleVal = &value
    return x
}

func (x *MyStructFieldPatch) SetDoubleVal(value *patch.DoublePatch) *MyStructFieldPatch {
    x.DoubleVal = value
    return x
}

func (x *MyStructFieldPatch) SetFloatValNonCompat(value patch.FloatPatch) *MyStructFieldPatch {
    x.FloatVal = &value
    return x
}

func (x *MyStructFieldPatch) SetFloatVal(value *patch.FloatPatch) *MyStructFieldPatch {
    x.FloatVal = value
    return x
}

func (x *MyStructFieldPatch) SetI64ValNonCompat(value patch.I64Patch) *MyStructFieldPatch {
    x.I64Val = &value
    return x
}

func (x *MyStructFieldPatch) SetI64Val(value *patch.I64Patch) *MyStructFieldPatch {
    x.I64Val = value
    return x
}

func (x *MyStructFieldPatch) SetI32ValNonCompat(value patch.I32Patch) *MyStructFieldPatch {
    x.I32Val = &value
    return x
}

func (x *MyStructFieldPatch) SetI32Val(value *patch.I32Patch) *MyStructFieldPatch {
    x.I32Val = value
    return x
}

func (x *MyStructFieldPatch) SetI16ValNonCompat(value patch.I16Patch) *MyStructFieldPatch {
    x.I16Val = &value
    return x
}

func (x *MyStructFieldPatch) SetI16Val(value *patch.I16Patch) *MyStructFieldPatch {
    x.I16Val = value
    return x
}

func (x *MyStructFieldPatch) SetByteValNonCompat(value patch.BytePatch) *MyStructFieldPatch {
    x.ByteVal = &value
    return x
}

func (x *MyStructFieldPatch) SetByteVal(value *patch.BytePatch) *MyStructFieldPatch {
    x.ByteVal = value
    return x
}

func (x *MyStructFieldPatch) SetBoolValNonCompat(value patch.BoolPatch) *MyStructFieldPatch {
    x.BoolVal = &value
    return x
}

func (x *MyStructFieldPatch) SetBoolVal(value *patch.BoolPatch) *MyStructFieldPatch {
    x.BoolVal = value
    return x
}

func (x *MyStructFieldPatch) SetStructWithFieldCustomDefaultNonCompat(value MyDataPatch) *MyStructFieldPatch {
    x.StructWithFieldCustomDefault = &value
    return x
}

func (x *MyStructFieldPatch) SetStructWithFieldCustomDefault(value *MyDataPatch) *MyStructFieldPatch {
    x.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStructFieldPatch) IsSetStructWithCustomDefault() bool {
    return x != nil && x.StructWithCustomDefault != nil
}

func (x *MyStructFieldPatch) IsSetI32WithCustomDefault() bool {
    return x != nil && x.I32WithCustomDefault != nil
}

func (x *MyStructFieldPatch) IsSetMapMap() bool {
    return x != nil && x.MapMap != nil
}

func (x *MyStructFieldPatch) IsSetListMap() bool {
    return x != nil && x.ListMap != nil
}

func (x *MyStructFieldPatch) IsSetOptMapVal() bool {
    return x != nil && x.OptMapVal != nil
}

func (x *MyStructFieldPatch) IsSetOptSetVal() bool {
    return x != nil && x.OptSetVal != nil
}

func (x *MyStructFieldPatch) IsSetOptListVal() bool {
    return x != nil && x.OptListVal != nil
}

func (x *MyStructFieldPatch) IsSetOptLateStructVal() bool {
    return x != nil && x.OptLateStructVal != nil
}

func (x *MyStructFieldPatch) IsSetOptStructVal() bool {
    return x != nil && x.OptStructVal != nil
}

func (x *MyStructFieldPatch) IsSetOptEnumVal() bool {
    return x != nil && x.OptEnumVal != nil
}

func (x *MyStructFieldPatch) IsSetOptBinaryVal() bool {
    return x != nil && x.OptBinaryVal != nil
}

func (x *MyStructFieldPatch) IsSetOptStringVal() bool {
    return x != nil && x.OptStringVal != nil
}

func (x *MyStructFieldPatch) IsSetOptDoubleVal() bool {
    return x != nil && x.OptDoubleVal != nil
}

func (x *MyStructFieldPatch) IsSetOptFloatVal() bool {
    return x != nil && x.OptFloatVal != nil
}

func (x *MyStructFieldPatch) IsSetOptI64Val() bool {
    return x != nil && x.OptI64Val != nil
}

func (x *MyStructFieldPatch) IsSetOptI32Val() bool {
    return x != nil && x.OptI32Val != nil
}

func (x *MyStructFieldPatch) IsSetOptI16Val() bool {
    return x != nil && x.OptI16Val != nil
}

func (x *MyStructFieldPatch) IsSetOptByteVal() bool {
    return x != nil && x.OptByteVal != nil
}

func (x *MyStructFieldPatch) IsSetOptBoolVal() bool {
    return x != nil && x.OptBoolVal != nil
}

func (x *MyStructFieldPatch) IsSetLateStructVal() bool {
    return x != nil && x.LateStructVal != nil
}

func (x *MyStructFieldPatch) IsSetUnionVal() bool {
    return x != nil && x.UnionVal != nil
}

func (x *MyStructFieldPatch) IsSetStructVal() bool {
    return x != nil && x.StructVal != nil
}

func (x *MyStructFieldPatch) IsSetEnumVal() bool {
    return x != nil && x.EnumVal != nil
}

func (x *MyStructFieldPatch) IsSetBinaryVal() bool {
    return x != nil && x.BinaryVal != nil
}

func (x *MyStructFieldPatch) IsSetStringVal() bool {
    return x != nil && x.StringVal != nil
}

func (x *MyStructFieldPatch) IsSetDoubleVal() bool {
    return x != nil && x.DoubleVal != nil
}

func (x *MyStructFieldPatch) IsSetFloatVal() bool {
    return x != nil && x.FloatVal != nil
}

func (x *MyStructFieldPatch) IsSetI64Val() bool {
    return x != nil && x.I64Val != nil
}

func (x *MyStructFieldPatch) IsSetI32Val() bool {
    return x != nil && x.I32Val != nil
}

func (x *MyStructFieldPatch) IsSetI16Val() bool {
    return x != nil && x.I16Val != nil
}

func (x *MyStructFieldPatch) IsSetByteVal() bool {
    return x != nil && x.ByteVal != nil
}

func (x *MyStructFieldPatch) IsSetBoolVal() bool {
    return x != nil && x.BoolVal != nil
}

func (x *MyStructFieldPatch) IsSetStructWithFieldCustomDefault() bool {
    return x != nil && x.StructWithFieldCustomDefault != nil
}

func (x *MyStructFieldPatch) writeField_32(p thrift.Format) error {  // StructWithCustomDefault
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructWithCustomDefault
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_31(p thrift.Format) error {  // I32WithCustomDefault
    if !x.IsSetI32WithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("i32WithCustomDefault", thrift.STRUCT, -31); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I32WithCustomDefault
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_30(p thrift.Format) error {  // MapMap
    if !x.IsSetMapMap() {
        return nil
    }

    if err := p.WriteFieldBegin("mapMap", thrift.STRUCT, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MapMap
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_29(p thrift.Format) error {  // ListMap
    if !x.IsSetListMap() {
        return nil
    }

    if err := p.WriteFieldBegin("listMap", thrift.STRUCT, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ListMap
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_28(p thrift.Format) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.STRUCT, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptMapVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_27(p thrift.Format) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.STRUCT, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSetVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_26(p thrift.Format) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.STRUCT, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptListVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_25(p thrift.Format) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptLateStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_24(p thrift.Format) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_23(p thrift.Format) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.STRUCT, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptEnumVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_22(p thrift.Format) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.STRUCT, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptBinaryVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_21(p thrift.Format) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRUCT, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptStringVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_20(p thrift.Format) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.STRUCT, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptDoubleVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_19(p thrift.Format) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.STRUCT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptFloatVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_18(p thrift.Format) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.STRUCT, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptI64Val
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_17(p thrift.Format) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.STRUCT, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptI32Val
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_16(p thrift.Format) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.STRUCT, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptI16Val
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_15(p thrift.Format) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.STRUCT, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptByteVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_14(p thrift.Format) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.STRUCT, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptBoolVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_13(p thrift.Format) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.LateStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_12(p thrift.Format) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.UnionVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_11(p thrift.Format) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_10(p thrift.Format) error {  // EnumVal
    if !x.IsSetEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("enumVal", thrift.STRUCT, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.EnumVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_9(p thrift.Format) error {  // BinaryVal
    if !x.IsSetBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("binaryVal", thrift.STRUCT, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BinaryVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_8(p thrift.Format) error {  // StringVal
    if !x.IsSetStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("stringVal", thrift.STRUCT, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StringVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_7(p thrift.Format) error {  // DoubleVal
    if !x.IsSetDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("doubleVal", thrift.STRUCT, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.DoubleVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_6(p thrift.Format) error {  // FloatVal
    if !x.IsSetFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("floatVal", thrift.STRUCT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.FloatVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_5(p thrift.Format) error {  // I64Val
    if !x.IsSetI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i64Val", thrift.STRUCT, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I64Val
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_4(p thrift.Format) error {  // I32Val
    if !x.IsSetI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i32Val", thrift.STRUCT, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I32Val
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_3(p thrift.Format) error {  // I16Val
    if !x.IsSetI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i16Val", thrift.STRUCT, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.I16Val
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_2(p thrift.Format) error {  // ByteVal
    if !x.IsSetByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("byteVal", thrift.STRUCT, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ByteVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_1(p thrift.Format) error {  // BoolVal
    if !x.IsSetBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("boolVal", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BoolVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField1(p thrift.Format) error {  // StructWithFieldCustomDefault
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructWithFieldCustomDefault
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) readField_32(p thrift.Format) error {  // StructWithCustomDefault
    result := *NewMyDataWithCustomDefaultPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructWithCustomDefault = &result
    return nil
}

func (x *MyStructFieldPatch) readField_31(p thrift.Format) error {  // I32WithCustomDefault
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.I32WithCustomDefault = &result
    return nil
}

func (x *MyStructFieldPatch) readField_30(p thrift.Format) error {  // MapMap
    result := *NewMyStructField30Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.MapMap = &result
    return nil
}

func (x *MyStructFieldPatch) readField_29(p thrift.Format) error {  // ListMap
    result := *NewMyStructField29Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.ListMap = &result
    return nil
}

func (x *MyStructFieldPatch) readField_28(p thrift.Format) error {  // OptMapVal
    result := *NewMyStructField28Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptMapVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_27(p thrift.Format) error {  // OptSetVal
    result := *NewMyStructField27Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptSetVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_26(p thrift.Format) error {  // OptListVal
    result := *NewMyStructField26Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptListVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_25(p thrift.Format) error {  // OptLateStructVal
    result := *NewLateDefStructPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptLateStructVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_24(p thrift.Format) error {  // OptStructVal
    result := *NewMyDataPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptStructVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_23(p thrift.Format) error {  // OptEnumVal
    result := *NewMyStructField23Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptEnumVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_22(p thrift.Format) error {  // OptBinaryVal
    result := *patch.NewBinaryPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptBinaryVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_21(p thrift.Format) error {  // OptStringVal
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptStringVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_20(p thrift.Format) error {  // OptDoubleVal
    result := *patch.NewDoublePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptDoubleVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_19(p thrift.Format) error {  // OptFloatVal
    result := *patch.NewFloatPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptFloatVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_18(p thrift.Format) error {  // OptI64Val
    result := *patch.NewI64Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptI64Val = &result
    return nil
}

func (x *MyStructFieldPatch) readField_17(p thrift.Format) error {  // OptI32Val
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptI32Val = &result
    return nil
}

func (x *MyStructFieldPatch) readField_16(p thrift.Format) error {  // OptI16Val
    result := *patch.NewI16Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptI16Val = &result
    return nil
}

func (x *MyStructFieldPatch) readField_15(p thrift.Format) error {  // OptByteVal
    result := *patch.NewBytePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptByteVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_14(p thrift.Format) error {  // OptBoolVal
    result := *patch.NewBoolPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptBoolVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_13(p thrift.Format) error {  // LateStructVal
    result := *NewLateDefStructPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.LateStructVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_12(p thrift.Format) error {  // UnionVal
    result := *NewMyUnionPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.UnionVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_11(p thrift.Format) error {  // StructVal
    result := *NewMyDataPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_10(p thrift.Format) error {  // EnumVal
    result := *NewMyStructField10Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.EnumVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_9(p thrift.Format) error {  // BinaryVal
    result := *patch.NewBinaryPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.BinaryVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_8(p thrift.Format) error {  // StringVal
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.StringVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_7(p thrift.Format) error {  // DoubleVal
    result := *patch.NewDoublePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.DoubleVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_6(p thrift.Format) error {  // FloatVal
    result := *patch.NewFloatPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.FloatVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_5(p thrift.Format) error {  // I64Val
    result := *patch.NewI64Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.I64Val = &result
    return nil
}

func (x *MyStructFieldPatch) readField_4(p thrift.Format) error {  // I32Val
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.I32Val = &result
    return nil
}

func (x *MyStructFieldPatch) readField_3(p thrift.Format) error {  // I16Val
    result := *patch.NewI16Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.I16Val = &result
    return nil
}

func (x *MyStructFieldPatch) readField_2(p thrift.Format) error {  // ByteVal
    result := *patch.NewBytePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.ByteVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField_1(p thrift.Format) error {  // BoolVal
    result := *patch.NewBoolPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.BoolVal = &result
    return nil
}

func (x *MyStructFieldPatch) readField1(p thrift.Format) error {  // StructWithFieldCustomDefault
    result := *NewMyDataPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructWithFieldCustomDefault = &result
    return nil
}

func (x *MyStructFieldPatch) toString_32() string {  // StructWithCustomDefault
    return fmt.Sprintf("%v", x.StructWithCustomDefault)
}

func (x *MyStructFieldPatch) toString_31() string {  // I32WithCustomDefault
    return fmt.Sprintf("%v", x.I32WithCustomDefault)
}

func (x *MyStructFieldPatch) toString_30() string {  // MapMap
    return fmt.Sprintf("%v", x.MapMap)
}

func (x *MyStructFieldPatch) toString_29() string {  // ListMap
    return fmt.Sprintf("%v", x.ListMap)
}

func (x *MyStructFieldPatch) toString_28() string {  // OptMapVal
    return fmt.Sprintf("%v", x.OptMapVal)
}

func (x *MyStructFieldPatch) toString_27() string {  // OptSetVal
    return fmt.Sprintf("%v", x.OptSetVal)
}

func (x *MyStructFieldPatch) toString_26() string {  // OptListVal
    return fmt.Sprintf("%v", x.OptListVal)
}

func (x *MyStructFieldPatch) toString_25() string {  // OptLateStructVal
    return fmt.Sprintf("%v", x.OptLateStructVal)
}

func (x *MyStructFieldPatch) toString_24() string {  // OptStructVal
    return fmt.Sprintf("%v", x.OptStructVal)
}

func (x *MyStructFieldPatch) toString_23() string {  // OptEnumVal
    return fmt.Sprintf("%v", x.OptEnumVal)
}

func (x *MyStructFieldPatch) toString_22() string {  // OptBinaryVal
    return fmt.Sprintf("%v", x.OptBinaryVal)
}

func (x *MyStructFieldPatch) toString_21() string {  // OptStringVal
    return fmt.Sprintf("%v", x.OptStringVal)
}

func (x *MyStructFieldPatch) toString_20() string {  // OptDoubleVal
    return fmt.Sprintf("%v", x.OptDoubleVal)
}

func (x *MyStructFieldPatch) toString_19() string {  // OptFloatVal
    return fmt.Sprintf("%v", x.OptFloatVal)
}

func (x *MyStructFieldPatch) toString_18() string {  // OptI64Val
    return fmt.Sprintf("%v", x.OptI64Val)
}

func (x *MyStructFieldPatch) toString_17() string {  // OptI32Val
    return fmt.Sprintf("%v", x.OptI32Val)
}

func (x *MyStructFieldPatch) toString_16() string {  // OptI16Val
    return fmt.Sprintf("%v", x.OptI16Val)
}

func (x *MyStructFieldPatch) toString_15() string {  // OptByteVal
    return fmt.Sprintf("%v", x.OptByteVal)
}

func (x *MyStructFieldPatch) toString_14() string {  // OptBoolVal
    return fmt.Sprintf("%v", x.OptBoolVal)
}

func (x *MyStructFieldPatch) toString_13() string {  // LateStructVal
    return fmt.Sprintf("%v", x.LateStructVal)
}

func (x *MyStructFieldPatch) toString_12() string {  // UnionVal
    return fmt.Sprintf("%v", x.UnionVal)
}

func (x *MyStructFieldPatch) toString_11() string {  // StructVal
    return fmt.Sprintf("%v", x.StructVal)
}

func (x *MyStructFieldPatch) toString_10() string {  // EnumVal
    return fmt.Sprintf("%v", x.EnumVal)
}

func (x *MyStructFieldPatch) toString_9() string {  // BinaryVal
    return fmt.Sprintf("%v", x.BinaryVal)
}

func (x *MyStructFieldPatch) toString_8() string {  // StringVal
    return fmt.Sprintf("%v", x.StringVal)
}

func (x *MyStructFieldPatch) toString_7() string {  // DoubleVal
    return fmt.Sprintf("%v", x.DoubleVal)
}

func (x *MyStructFieldPatch) toString_6() string {  // FloatVal
    return fmt.Sprintf("%v", x.FloatVal)
}

func (x *MyStructFieldPatch) toString_5() string {  // I64Val
    return fmt.Sprintf("%v", x.I64Val)
}

func (x *MyStructFieldPatch) toString_4() string {  // I32Val
    return fmt.Sprintf("%v", x.I32Val)
}

func (x *MyStructFieldPatch) toString_3() string {  // I16Val
    return fmt.Sprintf("%v", x.I16Val)
}

func (x *MyStructFieldPatch) toString_2() string {  // ByteVal
    return fmt.Sprintf("%v", x.ByteVal)
}

func (x *MyStructFieldPatch) toString_1() string {  // BoolVal
    return fmt.Sprintf("%v", x.BoolVal)
}

func (x *MyStructFieldPatch) toString1() string {  // StructWithFieldCustomDefault
    return fmt.Sprintf("%v", x.StructWithFieldCustomDefault)
}

// Deprecated: Use NewMyStructFieldPatch().GetStructWithCustomDefault() instead.
func (x *MyStructFieldPatch) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefaultPatch {
    if !x.IsSetStructWithCustomDefault() {
        return NewMyDataWithCustomDefaultPatch()
    }
    return x.StructWithCustomDefault
}

// Deprecated: Use NewMyStructFieldPatch().GetI32WithCustomDefault() instead.
func (x *MyStructFieldPatch) DefaultGetI32WithCustomDefault() *patch.I32Patch {
    if !x.IsSetI32WithCustomDefault() {
        return patch.NewI32Patch()
    }
    return x.I32WithCustomDefault
}

// Deprecated: Use NewMyStructFieldPatch().GetMapMap() instead.
func (x *MyStructFieldPatch) DefaultGetMapMap() *MyStructField30Patch {
    if !x.IsSetMapMap() {
        return NewMyStructField30Patch()
    }
    return x.MapMap
}

// Deprecated: Use NewMyStructFieldPatch().GetListMap() instead.
func (x *MyStructFieldPatch) DefaultGetListMap() *MyStructField29Patch {
    if !x.IsSetListMap() {
        return NewMyStructField29Patch()
    }
    return x.ListMap
}

// Deprecated: Use NewMyStructFieldPatch().GetOptMapVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptMapVal() *MyStructField28Patch {
    if !x.IsSetOptMapVal() {
        return NewMyStructField28Patch()
    }
    return x.OptMapVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptSetVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptSetVal() *MyStructField27Patch {
    if !x.IsSetOptSetVal() {
        return NewMyStructField27Patch()
    }
    return x.OptSetVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptListVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptListVal() *MyStructField26Patch {
    if !x.IsSetOptListVal() {
        return NewMyStructField26Patch()
    }
    return x.OptListVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptLateStructVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptLateStructVal() *LateDefStructPatch {
    if !x.IsSetOptLateStructVal() {
        return NewLateDefStructPatch()
    }
    return x.OptLateStructVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptStructVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptStructVal() *MyDataPatch {
    if !x.IsSetOptStructVal() {
        return NewMyDataPatch()
    }
    return x.OptStructVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptEnumVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptEnumVal() *MyStructField23Patch {
    if !x.IsSetOptEnumVal() {
        return NewMyStructField23Patch()
    }
    return x.OptEnumVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptBinaryVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptBinaryVal() *patch.BinaryPatch {
    if !x.IsSetOptBinaryVal() {
        return patch.NewBinaryPatch()
    }
    return x.OptBinaryVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptStringVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptStringVal() *patch.StringPatch {
    if !x.IsSetOptStringVal() {
        return patch.NewStringPatch()
    }
    return x.OptStringVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptDoubleVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptDoubleVal() *patch.DoublePatch {
    if !x.IsSetOptDoubleVal() {
        return patch.NewDoublePatch()
    }
    return x.OptDoubleVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptFloatVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptFloatVal() *patch.FloatPatch {
    if !x.IsSetOptFloatVal() {
        return patch.NewFloatPatch()
    }
    return x.OptFloatVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptI64Val() instead.
func (x *MyStructFieldPatch) DefaultGetOptI64Val() *patch.I64Patch {
    if !x.IsSetOptI64Val() {
        return patch.NewI64Patch()
    }
    return x.OptI64Val
}

// Deprecated: Use NewMyStructFieldPatch().GetOptI32Val() instead.
func (x *MyStructFieldPatch) DefaultGetOptI32Val() *patch.I32Patch {
    if !x.IsSetOptI32Val() {
        return patch.NewI32Patch()
    }
    return x.OptI32Val
}

// Deprecated: Use NewMyStructFieldPatch().GetOptI16Val() instead.
func (x *MyStructFieldPatch) DefaultGetOptI16Val() *patch.I16Patch {
    if !x.IsSetOptI16Val() {
        return patch.NewI16Patch()
    }
    return x.OptI16Val
}

// Deprecated: Use NewMyStructFieldPatch().GetOptByteVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptByteVal() *patch.BytePatch {
    if !x.IsSetOptByteVal() {
        return patch.NewBytePatch()
    }
    return x.OptByteVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptBoolVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptBoolVal() *patch.BoolPatch {
    if !x.IsSetOptBoolVal() {
        return patch.NewBoolPatch()
    }
    return x.OptBoolVal
}

// Deprecated: Use NewMyStructFieldPatch().GetLateStructVal() instead.
func (x *MyStructFieldPatch) DefaultGetLateStructVal() *LateDefStructPatch {
    if !x.IsSetLateStructVal() {
        return NewLateDefStructPatch()
    }
    return x.LateStructVal
}

// Deprecated: Use NewMyStructFieldPatch().GetUnionVal() instead.
func (x *MyStructFieldPatch) DefaultGetUnionVal() *MyUnionPatch {
    if !x.IsSetUnionVal() {
        return NewMyUnionPatch()
    }
    return x.UnionVal
}

// Deprecated: Use NewMyStructFieldPatch().GetStructVal() instead.
func (x *MyStructFieldPatch) DefaultGetStructVal() *MyDataPatch {
    if !x.IsSetStructVal() {
        return NewMyDataPatch()
    }
    return x.StructVal
}

// Deprecated: Use NewMyStructFieldPatch().GetEnumVal() instead.
func (x *MyStructFieldPatch) DefaultGetEnumVal() *MyStructField10Patch {
    if !x.IsSetEnumVal() {
        return NewMyStructField10Patch()
    }
    return x.EnumVal
}

// Deprecated: Use NewMyStructFieldPatch().GetBinaryVal() instead.
func (x *MyStructFieldPatch) DefaultGetBinaryVal() *patch.BinaryPatch {
    if !x.IsSetBinaryVal() {
        return patch.NewBinaryPatch()
    }
    return x.BinaryVal
}

// Deprecated: Use NewMyStructFieldPatch().GetStringVal() instead.
func (x *MyStructFieldPatch) DefaultGetStringVal() *patch.StringPatch {
    if !x.IsSetStringVal() {
        return patch.NewStringPatch()
    }
    return x.StringVal
}

// Deprecated: Use NewMyStructFieldPatch().GetDoubleVal() instead.
func (x *MyStructFieldPatch) DefaultGetDoubleVal() *patch.DoublePatch {
    if !x.IsSetDoubleVal() {
        return patch.NewDoublePatch()
    }
    return x.DoubleVal
}

// Deprecated: Use NewMyStructFieldPatch().GetFloatVal() instead.
func (x *MyStructFieldPatch) DefaultGetFloatVal() *patch.FloatPatch {
    if !x.IsSetFloatVal() {
        return patch.NewFloatPatch()
    }
    return x.FloatVal
}

// Deprecated: Use NewMyStructFieldPatch().GetI64Val() instead.
func (x *MyStructFieldPatch) DefaultGetI64Val() *patch.I64Patch {
    if !x.IsSetI64Val() {
        return patch.NewI64Patch()
    }
    return x.I64Val
}

// Deprecated: Use NewMyStructFieldPatch().GetI32Val() instead.
func (x *MyStructFieldPatch) DefaultGetI32Val() *patch.I32Patch {
    if !x.IsSetI32Val() {
        return patch.NewI32Patch()
    }
    return x.I32Val
}

// Deprecated: Use NewMyStructFieldPatch().GetI16Val() instead.
func (x *MyStructFieldPatch) DefaultGetI16Val() *patch.I16Patch {
    if !x.IsSetI16Val() {
        return patch.NewI16Patch()
    }
    return x.I16Val
}

// Deprecated: Use NewMyStructFieldPatch().GetByteVal() instead.
func (x *MyStructFieldPatch) DefaultGetByteVal() *patch.BytePatch {
    if !x.IsSetByteVal() {
        return patch.NewBytePatch()
    }
    return x.ByteVal
}

// Deprecated: Use NewMyStructFieldPatch().GetBoolVal() instead.
func (x *MyStructFieldPatch) DefaultGetBoolVal() *patch.BoolPatch {
    if !x.IsSetBoolVal() {
        return patch.NewBoolPatch()
    }
    return x.BoolVal
}

// Deprecated: Use NewMyStructFieldPatch().GetStructWithFieldCustomDefault() instead.
func (x *MyStructFieldPatch) DefaultGetStructWithFieldCustomDefault() *MyDataPatch {
    if !x.IsSetStructWithFieldCustomDefault() {
        return NewMyDataPatch()
    }
    return x.StructWithFieldCustomDefault
}



func (x *MyStructFieldPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_32(p); err != nil {
        return err
    }

    if err := x.writeField_31(p); err != nil {
        return err
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -32 && wireType == thrift.Type(thrift.STRUCT)):  // structWithCustomDefault
            if err := x.readField_32(p); err != nil {
                return err
            }
        case (id == -31 && wireType == thrift.Type(thrift.STRUCT)):  // i32WithCustomDefault
            if err := x.readField_31(p); err != nil {
                return err
            }
        case (id == -30 && wireType == thrift.Type(thrift.STRUCT)):  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        case (id == -29 && wireType == thrift.Type(thrift.STRUCT)):  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case (id == -28 && wireType == thrift.Type(thrift.STRUCT)):  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case (id == -27 && wireType == thrift.Type(thrift.STRUCT)):  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case (id == -26 && wireType == thrift.Type(thrift.STRUCT)):  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case (id == -25 && wireType == thrift.Type(thrift.STRUCT)):  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case (id == -24 && wireType == thrift.Type(thrift.STRUCT)):  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case (id == -23 && wireType == thrift.Type(thrift.STRUCT)):  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case (id == -22 && wireType == thrift.Type(thrift.STRUCT)):  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case (id == -21 && wireType == thrift.Type(thrift.STRUCT)):  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case (id == -20 && wireType == thrift.Type(thrift.STRUCT)):  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case (id == -19 && wireType == thrift.Type(thrift.STRUCT)):  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case (id == -18 && wireType == thrift.Type(thrift.STRUCT)):  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case (id == -17 && wireType == thrift.Type(thrift.STRUCT)):  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case (id == -16 && wireType == thrift.Type(thrift.STRUCT)):  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case (id == -15 && wireType == thrift.Type(thrift.STRUCT)):  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case (id == -14 && wireType == thrift.Type(thrift.STRUCT)):  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case (id == -13 && wireType == thrift.Type(thrift.STRUCT)):  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case (id == -12 && wireType == thrift.Type(thrift.STRUCT)):  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case (id == -11 && wireType == thrift.Type(thrift.STRUCT)):  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case (id == -10 && wireType == thrift.Type(thrift.STRUCT)):  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case (id == -9 && wireType == thrift.Type(thrift.STRUCT)):  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case (id == -8 && wireType == thrift.Type(thrift.STRUCT)):  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case (id == -7 && wireType == thrift.Type(thrift.STRUCT)):  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case (id == -6 && wireType == thrift.Type(thrift.STRUCT)):  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case (id == -5 && wireType == thrift.Type(thrift.STRUCT)):  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case (id == -4 && wireType == thrift.Type(thrift.STRUCT)):  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case (id == -3 && wireType == thrift.Type(thrift.STRUCT)):  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case (id == -2 && wireType == thrift.Type(thrift.STRUCT)):  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case (id == -1 && wireType == thrift.Type(thrift.STRUCT)):  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // structWithFieldCustomDefault
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructFieldPatch({")
    sb.WriteString(fmt.Sprintf("StructWithCustomDefault:%s ", x.toString_32()))
    sb.WriteString(fmt.Sprintf("I32WithCustomDefault:%s ", x.toString_31()))
    sb.WriteString(fmt.Sprintf("MapMap:%s ", x.toString_30()))
    sb.WriteString(fmt.Sprintf("ListMap:%s ", x.toString_29()))
    sb.WriteString(fmt.Sprintf("OptMapVal:%s ", x.toString_28()))
    sb.WriteString(fmt.Sprintf("OptSetVal:%s ", x.toString_27()))
    sb.WriteString(fmt.Sprintf("OptListVal:%s ", x.toString_26()))
    sb.WriteString(fmt.Sprintf("OptLateStructVal:%s ", x.toString_25()))
    sb.WriteString(fmt.Sprintf("OptStructVal:%s ", x.toString_24()))
    sb.WriteString(fmt.Sprintf("OptEnumVal:%s ", x.toString_23()))
    sb.WriteString(fmt.Sprintf("OptBinaryVal:%s ", x.toString_22()))
    sb.WriteString(fmt.Sprintf("OptStringVal:%s ", x.toString_21()))
    sb.WriteString(fmt.Sprintf("OptDoubleVal:%s ", x.toString_20()))
    sb.WriteString(fmt.Sprintf("OptFloatVal:%s ", x.toString_19()))
    sb.WriteString(fmt.Sprintf("OptI64Val:%s ", x.toString_18()))
    sb.WriteString(fmt.Sprintf("OptI32Val:%s ", x.toString_17()))
    sb.WriteString(fmt.Sprintf("OptI16Val:%s ", x.toString_16()))
    sb.WriteString(fmt.Sprintf("OptByteVal:%s ", x.toString_15()))
    sb.WriteString(fmt.Sprintf("OptBoolVal:%s ", x.toString_14()))
    sb.WriteString(fmt.Sprintf("LateStructVal:%s ", x.toString_13()))
    sb.WriteString(fmt.Sprintf("UnionVal:%s ", x.toString_12()))
    sb.WriteString(fmt.Sprintf("StructVal:%s ", x.toString_11()))
    sb.WriteString(fmt.Sprintf("EnumVal:%s ", x.toString_10()))
    sb.WriteString(fmt.Sprintf("BinaryVal:%s ", x.toString_9()))
    sb.WriteString(fmt.Sprintf("StringVal:%s ", x.toString_8()))
    sb.WriteString(fmt.Sprintf("DoubleVal:%s ", x.toString_7()))
    sb.WriteString(fmt.Sprintf("FloatVal:%s ", x.toString_6()))
    sb.WriteString(fmt.Sprintf("I64Val:%s ", x.toString_5()))
    sb.WriteString(fmt.Sprintf("I32Val:%s ", x.toString_4()))
    sb.WriteString(fmt.Sprintf("I16Val:%s ", x.toString_3()))
    sb.WriteString(fmt.Sprintf("ByteVal:%s ", x.toString_2()))
    sb.WriteString(fmt.Sprintf("BoolVal:%s ", x.toString_1()))
    sb.WriteString(fmt.Sprintf("StructWithFieldCustomDefault:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructEnsureStruct struct {
    StructWithCustomDefault *MyDataWithCustomDefault `thrift:"structWithCustomDefault,-32,optional" json:"structWithCustomDefault,omitempty" db:"structWithCustomDefault"`
    I32WithCustomDefault *int32 `thrift:"i32WithCustomDefault,-31,optional" json:"i32WithCustomDefault,omitempty" db:"i32WithCustomDefault"`
    MapMap map[string]map[string]int32 `thrift:"mapMap,-30,optional" json:"mapMap,omitempty" db:"mapMap"`
    ListMap []map[string]int32 `thrift:"listMap,-29,optional" json:"listMap,omitempty" db:"listMap"`
    OptMapVal map[string]string `thrift:"optMapVal,-28,optional" json:"optMapVal,omitempty" db:"optMapVal"`
    OptSetVal []string `thrift:"optSetVal,-27,optional" json:"optSetVal,omitempty" db:"optSetVal"`
    OptListVal []int16 `thrift:"optListVal,-26,optional" json:"optListVal,omitempty" db:"optListVal"`
    OptLateStructVal *LateDefStruct `thrift:"optLateStructVal,-25,optional" json:"optLateStructVal,omitempty" db:"optLateStructVal"`
    OptStructVal *MyData `thrift:"optStructVal,-24,optional" json:"optStructVal,omitempty" db:"optStructVal"`
    OptEnumVal *MyEnum `thrift:"optEnumVal,-23,optional" json:"optEnumVal,omitempty" db:"optEnumVal"`
    OptBinaryVal []byte `thrift:"optBinaryVal,-22,optional" json:"optBinaryVal,omitempty" db:"optBinaryVal"`
    OptStringVal *string `thrift:"optStringVal,-21,optional" json:"optStringVal,omitempty" db:"optStringVal"`
    OptDoubleVal *float64 `thrift:"optDoubleVal,-20,optional" json:"optDoubleVal,omitempty" db:"optDoubleVal"`
    OptFloatVal *float32 `thrift:"optFloatVal,-19,optional" json:"optFloatVal,omitempty" db:"optFloatVal"`
    OptI64Val *int64 `thrift:"optI64Val,-18,optional" json:"optI64Val,omitempty" db:"optI64Val"`
    OptI32Val *int32 `thrift:"optI32Val,-17,optional" json:"optI32Val,omitempty" db:"optI32Val"`
    OptI16Val *int16 `thrift:"optI16Val,-16,optional" json:"optI16Val,omitempty" db:"optI16Val"`
    OptByteVal *int8 `thrift:"optByteVal,-15,optional" json:"optByteVal,omitempty" db:"optByteVal"`
    OptBoolVal *bool `thrift:"optBoolVal,-14,optional" json:"optBoolVal,omitempty" db:"optBoolVal"`
    LateStructVal *LateDefStruct `thrift:"lateStructVal,-13,optional" json:"lateStructVal,omitempty" db:"lateStructVal"`
    UnionVal *MyUnion `thrift:"unionVal,-12,optional" json:"unionVal,omitempty" db:"unionVal"`
    StructVal *MyData `thrift:"structVal,-11,optional" json:"structVal,omitempty" db:"structVal"`
    EnumVal *MyEnum `thrift:"enumVal,-10,optional" json:"enumVal,omitempty" db:"enumVal"`
    BinaryVal []byte `thrift:"binaryVal,-9,optional" json:"binaryVal,omitempty" db:"binaryVal"`
    StringVal *string `thrift:"stringVal,-8,optional" json:"stringVal,omitempty" db:"stringVal"`
    DoubleVal *float64 `thrift:"doubleVal,-7,optional" json:"doubleVal,omitempty" db:"doubleVal"`
    FloatVal *float32 `thrift:"floatVal,-6,optional" json:"floatVal,omitempty" db:"floatVal"`
    I64Val *int64 `thrift:"i64Val,-5,optional" json:"i64Val,omitempty" db:"i64Val"`
    I32Val *int32 `thrift:"i32Val,-4,optional" json:"i32Val,omitempty" db:"i32Val"`
    I16Val *int16 `thrift:"i16Val,-3,optional" json:"i16Val,omitempty" db:"i16Val"`
    ByteVal *int8 `thrift:"byteVal,-2,optional" json:"byteVal,omitempty" db:"byteVal"`
    BoolVal *bool `thrift:"boolVal,-1,optional" json:"boolVal,omitempty" db:"boolVal"`
    StructWithFieldCustomDefault *MyData `thrift:"structWithFieldCustomDefault,1,optional" json:"structWithFieldCustomDefault,omitempty" db:"structWithFieldCustomDefault"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructEnsureStruct)(nil)

func NewMyStructEnsureStruct() *MyStructEnsureStruct {
    return (&MyStructEnsureStruct{})
}

func (x *MyStructEnsureStruct) GetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    return x.StructWithCustomDefault
}

func (x *MyStructEnsureStruct) GetI32WithCustomDefault() int32 {
    if !x.IsSetI32WithCustomDefault() {
        return 0
    }

    return *x.I32WithCustomDefault
}

func (x *MyStructEnsureStruct) GetMapMap() map[string]map[string]int32 {
    if !x.IsSetMapMap() {
        return make(map[string]map[string]int32)
    }

    return x.MapMap
}

func (x *MyStructEnsureStruct) GetListMap() []map[string]int32 {
    if !x.IsSetListMap() {
        return make([]map[string]int32, 0)
    }

    return x.ListMap
}

func (x *MyStructEnsureStruct) GetOptMapVal() map[string]string {
    if !x.IsSetOptMapVal() {
        return make(map[string]string)
    }

    return x.OptMapVal
}

func (x *MyStructEnsureStruct) GetOptSetVal() []string {
    if !x.IsSetOptSetVal() {
        return make([]string, 0)
    }

    return x.OptSetVal
}

func (x *MyStructEnsureStruct) GetOptListVal() []int16 {
    if !x.IsSetOptListVal() {
        return make([]int16, 0)
    }

    return x.OptListVal
}

func (x *MyStructEnsureStruct) GetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    return x.OptLateStructVal
}

func (x *MyStructEnsureStruct) GetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return nil
    }

    return x.OptStructVal
}

func (x *MyStructEnsureStruct) GetOptEnumVal() MyEnum {
    if !x.IsSetOptEnumVal() {
        return 0
    }

    return *x.OptEnumVal
}

func (x *MyStructEnsureStruct) GetOptBinaryVal() []byte {
    if !x.IsSetOptBinaryVal() {
        return []byte("")
    }

    return x.OptBinaryVal
}

func (x *MyStructEnsureStruct) GetOptStringVal() string {
    if !x.IsSetOptStringVal() {
        return ""
    }

    return *x.OptStringVal
}

func (x *MyStructEnsureStruct) GetOptDoubleVal() float64 {
    if !x.IsSetOptDoubleVal() {
        return 0.0
    }

    return *x.OptDoubleVal
}

func (x *MyStructEnsureStruct) GetOptFloatVal() float32 {
    if !x.IsSetOptFloatVal() {
        return 0.0
    }

    return *x.OptFloatVal
}

func (x *MyStructEnsureStruct) GetOptI64Val() int64 {
    if !x.IsSetOptI64Val() {
        return 0
    }

    return *x.OptI64Val
}

func (x *MyStructEnsureStruct) GetOptI32Val() int32 {
    if !x.IsSetOptI32Val() {
        return 0
    }

    return *x.OptI32Val
}

func (x *MyStructEnsureStruct) GetOptI16Val() int16 {
    if !x.IsSetOptI16Val() {
        return 0
    }

    return *x.OptI16Val
}

func (x *MyStructEnsureStruct) GetOptByteVal() int8 {
    if !x.IsSetOptByteVal() {
        return 0
    }

    return *x.OptByteVal
}

func (x *MyStructEnsureStruct) GetOptBoolVal() bool {
    if !x.IsSetOptBoolVal() {
        return false
    }

    return *x.OptBoolVal
}

func (x *MyStructEnsureStruct) GetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return nil
    }

    return x.LateStructVal
}

func (x *MyStructEnsureStruct) GetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return nil
    }

    return x.UnionVal
}

func (x *MyStructEnsureStruct) GetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return nil
    }

    return x.StructVal
}

func (x *MyStructEnsureStruct) GetEnumVal() MyEnum {
    if !x.IsSetEnumVal() {
        return 0
    }

    return *x.EnumVal
}

func (x *MyStructEnsureStruct) GetBinaryVal() []byte {
    if !x.IsSetBinaryVal() {
        return []byte("")
    }

    return x.BinaryVal
}

func (x *MyStructEnsureStruct) GetStringVal() string {
    if !x.IsSetStringVal() {
        return ""
    }

    return *x.StringVal
}

func (x *MyStructEnsureStruct) GetDoubleVal() float64 {
    if !x.IsSetDoubleVal() {
        return 0.0
    }

    return *x.DoubleVal
}

func (x *MyStructEnsureStruct) GetFloatVal() float32 {
    if !x.IsSetFloatVal() {
        return 0.0
    }

    return *x.FloatVal
}

func (x *MyStructEnsureStruct) GetI64Val() int64 {
    if !x.IsSetI64Val() {
        return 0
    }

    return *x.I64Val
}

func (x *MyStructEnsureStruct) GetI32Val() int32 {
    if !x.IsSetI32Val() {
        return 0
    }

    return *x.I32Val
}

func (x *MyStructEnsureStruct) GetI16Val() int16 {
    if !x.IsSetI16Val() {
        return 0
    }

    return *x.I16Val
}

func (x *MyStructEnsureStruct) GetByteVal() int8 {
    if !x.IsSetByteVal() {
        return 0
    }

    return *x.ByteVal
}

func (x *MyStructEnsureStruct) GetBoolVal() bool {
    if !x.IsSetBoolVal() {
        return false
    }

    return *x.BoolVal
}

func (x *MyStructEnsureStruct) GetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    return x.StructWithFieldCustomDefault
}

func (x *MyStructEnsureStruct) SetStructWithCustomDefaultNonCompat(value MyDataWithCustomDefault) *MyStructEnsureStruct {
    x.StructWithCustomDefault = &value
    return x
}

func (x *MyStructEnsureStruct) SetStructWithCustomDefault(value *MyDataWithCustomDefault) *MyStructEnsureStruct {
    x.StructWithCustomDefault = value
    return x
}

func (x *MyStructEnsureStruct) SetI32WithCustomDefaultNonCompat(value int32) *MyStructEnsureStruct {
    x.I32WithCustomDefault = &value
    return x
}

func (x *MyStructEnsureStruct) SetI32WithCustomDefault(value *int32) *MyStructEnsureStruct {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStructEnsureStruct) SetMapMapNonCompat(value map[string]map[string]int32) *MyStructEnsureStruct {
    x.MapMap = value
    return x
}

func (x *MyStructEnsureStruct) SetMapMap(value map[string]map[string]int32) *MyStructEnsureStruct {
    x.MapMap = value
    return x
}

func (x *MyStructEnsureStruct) SetListMapNonCompat(value []map[string]int32) *MyStructEnsureStruct {
    x.ListMap = value
    return x
}

func (x *MyStructEnsureStruct) SetListMap(value []map[string]int32) *MyStructEnsureStruct {
    x.ListMap = value
    return x
}

func (x *MyStructEnsureStruct) SetOptMapValNonCompat(value map[string]string) *MyStructEnsureStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptMapVal(value map[string]string) *MyStructEnsureStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptSetValNonCompat(value []string) *MyStructEnsureStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptSetVal(value []string) *MyStructEnsureStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptListValNonCompat(value []int16) *MyStructEnsureStruct {
    x.OptListVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptListVal(value []int16) *MyStructEnsureStruct {
    x.OptListVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptLateStructValNonCompat(value LateDefStruct) *MyStructEnsureStruct {
    x.OptLateStructVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptLateStructVal(value *LateDefStruct) *MyStructEnsureStruct {
    x.OptLateStructVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptStructValNonCompat(value MyData) *MyStructEnsureStruct {
    x.OptStructVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptStructVal(value *MyData) *MyStructEnsureStruct {
    x.OptStructVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptEnumValNonCompat(value MyEnum) *MyStructEnsureStruct {
    x.OptEnumVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptEnumVal(value *MyEnum) *MyStructEnsureStruct {
    x.OptEnumVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptBinaryValNonCompat(value []byte) *MyStructEnsureStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptBinaryVal(value []byte) *MyStructEnsureStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptStringValNonCompat(value string) *MyStructEnsureStruct {
    x.OptStringVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptStringVal(value *string) *MyStructEnsureStruct {
    x.OptStringVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptDoubleValNonCompat(value float64) *MyStructEnsureStruct {
    x.OptDoubleVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptDoubleVal(value *float64) *MyStructEnsureStruct {
    x.OptDoubleVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptFloatValNonCompat(value float32) *MyStructEnsureStruct {
    x.OptFloatVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptFloatVal(value *float32) *MyStructEnsureStruct {
    x.OptFloatVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptI64ValNonCompat(value int64) *MyStructEnsureStruct {
    x.OptI64Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptI64Val(value *int64) *MyStructEnsureStruct {
    x.OptI64Val = value
    return x
}

func (x *MyStructEnsureStruct) SetOptI32ValNonCompat(value int32) *MyStructEnsureStruct {
    x.OptI32Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptI32Val(value *int32) *MyStructEnsureStruct {
    x.OptI32Val = value
    return x
}

func (x *MyStructEnsureStruct) SetOptI16ValNonCompat(value int16) *MyStructEnsureStruct {
    x.OptI16Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptI16Val(value *int16) *MyStructEnsureStruct {
    x.OptI16Val = value
    return x
}

func (x *MyStructEnsureStruct) SetOptByteValNonCompat(value int8) *MyStructEnsureStruct {
    x.OptByteVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptByteVal(value *int8) *MyStructEnsureStruct {
    x.OptByteVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptBoolValNonCompat(value bool) *MyStructEnsureStruct {
    x.OptBoolVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptBoolVal(value *bool) *MyStructEnsureStruct {
    x.OptBoolVal = value
    return x
}

func (x *MyStructEnsureStruct) SetLateStructValNonCompat(value LateDefStruct) *MyStructEnsureStruct {
    x.LateStructVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetLateStructVal(value *LateDefStruct) *MyStructEnsureStruct {
    x.LateStructVal = value
    return x
}

func (x *MyStructEnsureStruct) SetUnionValNonCompat(value MyUnion) *MyStructEnsureStruct {
    x.UnionVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetUnionVal(value *MyUnion) *MyStructEnsureStruct {
    x.UnionVal = value
    return x
}

func (x *MyStructEnsureStruct) SetStructValNonCompat(value MyData) *MyStructEnsureStruct {
    x.StructVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetStructVal(value *MyData) *MyStructEnsureStruct {
    x.StructVal = value
    return x
}

func (x *MyStructEnsureStruct) SetEnumValNonCompat(value MyEnum) *MyStructEnsureStruct {
    x.EnumVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetEnumVal(value *MyEnum) *MyStructEnsureStruct {
    x.EnumVal = value
    return x
}

func (x *MyStructEnsureStruct) SetBinaryValNonCompat(value []byte) *MyStructEnsureStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStructEnsureStruct) SetBinaryVal(value []byte) *MyStructEnsureStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStructEnsureStruct) SetStringValNonCompat(value string) *MyStructEnsureStruct {
    x.StringVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetStringVal(value *string) *MyStructEnsureStruct {
    x.StringVal = value
    return x
}

func (x *MyStructEnsureStruct) SetDoubleValNonCompat(value float64) *MyStructEnsureStruct {
    x.DoubleVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetDoubleVal(value *float64) *MyStructEnsureStruct {
    x.DoubleVal = value
    return x
}

func (x *MyStructEnsureStruct) SetFloatValNonCompat(value float32) *MyStructEnsureStruct {
    x.FloatVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetFloatVal(value *float32) *MyStructEnsureStruct {
    x.FloatVal = value
    return x
}

func (x *MyStructEnsureStruct) SetI64ValNonCompat(value int64) *MyStructEnsureStruct {
    x.I64Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetI64Val(value *int64) *MyStructEnsureStruct {
    x.I64Val = value
    return x
}

func (x *MyStructEnsureStruct) SetI32ValNonCompat(value int32) *MyStructEnsureStruct {
    x.I32Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetI32Val(value *int32) *MyStructEnsureStruct {
    x.I32Val = value
    return x
}

func (x *MyStructEnsureStruct) SetI16ValNonCompat(value int16) *MyStructEnsureStruct {
    x.I16Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetI16Val(value *int16) *MyStructEnsureStruct {
    x.I16Val = value
    return x
}

func (x *MyStructEnsureStruct) SetByteValNonCompat(value int8) *MyStructEnsureStruct {
    x.ByteVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetByteVal(value *int8) *MyStructEnsureStruct {
    x.ByteVal = value
    return x
}

func (x *MyStructEnsureStruct) SetBoolValNonCompat(value bool) *MyStructEnsureStruct {
    x.BoolVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetBoolVal(value *bool) *MyStructEnsureStruct {
    x.BoolVal = value
    return x
}

func (x *MyStructEnsureStruct) SetStructWithFieldCustomDefaultNonCompat(value MyData) *MyStructEnsureStruct {
    x.StructWithFieldCustomDefault = &value
    return x
}

func (x *MyStructEnsureStruct) SetStructWithFieldCustomDefault(value *MyData) *MyStructEnsureStruct {
    x.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStructEnsureStruct) IsSetStructWithCustomDefault() bool {
    return x != nil && x.StructWithCustomDefault != nil
}

func (x *MyStructEnsureStruct) IsSetI32WithCustomDefault() bool {
    return x != nil && x.I32WithCustomDefault != nil
}

func (x *MyStructEnsureStruct) IsSetMapMap() bool {
    return x != nil && x.MapMap != nil
}

func (x *MyStructEnsureStruct) IsSetListMap() bool {
    return x != nil && x.ListMap != nil
}

func (x *MyStructEnsureStruct) IsSetOptMapVal() bool {
    return x != nil && x.OptMapVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptSetVal() bool {
    return x != nil && x.OptSetVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptListVal() bool {
    return x != nil && x.OptListVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptLateStructVal() bool {
    return x != nil && x.OptLateStructVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptStructVal() bool {
    return x != nil && x.OptStructVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptEnumVal() bool {
    return x != nil && x.OptEnumVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptBinaryVal() bool {
    return x != nil && x.OptBinaryVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptStringVal() bool {
    return x != nil && x.OptStringVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptDoubleVal() bool {
    return x != nil && x.OptDoubleVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptFloatVal() bool {
    return x != nil && x.OptFloatVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptI64Val() bool {
    return x != nil && x.OptI64Val != nil
}

func (x *MyStructEnsureStruct) IsSetOptI32Val() bool {
    return x != nil && x.OptI32Val != nil
}

func (x *MyStructEnsureStruct) IsSetOptI16Val() bool {
    return x != nil && x.OptI16Val != nil
}

func (x *MyStructEnsureStruct) IsSetOptByteVal() bool {
    return x != nil && x.OptByteVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptBoolVal() bool {
    return x != nil && x.OptBoolVal != nil
}

func (x *MyStructEnsureStruct) IsSetLateStructVal() bool {
    return x != nil && x.LateStructVal != nil
}

func (x *MyStructEnsureStruct) IsSetUnionVal() bool {
    return x != nil && x.UnionVal != nil
}

func (x *MyStructEnsureStruct) IsSetStructVal() bool {
    return x != nil && x.StructVal != nil
}

func (x *MyStructEnsureStruct) IsSetEnumVal() bool {
    return x != nil && x.EnumVal != nil
}

func (x *MyStructEnsureStruct) IsSetBinaryVal() bool {
    return x != nil && x.BinaryVal != nil
}

func (x *MyStructEnsureStruct) IsSetStringVal() bool {
    return x != nil && x.StringVal != nil
}

func (x *MyStructEnsureStruct) IsSetDoubleVal() bool {
    return x != nil && x.DoubleVal != nil
}

func (x *MyStructEnsureStruct) IsSetFloatVal() bool {
    return x != nil && x.FloatVal != nil
}

func (x *MyStructEnsureStruct) IsSetI64Val() bool {
    return x != nil && x.I64Val != nil
}

func (x *MyStructEnsureStruct) IsSetI32Val() bool {
    return x != nil && x.I32Val != nil
}

func (x *MyStructEnsureStruct) IsSetI16Val() bool {
    return x != nil && x.I16Val != nil
}

func (x *MyStructEnsureStruct) IsSetByteVal() bool {
    return x != nil && x.ByteVal != nil
}

func (x *MyStructEnsureStruct) IsSetBoolVal() bool {
    return x != nil && x.BoolVal != nil
}

func (x *MyStructEnsureStruct) IsSetStructWithFieldCustomDefault() bool {
    return x != nil && x.StructWithFieldCustomDefault != nil
}

func (x *MyStructEnsureStruct) writeField_32(p thrift.Format) error {  // StructWithCustomDefault
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructWithCustomDefault
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_31(p thrift.Format) error {  // I32WithCustomDefault
    if !x.IsSetI32WithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("i32WithCustomDefault", thrift.I32, -31); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.I32WithCustomDefault
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_30(p thrift.Format) error {  // MapMap
    if !x.IsSetMapMap() {
        return nil
    }

    if err := p.WriteFieldBegin("mapMap", thrift.MAP, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.MapMap
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_29(p thrift.Format) error {  // ListMap
    if !x.IsSetListMap() {
        return nil
    }

    if err := p.WriteFieldBegin("listMap", thrift.LIST, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.ListMap
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_28(p thrift.Format) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.MAP, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptMapVal
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_27(p thrift.Format) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.SET, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSetVal
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_26(p thrift.Format) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.LIST, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptListVal
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_25(p thrift.Format) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptLateStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_24(p thrift.Format) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_23(p thrift.Format) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.I32, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptEnumVal
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_22(p thrift.Format) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.STRING, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptBinaryVal
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_21(p thrift.Format) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRING, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptStringVal
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_20(p thrift.Format) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptDoubleVal
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_19(p thrift.Format) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.FLOAT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptFloatVal
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_18(p thrift.Format) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.I64, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptI64Val
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_17(p thrift.Format) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.I32, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptI32Val
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_16(p thrift.Format) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.I16, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptI16Val
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_15(p thrift.Format) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.BYTE, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptByteVal
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_14(p thrift.Format) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.BOOL, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.OptBoolVal
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_13(p thrift.Format) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.LateStructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_12(p thrift.Format) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.UnionVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_11(p thrift.Format) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructVal
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_10(p thrift.Format) error {  // EnumVal
    if !x.IsSetEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("enumVal", thrift.I32, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.EnumVal
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_9(p thrift.Format) error {  // BinaryVal
    if !x.IsSetBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("binaryVal", thrift.STRING, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.BinaryVal
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_8(p thrift.Format) error {  // StringVal
    if !x.IsSetStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("stringVal", thrift.STRING, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.StringVal
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_7(p thrift.Format) error {  // DoubleVal
    if !x.IsSetDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("doubleVal", thrift.DOUBLE, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.DoubleVal
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_6(p thrift.Format) error {  // FloatVal
    if !x.IsSetFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("floatVal", thrift.FLOAT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.FloatVal
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_5(p thrift.Format) error {  // I64Val
    if !x.IsSetI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i64Val", thrift.I64, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.I64Val
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_4(p thrift.Format) error {  // I32Val
    if !x.IsSetI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i32Val", thrift.I32, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.I32Val
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_3(p thrift.Format) error {  // I16Val
    if !x.IsSetI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i16Val", thrift.I16, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.I16Val
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_2(p thrift.Format) error {  // ByteVal
    if !x.IsSetByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("byteVal", thrift.BYTE, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.ByteVal
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_1(p thrift.Format) error {  // BoolVal
    if !x.IsSetBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("boolVal", thrift.BOOL, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.BoolVal
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField1(p thrift.Format) error {  // StructWithFieldCustomDefault
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.StructWithFieldCustomDefault
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) readField_32(p thrift.Format) error {  // StructWithCustomDefault
    result := *NewMyDataWithCustomDefault()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructWithCustomDefault = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_31(p thrift.Format) error {  // I32WithCustomDefault
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.I32WithCustomDefault = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_30(p thrift.Format) error {  // MapMap
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.MapMap = result
    return nil
}

func (x *MyStructEnsureStruct) readField_29(p thrift.Format) error {  // ListMap
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.ListMap = result
    return nil
}

func (x *MyStructEnsureStruct) readField_28(p thrift.Format) error {  // OptMapVal
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.OptMapVal = result
    return nil
}

func (x *MyStructEnsureStruct) readField_27(p thrift.Format) error {  // OptSetVal
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.OptSetVal = result
    return nil
}

func (x *MyStructEnsureStruct) readField_26(p thrift.Format) error {  // OptListVal
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptListVal = result
    return nil
}

func (x *MyStructEnsureStruct) readField_25(p thrift.Format) error {  // OptLateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptLateStructVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_24(p thrift.Format) error {  // OptStructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptStructVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_23(p thrift.Format) error {  // OptEnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.OptEnumVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_22(p thrift.Format) error {  // OptBinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.OptBinaryVal = result
    return nil
}

func (x *MyStructEnsureStruct) readField_21(p thrift.Format) error {  // OptStringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.OptStringVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_20(p thrift.Format) error {  // OptDoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.OptDoubleVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_19(p thrift.Format) error {  // OptFloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.OptFloatVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_18(p thrift.Format) error {  // OptI64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.OptI64Val = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_17(p thrift.Format) error {  // OptI32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.OptI32Val = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_16(p thrift.Format) error {  // OptI16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.OptI16Val = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_15(p thrift.Format) error {  // OptByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.OptByteVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_14(p thrift.Format) error {  // OptBoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.OptBoolVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_13(p thrift.Format) error {  // LateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.LateStructVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_12(p thrift.Format) error {  // UnionVal
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.UnionVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_11(p thrift.Format) error {  // StructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_10(p thrift.Format) error {  // EnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.EnumVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_9(p thrift.Format) error {  // BinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.BinaryVal = result
    return nil
}

func (x *MyStructEnsureStruct) readField_8(p thrift.Format) error {  // StringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.StringVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_7(p thrift.Format) error {  // DoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.DoubleVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_6(p thrift.Format) error {  // FloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.FloatVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_5(p thrift.Format) error {  // I64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.I64Val = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_4(p thrift.Format) error {  // I32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.I32Val = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_3(p thrift.Format) error {  // I16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.I16Val = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_2(p thrift.Format) error {  // ByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.ByteVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField_1(p thrift.Format) error {  // BoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.BoolVal = &result
    return nil
}

func (x *MyStructEnsureStruct) readField1(p thrift.Format) error {  // StructWithFieldCustomDefault
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.StructWithFieldCustomDefault = &result
    return nil
}

func (x *MyStructEnsureStruct) toString_32() string {  // StructWithCustomDefault
    return fmt.Sprintf("%v", x.StructWithCustomDefault)
}

func (x *MyStructEnsureStruct) toString_31() string {  // I32WithCustomDefault
    if x.IsSetI32WithCustomDefault() {
        return fmt.Sprintf("%v", *x.I32WithCustomDefault)
    }
    return fmt.Sprintf("%v", x.I32WithCustomDefault)
}

func (x *MyStructEnsureStruct) toString_30() string {  // MapMap
    return fmt.Sprintf("%v", x.MapMap)
}

func (x *MyStructEnsureStruct) toString_29() string {  // ListMap
    return fmt.Sprintf("%v", x.ListMap)
}

func (x *MyStructEnsureStruct) toString_28() string {  // OptMapVal
    return fmt.Sprintf("%v", x.OptMapVal)
}

func (x *MyStructEnsureStruct) toString_27() string {  // OptSetVal
    return fmt.Sprintf("%v", x.OptSetVal)
}

func (x *MyStructEnsureStruct) toString_26() string {  // OptListVal
    return fmt.Sprintf("%v", x.OptListVal)
}

func (x *MyStructEnsureStruct) toString_25() string {  // OptLateStructVal
    return fmt.Sprintf("%v", x.OptLateStructVal)
}

func (x *MyStructEnsureStruct) toString_24() string {  // OptStructVal
    return fmt.Sprintf("%v", x.OptStructVal)
}

func (x *MyStructEnsureStruct) toString_23() string {  // OptEnumVal
    if x.IsSetOptEnumVal() {
        return fmt.Sprintf("%v", *x.OptEnumVal)
    }
    return fmt.Sprintf("%v", x.OptEnumVal)
}

func (x *MyStructEnsureStruct) toString_22() string {  // OptBinaryVal
    return fmt.Sprintf("%v", x.OptBinaryVal)
}

func (x *MyStructEnsureStruct) toString_21() string {  // OptStringVal
    if x.IsSetOptStringVal() {
        return fmt.Sprintf("%v", *x.OptStringVal)
    }
    return fmt.Sprintf("%v", x.OptStringVal)
}

func (x *MyStructEnsureStruct) toString_20() string {  // OptDoubleVal
    if x.IsSetOptDoubleVal() {
        return fmt.Sprintf("%v", *x.OptDoubleVal)
    }
    return fmt.Sprintf("%v", x.OptDoubleVal)
}

func (x *MyStructEnsureStruct) toString_19() string {  // OptFloatVal
    if x.IsSetOptFloatVal() {
        return fmt.Sprintf("%v", *x.OptFloatVal)
    }
    return fmt.Sprintf("%v", x.OptFloatVal)
}

func (x *MyStructEnsureStruct) toString_18() string {  // OptI64Val
    if x.IsSetOptI64Val() {
        return fmt.Sprintf("%v", *x.OptI64Val)
    }
    return fmt.Sprintf("%v", x.OptI64Val)
}

func (x *MyStructEnsureStruct) toString_17() string {  // OptI32Val
    if x.IsSetOptI32Val() {
        return fmt.Sprintf("%v", *x.OptI32Val)
    }
    return fmt.Sprintf("%v", x.OptI32Val)
}

func (x *MyStructEnsureStruct) toString_16() string {  // OptI16Val
    if x.IsSetOptI16Val() {
        return fmt.Sprintf("%v", *x.OptI16Val)
    }
    return fmt.Sprintf("%v", x.OptI16Val)
}

func (x *MyStructEnsureStruct) toString_15() string {  // OptByteVal
    if x.IsSetOptByteVal() {
        return fmt.Sprintf("%v", *x.OptByteVal)
    }
    return fmt.Sprintf("%v", x.OptByteVal)
}

func (x *MyStructEnsureStruct) toString_14() string {  // OptBoolVal
    if x.IsSetOptBoolVal() {
        return fmt.Sprintf("%v", *x.OptBoolVal)
    }
    return fmt.Sprintf("%v", x.OptBoolVal)
}

func (x *MyStructEnsureStruct) toString_13() string {  // LateStructVal
    return fmt.Sprintf("%v", x.LateStructVal)
}

func (x *MyStructEnsureStruct) toString_12() string {  // UnionVal
    return fmt.Sprintf("%v", x.UnionVal)
}

func (x *MyStructEnsureStruct) toString_11() string {  // StructVal
    return fmt.Sprintf("%v", x.StructVal)
}

func (x *MyStructEnsureStruct) toString_10() string {  // EnumVal
    if x.IsSetEnumVal() {
        return fmt.Sprintf("%v", *x.EnumVal)
    }
    return fmt.Sprintf("%v", x.EnumVal)
}

func (x *MyStructEnsureStruct) toString_9() string {  // BinaryVal
    return fmt.Sprintf("%v", x.BinaryVal)
}

func (x *MyStructEnsureStruct) toString_8() string {  // StringVal
    if x.IsSetStringVal() {
        return fmt.Sprintf("%v", *x.StringVal)
    }
    return fmt.Sprintf("%v", x.StringVal)
}

func (x *MyStructEnsureStruct) toString_7() string {  // DoubleVal
    if x.IsSetDoubleVal() {
        return fmt.Sprintf("%v", *x.DoubleVal)
    }
    return fmt.Sprintf("%v", x.DoubleVal)
}

func (x *MyStructEnsureStruct) toString_6() string {  // FloatVal
    if x.IsSetFloatVal() {
        return fmt.Sprintf("%v", *x.FloatVal)
    }
    return fmt.Sprintf("%v", x.FloatVal)
}

func (x *MyStructEnsureStruct) toString_5() string {  // I64Val
    if x.IsSetI64Val() {
        return fmt.Sprintf("%v", *x.I64Val)
    }
    return fmt.Sprintf("%v", x.I64Val)
}

func (x *MyStructEnsureStruct) toString_4() string {  // I32Val
    if x.IsSetI32Val() {
        return fmt.Sprintf("%v", *x.I32Val)
    }
    return fmt.Sprintf("%v", x.I32Val)
}

func (x *MyStructEnsureStruct) toString_3() string {  // I16Val
    if x.IsSetI16Val() {
        return fmt.Sprintf("%v", *x.I16Val)
    }
    return fmt.Sprintf("%v", x.I16Val)
}

func (x *MyStructEnsureStruct) toString_2() string {  // ByteVal
    if x.IsSetByteVal() {
        return fmt.Sprintf("%v", *x.ByteVal)
    }
    return fmt.Sprintf("%v", x.ByteVal)
}

func (x *MyStructEnsureStruct) toString_1() string {  // BoolVal
    if x.IsSetBoolVal() {
        return fmt.Sprintf("%v", *x.BoolVal)
    }
    return fmt.Sprintf("%v", x.BoolVal)
}

func (x *MyStructEnsureStruct) toString1() string {  // StructWithFieldCustomDefault
    return fmt.Sprintf("%v", x.StructWithFieldCustomDefault)
}

// Deprecated: Use NewMyStructEnsureStruct().GetStructWithCustomDefault() instead.
func (x *MyStructEnsureStruct) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return NewMyDataWithCustomDefault()
    }
    return x.StructWithCustomDefault
}


// Deprecated: Use NewMyStructEnsureStruct().GetOptLateStructVal() instead.
func (x *MyStructEnsureStruct) DefaultGetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return NewLateDefStruct()
    }
    return x.OptLateStructVal
}

// Deprecated: Use NewMyStructEnsureStruct().GetOptStructVal() instead.
func (x *MyStructEnsureStruct) DefaultGetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return NewMyData()
    }
    return x.OptStructVal
}










// Deprecated: Use NewMyStructEnsureStruct().GetLateStructVal() instead.
func (x *MyStructEnsureStruct) DefaultGetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return NewLateDefStruct()
    }
    return x.LateStructVal
}

// Deprecated: Use NewMyStructEnsureStruct().GetUnionVal() instead.
func (x *MyStructEnsureStruct) DefaultGetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return NewMyUnion()
    }
    return x.UnionVal
}

// Deprecated: Use NewMyStructEnsureStruct().GetStructVal() instead.
func (x *MyStructEnsureStruct) DefaultGetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return NewMyData()
    }
    return x.StructVal
}










// Deprecated: Use NewMyStructEnsureStruct().GetStructWithFieldCustomDefault() instead.
func (x *MyStructEnsureStruct) DefaultGetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return NewMyData()
    }
    return x.StructWithFieldCustomDefault
}



func (x *MyStructEnsureStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_32(p); err != nil {
        return err
    }

    if err := x.writeField_31(p); err != nil {
        return err
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -32 && wireType == thrift.Type(thrift.STRUCT)):  // structWithCustomDefault
            if err := x.readField_32(p); err != nil {
                return err
            }
        case (id == -31 && wireType == thrift.Type(thrift.I32)):  // i32WithCustomDefault
            if err := x.readField_31(p); err != nil {
                return err
            }
        case (id == -30 && wireType == thrift.Type(thrift.MAP)):  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        case (id == -29 && wireType == thrift.Type(thrift.LIST)):  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case (id == -28 && wireType == thrift.Type(thrift.MAP)):  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case (id == -27 && wireType == thrift.Type(thrift.SET)):  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case (id == -26 && wireType == thrift.Type(thrift.LIST)):  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case (id == -25 && wireType == thrift.Type(thrift.STRUCT)):  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case (id == -24 && wireType == thrift.Type(thrift.STRUCT)):  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case (id == -23 && wireType == thrift.Type(thrift.I32)):  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case (id == -22 && wireType == thrift.Type(thrift.STRING)):  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case (id == -21 && wireType == thrift.Type(thrift.STRING)):  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case (id == -20 && wireType == thrift.Type(thrift.DOUBLE)):  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case (id == -19 && wireType == thrift.Type(thrift.FLOAT)):  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case (id == -18 && wireType == thrift.Type(thrift.I64)):  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case (id == -17 && wireType == thrift.Type(thrift.I32)):  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case (id == -16 && wireType == thrift.Type(thrift.I16)):  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case (id == -15 && wireType == thrift.Type(thrift.BYTE)):  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case (id == -14 && wireType == thrift.Type(thrift.BOOL)):  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case (id == -13 && wireType == thrift.Type(thrift.STRUCT)):  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case (id == -12 && wireType == thrift.Type(thrift.STRUCT)):  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case (id == -11 && wireType == thrift.Type(thrift.STRUCT)):  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case (id == -10 && wireType == thrift.Type(thrift.I32)):  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case (id == -9 && wireType == thrift.Type(thrift.STRING)):  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case (id == -8 && wireType == thrift.Type(thrift.STRING)):  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case (id == -7 && wireType == thrift.Type(thrift.DOUBLE)):  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case (id == -6 && wireType == thrift.Type(thrift.FLOAT)):  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case (id == -5 && wireType == thrift.Type(thrift.I64)):  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case (id == -4 && wireType == thrift.Type(thrift.I32)):  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case (id == -3 && wireType == thrift.Type(thrift.I16)):  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case (id == -2 && wireType == thrift.Type(thrift.BYTE)):  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case (id == -1 && wireType == thrift.Type(thrift.BOOL)):  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // structWithFieldCustomDefault
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructEnsureStruct({")
    sb.WriteString(fmt.Sprintf("StructWithCustomDefault:%s ", x.toString_32()))
    sb.WriteString(fmt.Sprintf("I32WithCustomDefault:%s ", x.toString_31()))
    sb.WriteString(fmt.Sprintf("MapMap:%s ", x.toString_30()))
    sb.WriteString(fmt.Sprintf("ListMap:%s ", x.toString_29()))
    sb.WriteString(fmt.Sprintf("OptMapVal:%s ", x.toString_28()))
    sb.WriteString(fmt.Sprintf("OptSetVal:%s ", x.toString_27()))
    sb.WriteString(fmt.Sprintf("OptListVal:%s ", x.toString_26()))
    sb.WriteString(fmt.Sprintf("OptLateStructVal:%s ", x.toString_25()))
    sb.WriteString(fmt.Sprintf("OptStructVal:%s ", x.toString_24()))
    sb.WriteString(fmt.Sprintf("OptEnumVal:%s ", x.toString_23()))
    sb.WriteString(fmt.Sprintf("OptBinaryVal:%s ", x.toString_22()))
    sb.WriteString(fmt.Sprintf("OptStringVal:%s ", x.toString_21()))
    sb.WriteString(fmt.Sprintf("OptDoubleVal:%s ", x.toString_20()))
    sb.WriteString(fmt.Sprintf("OptFloatVal:%s ", x.toString_19()))
    sb.WriteString(fmt.Sprintf("OptI64Val:%s ", x.toString_18()))
    sb.WriteString(fmt.Sprintf("OptI32Val:%s ", x.toString_17()))
    sb.WriteString(fmt.Sprintf("OptI16Val:%s ", x.toString_16()))
    sb.WriteString(fmt.Sprintf("OptByteVal:%s ", x.toString_15()))
    sb.WriteString(fmt.Sprintf("OptBoolVal:%s ", x.toString_14()))
    sb.WriteString(fmt.Sprintf("LateStructVal:%s ", x.toString_13()))
    sb.WriteString(fmt.Sprintf("UnionVal:%s ", x.toString_12()))
    sb.WriteString(fmt.Sprintf("StructVal:%s ", x.toString_11()))
    sb.WriteString(fmt.Sprintf("EnumVal:%s ", x.toString_10()))
    sb.WriteString(fmt.Sprintf("BinaryVal:%s ", x.toString_9()))
    sb.WriteString(fmt.Sprintf("StringVal:%s ", x.toString_8()))
    sb.WriteString(fmt.Sprintf("DoubleVal:%s ", x.toString_7()))
    sb.WriteString(fmt.Sprintf("FloatVal:%s ", x.toString_6()))
    sb.WriteString(fmt.Sprintf("I64Val:%s ", x.toString_5()))
    sb.WriteString(fmt.Sprintf("I32Val:%s ", x.toString_4()))
    sb.WriteString(fmt.Sprintf("I16Val:%s ", x.toString_3()))
    sb.WriteString(fmt.Sprintf("ByteVal:%s ", x.toString_2()))
    sb.WriteString(fmt.Sprintf("BoolVal:%s ", x.toString_1()))
    sb.WriteString(fmt.Sprintf("StructWithFieldCustomDefault:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*MyStructSafePatch)(nil)

func NewMyStructSafePatch() *MyStructSafePatch {
    return (&MyStructSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *MyStructSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *MyStructSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *MyStructSafePatch) SetVersionNonCompat(value int32) *MyStructSafePatch {
    x.Version = value
    return x
}

func (x *MyStructSafePatch) SetVersion(value int32) *MyStructSafePatch {
    x.Version = value
    return x
}

func (x *MyStructSafePatch) SetDataNonCompat(value []byte) *MyStructSafePatch {
    x.Data = value
    return x
}

func (x *MyStructSafePatch) SetData(value []byte) *MyStructSafePatch {
    x.Data = value
    return x
}

func (x *MyStructSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *MyStructSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *MyStructSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *MyStructSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *MyStructSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *MyStructSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("MyStructSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type LateDefStructPatch struct {
    Assign *LateDefStruct `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *LateDefStructFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *LateDefStructEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *LateDefStructFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*LateDefStructPatch)(nil)

func NewLateDefStructPatch() *LateDefStructPatch {
    return (&LateDefStructPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewLateDefStructFieldPatch()).
        SetEnsureNonCompat(*NewLateDefStructEnsureStruct()).
        SetPatchNonCompat(*NewLateDefStructFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *LateDefStructPatch) GetAssign() *LateDefStruct {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *LateDefStructPatch) GetClear() bool {
    return x.Clear
}

func (x *LateDefStructPatch) GetPatchPrior() *LateDefStructFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *LateDefStructPatch) GetEnsure() *LateDefStructEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *LateDefStructPatch) GetPatch() *LateDefStructFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *LateDefStructPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *LateDefStructPatch) SetAssignNonCompat(value LateDefStruct) *LateDefStructPatch {
    x.Assign = &value
    return x
}

func (x *LateDefStructPatch) SetAssign(value *LateDefStruct) *LateDefStructPatch {
    x.Assign = value
    return x
}

func (x *LateDefStructPatch) SetClearNonCompat(value bool) *LateDefStructPatch {
    x.Clear = value
    return x
}

func (x *LateDefStructPatch) SetClear(value bool) *LateDefStructPatch {
    x.Clear = value
    return x
}

func (x *LateDefStructPatch) SetPatchPriorNonCompat(value LateDefStructFieldPatch) *LateDefStructPatch {
    x.PatchPrior = &value
    return x
}

func (x *LateDefStructPatch) SetPatchPrior(value *LateDefStructFieldPatch) *LateDefStructPatch {
    x.PatchPrior = value
    return x
}

func (x *LateDefStructPatch) SetEnsureNonCompat(value LateDefStructEnsureStruct) *LateDefStructPatch {
    x.Ensure = &value
    return x
}

func (x *LateDefStructPatch) SetEnsure(value *LateDefStructEnsureStruct) *LateDefStructPatch {
    x.Ensure = value
    return x
}

func (x *LateDefStructPatch) SetPatchNonCompat(value LateDefStructFieldPatch) *LateDefStructPatch {
    x.Patch = &value
    return x
}

func (x *LateDefStructPatch) SetPatch(value *LateDefStructFieldPatch) *LateDefStructPatch {
    x.Patch = value
    return x
}

func (x *LateDefStructPatch) SetRemoveNonCompat(value patch.FieldIdList) *LateDefStructPatch {
    x.Remove = value
    return x
}

func (x *LateDefStructPatch) SetRemove(value patch.FieldIdList) *LateDefStructPatch {
    x.Remove = value
    return x
}

func (x *LateDefStructPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *LateDefStructPatch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *LateDefStructPatch) IsSetEnsure() bool {
    return x != nil && x.Ensure != nil
}

func (x *LateDefStructPatch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *LateDefStructPatch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *LateDefStructPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField3(p thrift.Format) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField5(p thrift.Format) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Ensure
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField6(p thrift.Format) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) readField1(p thrift.Format) error {  // Assign
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *LateDefStructPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *LateDefStructPatch) readField3(p thrift.Format) error {  // PatchPrior
    result := *NewLateDefStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.PatchPrior = &result
    return nil
}

func (x *LateDefStructPatch) readField5(p thrift.Format) error {  // Ensure
    result := *NewLateDefStructEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.Ensure = &result
    return nil
}

func (x *LateDefStructPatch) readField6(p thrift.Format) error {  // Patch
    result := *NewLateDefStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Patch = &result
    return nil
}

func (x *LateDefStructPatch) readField7(p thrift.Format) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.Remove = result
    return nil
}

func (x *LateDefStructPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *LateDefStructPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *LateDefStructPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *LateDefStructPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.Ensure)
}

func (x *LateDefStructPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *LateDefStructPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

// Deprecated: Use NewLateDefStructPatch().GetAssign() instead.
func (x *LateDefStructPatch) DefaultGetAssign() *LateDefStruct {
    if !x.IsSetAssign() {
        return NewLateDefStruct()
    }
    return x.Assign
}

// Deprecated: Use NewLateDefStructPatch().GetPatchPrior() instead.
func (x *LateDefStructPatch) DefaultGetPatchPrior() *LateDefStructFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewLateDefStructFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewLateDefStructPatch().GetEnsure() instead.
func (x *LateDefStructPatch) DefaultGetEnsure() *LateDefStructEnsureStruct {
    if !x.IsSetEnsure() {
        return NewLateDefStructEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewLateDefStructPatch().GetPatch() instead.
func (x *LateDefStructPatch) DefaultGetPatch() *LateDefStructFieldPatch {
    if !x.IsSetPatch() {
        return NewLateDefStructFieldPatch()
    }
    return x.Patch
}



func (x *LateDefStructPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("LateDefStructPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.STRUCT)):  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStructPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStructPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type LateDefStructFieldPatch struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*LateDefStructFieldPatch)(nil)

func NewLateDefStructFieldPatch() *LateDefStructFieldPatch {
    return (&LateDefStructFieldPatch{})
}



func (x *LateDefStructFieldPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("LateDefStructFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructFieldPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStructFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStructFieldPatch({")
    sb.WriteString("})")

    return sb.String()
}

type LateDefStructEnsureStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = (*LateDefStructEnsureStruct)(nil)

func NewLateDefStructEnsureStruct() *LateDefStructEnsureStruct {
    return (&LateDefStructEnsureStruct{})
}



func (x *LateDefStructEnsureStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("LateDefStructEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructEnsureStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStructEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStructEnsureStruct({")
    sb.WriteString("})")

    return sb.String()
}

type LateDefStructSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*LateDefStructSafePatch)(nil)

func NewLateDefStructSafePatch() *LateDefStructSafePatch {
    return (&LateDefStructSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *LateDefStructSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *LateDefStructSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *LateDefStructSafePatch) SetVersionNonCompat(value int32) *LateDefStructSafePatch {
    x.Version = value
    return x
}

func (x *LateDefStructSafePatch) SetVersion(value int32) *LateDefStructSafePatch {
    x.Version = value
    return x
}

func (x *LateDefStructSafePatch) SetDataNonCompat(value []byte) *LateDefStructSafePatch {
    x.Data = value
    return x
}

func (x *LateDefStructSafePatch) SetData(value []byte) *LateDefStructSafePatch {
    x.Data = value
    return x
}

func (x *LateDefStructSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *LateDefStructSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *LateDefStructSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *LateDefStructSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *LateDefStructSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *LateDefStructSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("LateDefStructSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStructSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStructSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type RecursivePatch struct {
    Assign *Recursive `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *RecursiveFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *RecursiveEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *RecursiveFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RecursivePatch)(nil)

func NewRecursivePatch() *RecursivePatch {
    return (&RecursivePatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewRecursiveFieldPatch()).
        SetEnsureNonCompat(*NewRecursiveEnsureStruct()).
        SetPatchNonCompat(*NewRecursiveFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *RecursivePatch) GetAssign() *Recursive {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *RecursivePatch) GetClear() bool {
    return x.Clear
}

func (x *RecursivePatch) GetPatchPrior() *RecursiveFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *RecursivePatch) GetEnsure() *RecursiveEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *RecursivePatch) GetPatch() *RecursiveFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *RecursivePatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *RecursivePatch) SetAssignNonCompat(value Recursive) *RecursivePatch {
    x.Assign = &value
    return x
}

func (x *RecursivePatch) SetAssign(value *Recursive) *RecursivePatch {
    x.Assign = value
    return x
}

func (x *RecursivePatch) SetClearNonCompat(value bool) *RecursivePatch {
    x.Clear = value
    return x
}

func (x *RecursivePatch) SetClear(value bool) *RecursivePatch {
    x.Clear = value
    return x
}

func (x *RecursivePatch) SetPatchPriorNonCompat(value RecursiveFieldPatch) *RecursivePatch {
    x.PatchPrior = &value
    return x
}

func (x *RecursivePatch) SetPatchPrior(value *RecursiveFieldPatch) *RecursivePatch {
    x.PatchPrior = value
    return x
}

func (x *RecursivePatch) SetEnsureNonCompat(value RecursiveEnsureStruct) *RecursivePatch {
    x.Ensure = &value
    return x
}

func (x *RecursivePatch) SetEnsure(value *RecursiveEnsureStruct) *RecursivePatch {
    x.Ensure = value
    return x
}

func (x *RecursivePatch) SetPatchNonCompat(value RecursiveFieldPatch) *RecursivePatch {
    x.Patch = &value
    return x
}

func (x *RecursivePatch) SetPatch(value *RecursiveFieldPatch) *RecursivePatch {
    x.Patch = value
    return x
}

func (x *RecursivePatch) SetRemoveNonCompat(value patch.FieldIdList) *RecursivePatch {
    x.Remove = value
    return x
}

func (x *RecursivePatch) SetRemove(value patch.FieldIdList) *RecursivePatch {
    x.Remove = value
    return x
}

func (x *RecursivePatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *RecursivePatch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *RecursivePatch) IsSetEnsure() bool {
    return x != nil && x.Ensure != nil
}

func (x *RecursivePatch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *RecursivePatch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *RecursivePatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField3(p thrift.Format) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField5(p thrift.Format) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Ensure
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField6(p thrift.Format) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) readField1(p thrift.Format) error {  // Assign
    result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *RecursivePatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *RecursivePatch) readField3(p thrift.Format) error {  // PatchPrior
    result := *NewRecursiveFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.PatchPrior = &result
    return nil
}

func (x *RecursivePatch) readField5(p thrift.Format) error {  // Ensure
    result := *NewRecursiveEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.Ensure = &result
    return nil
}

func (x *RecursivePatch) readField6(p thrift.Format) error {  // Patch
    result := *NewRecursiveFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Patch = &result
    return nil
}

func (x *RecursivePatch) readField7(p thrift.Format) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.Remove = result
    return nil
}

func (x *RecursivePatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *RecursivePatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *RecursivePatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *RecursivePatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.Ensure)
}

func (x *RecursivePatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *RecursivePatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

// Deprecated: Use NewRecursivePatch().GetAssign() instead.
func (x *RecursivePatch) DefaultGetAssign() *Recursive {
    if !x.IsSetAssign() {
        return NewRecursive()
    }
    return x.Assign
}

// Deprecated: Use NewRecursivePatch().GetPatchPrior() instead.
func (x *RecursivePatch) DefaultGetPatchPrior() *RecursiveFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewRecursiveFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewRecursivePatch().GetEnsure() instead.
func (x *RecursivePatch) DefaultGetEnsure() *RecursiveEnsureStruct {
    if !x.IsSetEnsure() {
        return NewRecursiveEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewRecursivePatch().GetPatch() instead.
func (x *RecursivePatch) DefaultGetPatch() *RecursiveFieldPatch {
    if !x.IsSetPatch() {
        return NewRecursiveFieldPatch()
    }
    return x.Patch
}



func (x *RecursivePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RecursivePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.STRUCT)):  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RecursivePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RecursivePatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type RecursiveField1Patch struct {
    Assign map[string]*Recursive `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RecursiveField1Patch)(nil)

func NewRecursiveField1Patch() *RecursiveField1Patch {
    return (&RecursiveField1Patch{}).
        SetClearNonCompat(false)
}

func (x *RecursiveField1Patch) GetAssign() map[string]*Recursive {
    if !x.IsSetAssign() {
        return make(map[string]*Recursive)
    }

    return x.Assign
}

func (x *RecursiveField1Patch) GetClear() bool {
    return x.Clear
}

func (x *RecursiveField1Patch) SetAssignNonCompat(value map[string]*Recursive) *RecursiveField1Patch {
    x.Assign = value
    return x
}

func (x *RecursiveField1Patch) SetAssign(value map[string]*Recursive) *RecursiveField1Patch {
    x.Assign = value
    return x
}

func (x *RecursiveField1Patch) SetClearNonCompat(value bool) *RecursiveField1Patch {
    x.Clear = value
    return x
}

func (x *RecursiveField1Patch) SetClear(value bool) *RecursiveField1Patch {
    x.Clear = value
    return x
}

func (x *RecursiveField1Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *RecursiveField1Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveField1Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveField1Patch) readField1(p thrift.Format) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Assign = result
    return nil
}

func (x *RecursiveField1Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *RecursiveField1Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *RecursiveField1Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}



func (x *RecursiveField1Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RecursiveField1Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveField1Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.MAP)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RecursiveField1Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RecursiveField1Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type RecursiveFieldPatch struct {
    Nodes *RecursiveField1Patch `thrift:"nodes,-1" json:"nodes" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RecursiveFieldPatch)(nil)

func NewRecursiveFieldPatch() *RecursiveFieldPatch {
    return (&RecursiveFieldPatch{}).
        SetNodesNonCompat(*NewRecursiveField1Patch())
}

func (x *RecursiveFieldPatch) GetNodes() *RecursiveField1Patch {
    if !x.IsSetNodes() {
        return nil
    }

    return x.Nodes
}

func (x *RecursiveFieldPatch) SetNodesNonCompat(value RecursiveField1Patch) *RecursiveFieldPatch {
    x.Nodes = &value
    return x
}

func (x *RecursiveFieldPatch) SetNodes(value *RecursiveField1Patch) *RecursiveFieldPatch {
    x.Nodes = value
    return x
}

func (x *RecursiveFieldPatch) IsSetNodes() bool {
    return x != nil && x.Nodes != nil
}

func (x *RecursiveFieldPatch) writeField_1(p thrift.Format) error {  // Nodes
    if !x.IsSetNodes() {
        return nil
    }

    if err := p.WriteFieldBegin("nodes", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Nodes
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveFieldPatch) readField_1(p thrift.Format) error {  // Nodes
    result := *NewRecursiveField1Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Nodes = &result
    return nil
}

func (x *RecursiveFieldPatch) toString_1() string {  // Nodes
    return fmt.Sprintf("%v", x.Nodes)
}

// Deprecated: Use NewRecursiveFieldPatch().GetNodes() instead.
func (x *RecursiveFieldPatch) DefaultGetNodes() *RecursiveField1Patch {
    if !x.IsSetNodes() {
        return NewRecursiveField1Patch()
    }
    return x.Nodes
}



func (x *RecursiveFieldPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RecursiveFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveFieldPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.STRUCT)):  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RecursiveFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RecursiveFieldPatch({")
    sb.WriteString(fmt.Sprintf("Nodes:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type RecursiveEnsureStruct struct {
    Nodes map[string]*Recursive `thrift:"nodes,-1,optional" json:"nodes,omitempty" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RecursiveEnsureStruct)(nil)

func NewRecursiveEnsureStruct() *RecursiveEnsureStruct {
    return (&RecursiveEnsureStruct{})
}

func (x *RecursiveEnsureStruct) GetNodes() map[string]*Recursive {
    if !x.IsSetNodes() {
        return make(map[string]*Recursive)
    }

    return x.Nodes
}

func (x *RecursiveEnsureStruct) SetNodesNonCompat(value map[string]*Recursive) *RecursiveEnsureStruct {
    x.Nodes = value
    return x
}

func (x *RecursiveEnsureStruct) SetNodes(value map[string]*Recursive) *RecursiveEnsureStruct {
    x.Nodes = value
    return x
}

func (x *RecursiveEnsureStruct) IsSetNodes() bool {
    return x != nil && x.Nodes != nil
}

func (x *RecursiveEnsureStruct) writeField_1(p thrift.Format) error {  // Nodes
    if !x.IsSetNodes() {
        return nil
    }

    if err := p.WriteFieldBegin("nodes", thrift.MAP, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Nodes
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveEnsureStruct) readField_1(p thrift.Format) error {  // Nodes
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.Nodes = result
    return nil
}

func (x *RecursiveEnsureStruct) toString_1() string {  // Nodes
    return fmt.Sprintf("%v", x.Nodes)
}



func (x *RecursiveEnsureStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RecursiveEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveEnsureStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.MAP)):  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RecursiveEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RecursiveEnsureStruct({")
    sb.WriteString(fmt.Sprintf("Nodes:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type RecursiveSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RecursiveSafePatch)(nil)

func NewRecursiveSafePatch() *RecursiveSafePatch {
    return (&RecursiveSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *RecursiveSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *RecursiveSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *RecursiveSafePatch) SetVersionNonCompat(value int32) *RecursiveSafePatch {
    x.Version = value
    return x
}

func (x *RecursiveSafePatch) SetVersion(value int32) *RecursiveSafePatch {
    x.Version = value
    return x
}

func (x *RecursiveSafePatch) SetDataNonCompat(value []byte) *RecursiveSafePatch {
    x.Data = value
    return x
}

func (x *RecursiveSafePatch) SetData(value []byte) *RecursiveSafePatch {
    x.Data = value
    return x
}

func (x *RecursiveSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *RecursiveSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *RecursiveSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *RecursiveSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *RecursiveSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *RecursiveSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RecursiveSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RecursiveSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RecursiveSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type BarPatch struct {
    Assign *Bar `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *BarFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *BarEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *BarFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*BarPatch)(nil)

func NewBarPatch() *BarPatch {
    return (&BarPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewBarFieldPatch()).
        SetEnsureNonCompat(*NewBarEnsureStruct()).
        SetPatchNonCompat(*NewBarFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *BarPatch) GetAssign() *Bar {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *BarPatch) GetClear() bool {
    return x.Clear
}

func (x *BarPatch) GetPatchPrior() *BarFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *BarPatch) GetEnsure() *BarEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *BarPatch) GetPatch() *BarFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *BarPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *BarPatch) SetAssignNonCompat(value Bar) *BarPatch {
    x.Assign = &value
    return x
}

func (x *BarPatch) SetAssign(value *Bar) *BarPatch {
    x.Assign = value
    return x
}

func (x *BarPatch) SetClearNonCompat(value bool) *BarPatch {
    x.Clear = value
    return x
}

func (x *BarPatch) SetClear(value bool) *BarPatch {
    x.Clear = value
    return x
}

func (x *BarPatch) SetPatchPriorNonCompat(value BarFieldPatch) *BarPatch {
    x.PatchPrior = &value
    return x
}

func (x *BarPatch) SetPatchPrior(value *BarFieldPatch) *BarPatch {
    x.PatchPrior = value
    return x
}

func (x *BarPatch) SetEnsureNonCompat(value BarEnsureStruct) *BarPatch {
    x.Ensure = &value
    return x
}

func (x *BarPatch) SetEnsure(value *BarEnsureStruct) *BarPatch {
    x.Ensure = value
    return x
}

func (x *BarPatch) SetPatchNonCompat(value BarFieldPatch) *BarPatch {
    x.Patch = &value
    return x
}

func (x *BarPatch) SetPatch(value *BarFieldPatch) *BarPatch {
    x.Patch = value
    return x
}

func (x *BarPatch) SetRemoveNonCompat(value patch.FieldIdList) *BarPatch {
    x.Remove = value
    return x
}

func (x *BarPatch) SetRemove(value patch.FieldIdList) *BarPatch {
    x.Remove = value
    return x
}

func (x *BarPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *BarPatch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *BarPatch) IsSetEnsure() bool {
    return x != nil && x.Ensure != nil
}

func (x *BarPatch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *BarPatch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *BarPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField3(p thrift.Format) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField5(p thrift.Format) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Ensure
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField6(p thrift.Format) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) readField1(p thrift.Format) error {  // Assign
    result := *NewBar()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *BarPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *BarPatch) readField3(p thrift.Format) error {  // PatchPrior
    result := *NewBarFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.PatchPrior = &result
    return nil
}

func (x *BarPatch) readField5(p thrift.Format) error {  // Ensure
    result := *NewBarEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.Ensure = &result
    return nil
}

func (x *BarPatch) readField6(p thrift.Format) error {  // Patch
    result := *NewBarFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Patch = &result
    return nil
}

func (x *BarPatch) readField7(p thrift.Format) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.Remove = result
    return nil
}

func (x *BarPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *BarPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *BarPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *BarPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.Ensure)
}

func (x *BarPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *BarPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

// Deprecated: Use NewBarPatch().GetAssign() instead.
func (x *BarPatch) DefaultGetAssign() *Bar {
    if !x.IsSetAssign() {
        return NewBar()
    }
    return x.Assign
}

// Deprecated: Use NewBarPatch().GetPatchPrior() instead.
func (x *BarPatch) DefaultGetPatchPrior() *BarFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewBarFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewBarPatch().GetEnsure() instead.
func (x *BarPatch) DefaultGetEnsure() *BarEnsureStruct {
    if !x.IsSetEnsure() {
        return NewBarEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewBarPatch().GetPatch() instead.
func (x *BarPatch) DefaultGetPatch() *BarFieldPatch {
    if !x.IsSetPatch() {
        return NewBarFieldPatch()
    }
    return x.Patch
}



func (x *BarPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("BarPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.STRUCT)):  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BarPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BarPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type BarFieldPatch struct {
    Loop *LoopPatch `thrift:"loop,-1" json:"loop" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*BarFieldPatch)(nil)

func NewBarFieldPatch() *BarFieldPatch {
    return (&BarFieldPatch{}).
        SetLoopNonCompat(*NewLoopPatch())
}

func (x *BarFieldPatch) GetLoop() *LoopPatch {
    if !x.IsSetLoop() {
        return nil
    }

    return x.Loop
}

func (x *BarFieldPatch) SetLoopNonCompat(value LoopPatch) *BarFieldPatch {
    x.Loop = &value
    return x
}

func (x *BarFieldPatch) SetLoop(value *LoopPatch) *BarFieldPatch {
    x.Loop = value
    return x
}

func (x *BarFieldPatch) IsSetLoop() bool {
    return x != nil && x.Loop != nil
}

func (x *BarFieldPatch) writeField_1(p thrift.Format) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Loop
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarFieldPatch) readField_1(p thrift.Format) error {  // Loop
    result := *NewLoopPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Loop = &result
    return nil
}

func (x *BarFieldPatch) toString_1() string {  // Loop
    return fmt.Sprintf("%v", x.Loop)
}

// Deprecated: Use NewBarFieldPatch().GetLoop() instead.
func (x *BarFieldPatch) DefaultGetLoop() *LoopPatch {
    if !x.IsSetLoop() {
        return NewLoopPatch()
    }
    return x.Loop
}



func (x *BarFieldPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("BarFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarFieldPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.STRUCT)):  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BarFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BarFieldPatch({")
    sb.WriteString(fmt.Sprintf("Loop:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type BarEnsureStruct struct {
    Loop *Loop `thrift:"loop,-1,optional" json:"loop,omitempty" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*BarEnsureStruct)(nil)

func NewBarEnsureStruct() *BarEnsureStruct {
    return (&BarEnsureStruct{})
}

func (x *BarEnsureStruct) GetLoop() *Loop {
    if !x.IsSetLoop() {
        return nil
    }

    return x.Loop
}

func (x *BarEnsureStruct) SetLoopNonCompat(value Loop) *BarEnsureStruct {
    x.Loop = &value
    return x
}

func (x *BarEnsureStruct) SetLoop(value *Loop) *BarEnsureStruct {
    x.Loop = value
    return x
}

func (x *BarEnsureStruct) IsSetLoop() bool {
    return x != nil && x.Loop != nil
}

func (x *BarEnsureStruct) writeField_1(p thrift.Format) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Loop
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarEnsureStruct) readField_1(p thrift.Format) error {  // Loop
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.Loop = &result
    return nil
}

func (x *BarEnsureStruct) toString_1() string {  // Loop
    return fmt.Sprintf("%v", x.Loop)
}

// Deprecated: Use NewBarEnsureStruct().GetLoop() instead.
func (x *BarEnsureStruct) DefaultGetLoop() *Loop {
    if !x.IsSetLoop() {
        return NewLoop()
    }
    return x.Loop
}



func (x *BarEnsureStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("BarEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarEnsureStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == -1 && wireType == thrift.Type(thrift.STRUCT)):  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BarEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BarEnsureStruct({")
    sb.WriteString(fmt.Sprintf("Loop:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type BarSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*BarSafePatch)(nil)

func NewBarSafePatch() *BarSafePatch {
    return (&BarSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *BarSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *BarSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *BarSafePatch) SetVersionNonCompat(value int32) *BarSafePatch {
    x.Version = value
    return x
}

func (x *BarSafePatch) SetVersion(value int32) *BarSafePatch {
    x.Version = value
    return x
}

func (x *BarSafePatch) SetDataNonCompat(value []byte) *BarSafePatch {
    x.Data = value
    return x
}

func (x *BarSafePatch) SetData(value []byte) *BarSafePatch {
    x.Data = value
    return x
}

func (x *BarSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *BarSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *BarSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *BarSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *BarSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *BarSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("BarSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BarSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BarSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type LoopPatch struct {
    Assign *Loop `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*LoopPatch)(nil)

func NewLoopPatch() *LoopPatch {
    return (&LoopPatch{}).
        SetClearNonCompat(false)
}

func (x *LoopPatch) GetAssign() *Loop {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *LoopPatch) GetClear() bool {
    return x.Clear
}

func (x *LoopPatch) SetAssignNonCompat(value Loop) *LoopPatch {
    x.Assign = &value
    return x
}

func (x *LoopPatch) SetAssign(value *Loop) *LoopPatch {
    x.Assign = value
    return x
}

func (x *LoopPatch) SetClearNonCompat(value bool) *LoopPatch {
    x.Clear = value
    return x
}

func (x *LoopPatch) SetClear(value bool) *LoopPatch {
    x.Clear = value
    return x
}

func (x *LoopPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *LoopPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopPatch) readField1(p thrift.Format) error {  // Assign
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *LoopPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *LoopPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *LoopPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

// Deprecated: Use NewLoopPatch().GetAssign() instead.
func (x *LoopPatch) DefaultGetAssign() *Loop {
    if !x.IsSetAssign() {
        return NewLoop()
    }
    return x.Assign
}



func (x *LoopPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("LoopPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LoopPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LoopPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LoopPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type LoopSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*LoopSafePatch)(nil)

func NewLoopSafePatch() *LoopSafePatch {
    return (&LoopSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *LoopSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *LoopSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *LoopSafePatch) SetVersionNonCompat(value int32) *LoopSafePatch {
    x.Version = value
    return x
}

func (x *LoopSafePatch) SetVersion(value int32) *LoopSafePatch {
    x.Version = value
    return x
}

func (x *LoopSafePatch) SetDataNonCompat(value []byte) *LoopSafePatch {
    x.Data = value
    return x
}

func (x *LoopSafePatch) SetData(value []byte) *LoopSafePatch {
    x.Data = value
    return x
}

func (x *LoopSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *LoopSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *LoopSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *LoopSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *LoopSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *LoopSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("LoopSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LoopSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LoopSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LoopSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type RefFieldsPatch struct {
    Assign *RefFields `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *RefFieldsFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *RefFieldsEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *RefFieldsFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RefFieldsPatch)(nil)

func NewRefFieldsPatch() *RefFieldsPatch {
    return (&RefFieldsPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewRefFieldsFieldPatch()).
        SetEnsureNonCompat(*NewRefFieldsEnsureStruct()).
        SetPatchNonCompat(*NewRefFieldsFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *RefFieldsPatch) GetAssign() *RefFields {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *RefFieldsPatch) GetClear() bool {
    return x.Clear
}

func (x *RefFieldsPatch) GetPatchPrior() *RefFieldsFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *RefFieldsPatch) GetEnsure() *RefFieldsEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *RefFieldsPatch) GetPatch() *RefFieldsFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *RefFieldsPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *RefFieldsPatch) SetAssignNonCompat(value RefFields) *RefFieldsPatch {
    x.Assign = &value
    return x
}

func (x *RefFieldsPatch) SetAssign(value *RefFields) *RefFieldsPatch {
    x.Assign = value
    return x
}

func (x *RefFieldsPatch) SetClearNonCompat(value bool) *RefFieldsPatch {
    x.Clear = value
    return x
}

func (x *RefFieldsPatch) SetClear(value bool) *RefFieldsPatch {
    x.Clear = value
    return x
}

func (x *RefFieldsPatch) SetPatchPriorNonCompat(value RefFieldsFieldPatch) *RefFieldsPatch {
    x.PatchPrior = &value
    return x
}

func (x *RefFieldsPatch) SetPatchPrior(value *RefFieldsFieldPatch) *RefFieldsPatch {
    x.PatchPrior = value
    return x
}

func (x *RefFieldsPatch) SetEnsureNonCompat(value RefFieldsEnsureStruct) *RefFieldsPatch {
    x.Ensure = &value
    return x
}

func (x *RefFieldsPatch) SetEnsure(value *RefFieldsEnsureStruct) *RefFieldsPatch {
    x.Ensure = value
    return x
}

func (x *RefFieldsPatch) SetPatchNonCompat(value RefFieldsFieldPatch) *RefFieldsPatch {
    x.Patch = &value
    return x
}

func (x *RefFieldsPatch) SetPatch(value *RefFieldsFieldPatch) *RefFieldsPatch {
    x.Patch = value
    return x
}

func (x *RefFieldsPatch) SetRemoveNonCompat(value patch.FieldIdList) *RefFieldsPatch {
    x.Remove = value
    return x
}

func (x *RefFieldsPatch) SetRemove(value patch.FieldIdList) *RefFieldsPatch {
    x.Remove = value
    return x
}

func (x *RefFieldsPatch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *RefFieldsPatch) IsSetPatchPrior() bool {
    return x != nil && x.PatchPrior != nil
}

func (x *RefFieldsPatch) IsSetEnsure() bool {
    return x != nil && x.Ensure != nil
}

func (x *RefFieldsPatch) IsSetPatch() bool {
    return x != nil && x.Patch != nil
}

func (x *RefFieldsPatch) IsSetRemove() bool {
    return x != nil && x.Remove != nil
}

func (x *RefFieldsPatch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsPatch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsPatch) writeField3(p thrift.Format) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.PatchPrior
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsPatch) writeField5(p thrift.Format) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Ensure
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsPatch) writeField6(p thrift.Format) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Patch
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsPatch) writeField7(p thrift.Format) error {  // Remove
    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Remove
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsPatch) readField1(p thrift.Format) error {  // Assign
    result := *NewRefFields()
err := result.Read(p)
if err != nil {
    return err
}

    x.Assign = &result
    return nil
}

func (x *RefFieldsPatch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *RefFieldsPatch) readField3(p thrift.Format) error {  // PatchPrior
    result := *NewRefFieldsFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.PatchPrior = &result
    return nil
}

func (x *RefFieldsPatch) readField5(p thrift.Format) error {  // Ensure
    result := *NewRefFieldsEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.Ensure = &result
    return nil
}

func (x *RefFieldsPatch) readField6(p thrift.Format) error {  // Patch
    result := *NewRefFieldsFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Patch = &result
    return nil
}

func (x *RefFieldsPatch) readField7(p thrift.Format) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.Remove = result
    return nil
}

func (x *RefFieldsPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *RefFieldsPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *RefFieldsPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.PatchPrior)
}

func (x *RefFieldsPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.Ensure)
}

func (x *RefFieldsPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.Patch)
}

func (x *RefFieldsPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.Remove)
}

// Deprecated: Use NewRefFieldsPatch().GetAssign() instead.
func (x *RefFieldsPatch) DefaultGetAssign() *RefFields {
    if !x.IsSetAssign() {
        return NewRefFields()
    }
    return x.Assign
}

// Deprecated: Use NewRefFieldsPatch().GetPatchPrior() instead.
func (x *RefFieldsPatch) DefaultGetPatchPrior() *RefFieldsFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewRefFieldsFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewRefFieldsPatch().GetEnsure() instead.
func (x *RefFieldsPatch) DefaultGetEnsure() *RefFieldsEnsureStruct {
    if !x.IsSetEnsure() {
        return NewRefFieldsEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewRefFieldsPatch().GetPatch() instead.
func (x *RefFieldsPatch) DefaultGetPatch() *RefFieldsFieldPatch {
    if !x.IsSetPatch() {
        return NewRefFieldsFieldPatch()
    }
    return x.Patch
}



func (x *RefFieldsPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RefFieldsPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.STRUCT)):  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RefFieldsPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RefFieldsPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type RefFieldsField1Patch struct {
    Assign []int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Prepend []int32 `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append []int32 `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RefFieldsField1Patch)(nil)

func NewRefFieldsField1Patch() *RefFieldsField1Patch {
    return (&RefFieldsField1Patch{}).
        SetClearNonCompat(false).
        SetPrependNonCompat(make([]int32, 0)).
        SetAppendNonCompat(make([]int32, 0))
}

func (x *RefFieldsField1Patch) GetAssign() []int32 {
    if !x.IsSetAssign() {
        return make([]int32, 0)
    }

    return x.Assign
}

func (x *RefFieldsField1Patch) GetClear() bool {
    return x.Clear
}

func (x *RefFieldsField1Patch) GetPrepend() []int32 {
    if !x.IsSetPrepend() {
        return make([]int32, 0)
    }

    return x.Prepend
}

func (x *RefFieldsField1Patch) GetAppend() []int32 {
    if !x.IsSetAppend() {
        return make([]int32, 0)
    }

    return x.Append
}

func (x *RefFieldsField1Patch) SetAssignNonCompat(value []int32) *RefFieldsField1Patch {
    x.Assign = value
    return x
}

func (x *RefFieldsField1Patch) SetAssign(value []int32) *RefFieldsField1Patch {
    x.Assign = value
    return x
}

func (x *RefFieldsField1Patch) SetClearNonCompat(value bool) *RefFieldsField1Patch {
    x.Clear = value
    return x
}

func (x *RefFieldsField1Patch) SetClear(value bool) *RefFieldsField1Patch {
    x.Clear = value
    return x
}

func (x *RefFieldsField1Patch) SetPrependNonCompat(value []int32) *RefFieldsField1Patch {
    x.Prepend = value
    return x
}

func (x *RefFieldsField1Patch) SetPrepend(value []int32) *RefFieldsField1Patch {
    x.Prepend = value
    return x
}

func (x *RefFieldsField1Patch) SetAppendNonCompat(value []int32) *RefFieldsField1Patch {
    x.Append = value
    return x
}

func (x *RefFieldsField1Patch) SetAppend(value []int32) *RefFieldsField1Patch {
    x.Append = value
    return x
}

func (x *RefFieldsField1Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *RefFieldsField1Patch) IsSetPrepend() bool {
    return x != nil && x.Prepend != nil
}

func (x *RefFieldsField1Patch) IsSetAppend() bool {
    return x != nil && x.Append != nil
}

func (x *RefFieldsField1Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField1Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField1Patch) writeField8(p thrift.Format) error {  // Prepend
    if err := p.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Prepend
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField1Patch) writeField9(p thrift.Format) error {  // Append
    if err := p.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Append
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField1Patch) readField1(p thrift.Format) error {  // Assign
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Assign = result
    return nil
}

func (x *RefFieldsField1Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *RefFieldsField1Patch) readField8(p thrift.Format) error {  // Prepend
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Prepend = result
    return nil
}

func (x *RefFieldsField1Patch) readField9(p thrift.Format) error {  // Append
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Append = result
    return nil
}

func (x *RefFieldsField1Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *RefFieldsField1Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *RefFieldsField1Patch) toString8() string {  // Prepend
    return fmt.Sprintf("%v", x.Prepend)
}

func (x *RefFieldsField1Patch) toString9() string {  // Append
    return fmt.Sprintf("%v", x.Append)
}



func (x *RefFieldsField1Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RefFieldsField1Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField1Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.LIST)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.LIST)):  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.LIST)):  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RefFieldsField1Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RefFieldsField1Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Prepend:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("Append:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type RefFieldsField4Patch struct {
    Assign []int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Prepend []int32 `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append []int32 `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RefFieldsField4Patch)(nil)

func NewRefFieldsField4Patch() *RefFieldsField4Patch {
    return (&RefFieldsField4Patch{}).
        SetClearNonCompat(false).
        SetPrependNonCompat(make([]int32, 0)).
        SetAppendNonCompat(make([]int32, 0))
}

func (x *RefFieldsField4Patch) GetAssign() []int32 {
    if !x.IsSetAssign() {
        return make([]int32, 0)
    }

    return x.Assign
}

func (x *RefFieldsField4Patch) GetClear() bool {
    return x.Clear
}

func (x *RefFieldsField4Patch) GetPrepend() []int32 {
    if !x.IsSetPrepend() {
        return make([]int32, 0)
    }

    return x.Prepend
}

func (x *RefFieldsField4Patch) GetAppend() []int32 {
    if !x.IsSetAppend() {
        return make([]int32, 0)
    }

    return x.Append
}

func (x *RefFieldsField4Patch) SetAssignNonCompat(value []int32) *RefFieldsField4Patch {
    x.Assign = value
    return x
}

func (x *RefFieldsField4Patch) SetAssign(value []int32) *RefFieldsField4Patch {
    x.Assign = value
    return x
}

func (x *RefFieldsField4Patch) SetClearNonCompat(value bool) *RefFieldsField4Patch {
    x.Clear = value
    return x
}

func (x *RefFieldsField4Patch) SetClear(value bool) *RefFieldsField4Patch {
    x.Clear = value
    return x
}

func (x *RefFieldsField4Patch) SetPrependNonCompat(value []int32) *RefFieldsField4Patch {
    x.Prepend = value
    return x
}

func (x *RefFieldsField4Patch) SetPrepend(value []int32) *RefFieldsField4Patch {
    x.Prepend = value
    return x
}

func (x *RefFieldsField4Patch) SetAppendNonCompat(value []int32) *RefFieldsField4Patch {
    x.Append = value
    return x
}

func (x *RefFieldsField4Patch) SetAppend(value []int32) *RefFieldsField4Patch {
    x.Append = value
    return x
}

func (x *RefFieldsField4Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *RefFieldsField4Patch) IsSetPrepend() bool {
    return x != nil && x.Prepend != nil
}

func (x *RefFieldsField4Patch) IsSetAppend() bool {
    return x != nil && x.Append != nil
}

func (x *RefFieldsField4Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField4Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField4Patch) writeField8(p thrift.Format) error {  // Prepend
    if err := p.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Prepend
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField4Patch) writeField9(p thrift.Format) error {  // Append
    if err := p.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Append
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField4Patch) readField1(p thrift.Format) error {  // Assign
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Assign = result
    return nil
}

func (x *RefFieldsField4Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *RefFieldsField4Patch) readField8(p thrift.Format) error {  // Prepend
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Prepend = result
    return nil
}

func (x *RefFieldsField4Patch) readField9(p thrift.Format) error {  // Append
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Append = result
    return nil
}

func (x *RefFieldsField4Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *RefFieldsField4Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *RefFieldsField4Patch) toString8() string {  // Prepend
    return fmt.Sprintf("%v", x.Prepend)
}

func (x *RefFieldsField4Patch) toString9() string {  // Append
    return fmt.Sprintf("%v", x.Append)
}



func (x *RefFieldsField4Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RefFieldsField4Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField4Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.LIST)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.LIST)):  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.LIST)):  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RefFieldsField4Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RefFieldsField4Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Prepend:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("Append:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type RefFieldsField7Patch struct {
    Assign []int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Prepend []int32 `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append []int32 `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RefFieldsField7Patch)(nil)

func NewRefFieldsField7Patch() *RefFieldsField7Patch {
    return (&RefFieldsField7Patch{}).
        SetClearNonCompat(false).
        SetPrependNonCompat(make([]int32, 0)).
        SetAppendNonCompat(make([]int32, 0))
}

func (x *RefFieldsField7Patch) GetAssign() []int32 {
    if !x.IsSetAssign() {
        return make([]int32, 0)
    }

    return x.Assign
}

func (x *RefFieldsField7Patch) GetClear() bool {
    return x.Clear
}

func (x *RefFieldsField7Patch) GetPrepend() []int32 {
    if !x.IsSetPrepend() {
        return make([]int32, 0)
    }

    return x.Prepend
}

func (x *RefFieldsField7Patch) GetAppend() []int32 {
    if !x.IsSetAppend() {
        return make([]int32, 0)
    }

    return x.Append
}

func (x *RefFieldsField7Patch) SetAssignNonCompat(value []int32) *RefFieldsField7Patch {
    x.Assign = value
    return x
}

func (x *RefFieldsField7Patch) SetAssign(value []int32) *RefFieldsField7Patch {
    x.Assign = value
    return x
}

func (x *RefFieldsField7Patch) SetClearNonCompat(value bool) *RefFieldsField7Patch {
    x.Clear = value
    return x
}

func (x *RefFieldsField7Patch) SetClear(value bool) *RefFieldsField7Patch {
    x.Clear = value
    return x
}

func (x *RefFieldsField7Patch) SetPrependNonCompat(value []int32) *RefFieldsField7Patch {
    x.Prepend = value
    return x
}

func (x *RefFieldsField7Patch) SetPrepend(value []int32) *RefFieldsField7Patch {
    x.Prepend = value
    return x
}

func (x *RefFieldsField7Patch) SetAppendNonCompat(value []int32) *RefFieldsField7Patch {
    x.Append = value
    return x
}

func (x *RefFieldsField7Patch) SetAppend(value []int32) *RefFieldsField7Patch {
    x.Append = value
    return x
}

func (x *RefFieldsField7Patch) IsSetAssign() bool {
    return x != nil && x.Assign != nil
}

func (x *RefFieldsField7Patch) IsSetPrepend() bool {
    return x != nil && x.Prepend != nil
}

func (x *RefFieldsField7Patch) IsSetAppend() bool {
    return x != nil && x.Append != nil
}

func (x *RefFieldsField7Patch) writeField1(p thrift.Format) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Assign
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField7Patch) writeField2(p thrift.Format) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Clear
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField7Patch) writeField8(p thrift.Format) error {  // Prepend
    if err := p.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Prepend
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField7Patch) writeField9(p thrift.Format) error {  // Append
    if err := p.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Append
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField7Patch) readField1(p thrift.Format) error {  // Assign
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Assign = result
    return nil
}

func (x *RefFieldsField7Patch) readField2(p thrift.Format) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Clear = result
    return nil
}

func (x *RefFieldsField7Patch) readField8(p thrift.Format) error {  // Prepend
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Prepend = result
    return nil
}

func (x *RefFieldsField7Patch) readField9(p thrift.Format) error {  // Append
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Append = result
    return nil
}

func (x *RefFieldsField7Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.Assign)
}

func (x *RefFieldsField7Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.Clear)
}

func (x *RefFieldsField7Patch) toString8() string {  // Prepend
    return fmt.Sprintf("%v", x.Prepend)
}

func (x *RefFieldsField7Patch) toString9() string {  // Append
    return fmt.Sprintf("%v", x.Append)
}



func (x *RefFieldsField7Patch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RefFieldsField7Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsField7Patch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.LIST)):  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.BOOL)):  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.LIST)):  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.LIST)):  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RefFieldsField7Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RefFieldsField7Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Prepend:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("Append:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type RefFieldsFieldPatch struct {
    Unique *RefFieldsField1Patch `thrift:"unique,1" json:"unique" db:"unique"`
    OptUnique *RefFieldsField4Patch `thrift:"opt_unique,4" json:"opt_unique" db:"opt_unique"`
    OptBox *RefFieldsField7Patch `thrift:"opt_box,7" json:"opt_box" db:"opt_box"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RefFieldsFieldPatch)(nil)

func NewRefFieldsFieldPatch() *RefFieldsFieldPatch {
    return (&RefFieldsFieldPatch{}).
        SetUniqueNonCompat(*NewRefFieldsField1Patch()).
        SetOptUniqueNonCompat(*NewRefFieldsField4Patch()).
        SetOptBoxNonCompat(*NewRefFieldsField7Patch())
}

func (x *RefFieldsFieldPatch) GetUnique() *RefFieldsField1Patch {
    if !x.IsSetUnique() {
        return nil
    }

    return x.Unique
}

func (x *RefFieldsFieldPatch) GetOptUnique() *RefFieldsField4Patch {
    if !x.IsSetOptUnique() {
        return nil
    }

    return x.OptUnique
}

func (x *RefFieldsFieldPatch) GetOptBox() *RefFieldsField7Patch {
    if !x.IsSetOptBox() {
        return nil
    }

    return x.OptBox
}

func (x *RefFieldsFieldPatch) SetUniqueNonCompat(value RefFieldsField1Patch) *RefFieldsFieldPatch {
    x.Unique = &value
    return x
}

func (x *RefFieldsFieldPatch) SetUnique(value *RefFieldsField1Patch) *RefFieldsFieldPatch {
    x.Unique = value
    return x
}

func (x *RefFieldsFieldPatch) SetOptUniqueNonCompat(value RefFieldsField4Patch) *RefFieldsFieldPatch {
    x.OptUnique = &value
    return x
}

func (x *RefFieldsFieldPatch) SetOptUnique(value *RefFieldsField4Patch) *RefFieldsFieldPatch {
    x.OptUnique = value
    return x
}

func (x *RefFieldsFieldPatch) SetOptBoxNonCompat(value RefFieldsField7Patch) *RefFieldsFieldPatch {
    x.OptBox = &value
    return x
}

func (x *RefFieldsFieldPatch) SetOptBox(value *RefFieldsField7Patch) *RefFieldsFieldPatch {
    x.OptBox = value
    return x
}

func (x *RefFieldsFieldPatch) IsSetUnique() bool {
    return x != nil && x.Unique != nil
}

func (x *RefFieldsFieldPatch) IsSetOptUnique() bool {
    return x != nil && x.OptUnique != nil
}

func (x *RefFieldsFieldPatch) IsSetOptBox() bool {
    return x != nil && x.OptBox != nil
}

func (x *RefFieldsFieldPatch) writeField1(p thrift.Format) error {  // Unique
    if !x.IsSetUnique() {
        return nil
    }

    if err := p.WriteFieldBegin("unique", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Unique
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsFieldPatch) writeField4(p thrift.Format) error {  // OptUnique
    if !x.IsSetOptUnique() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_unique", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptUnique
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsFieldPatch) writeField7(p thrift.Format) error {  // OptBox
    if !x.IsSetOptBox() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_box", thrift.STRUCT, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptBox
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsFieldPatch) readField1(p thrift.Format) error {  // Unique
    result := *NewRefFieldsField1Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.Unique = &result
    return nil
}

func (x *RefFieldsFieldPatch) readField4(p thrift.Format) error {  // OptUnique
    result := *NewRefFieldsField4Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptUnique = &result
    return nil
}

func (x *RefFieldsFieldPatch) readField7(p thrift.Format) error {  // OptBox
    result := *NewRefFieldsField7Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.OptBox = &result
    return nil
}

func (x *RefFieldsFieldPatch) toString1() string {  // Unique
    return fmt.Sprintf("%v", x.Unique)
}

func (x *RefFieldsFieldPatch) toString4() string {  // OptUnique
    return fmt.Sprintf("%v", x.OptUnique)
}

func (x *RefFieldsFieldPatch) toString7() string {  // OptBox
    return fmt.Sprintf("%v", x.OptBox)
}

// Deprecated: Use NewRefFieldsFieldPatch().GetUnique() instead.
func (x *RefFieldsFieldPatch) DefaultGetUnique() *RefFieldsField1Patch {
    if !x.IsSetUnique() {
        return NewRefFieldsField1Patch()
    }
    return x.Unique
}

// Deprecated: Use NewRefFieldsFieldPatch().GetOptUnique() instead.
func (x *RefFieldsFieldPatch) DefaultGetOptUnique() *RefFieldsField4Patch {
    if !x.IsSetOptUnique() {
        return NewRefFieldsField4Patch()
    }
    return x.OptUnique
}

// Deprecated: Use NewRefFieldsFieldPatch().GetOptBox() instead.
func (x *RefFieldsFieldPatch) DefaultGetOptBox() *RefFieldsField7Patch {
    if !x.IsSetOptBox() {
        return NewRefFieldsField7Patch()
    }
    return x.OptBox
}



func (x *RefFieldsFieldPatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RefFieldsFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsFieldPatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // unique
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.STRUCT)):  // opt_unique
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.STRUCT)):  // opt_box
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RefFieldsFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RefFieldsFieldPatch({")
    sb.WriteString(fmt.Sprintf("Unique:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("OptUnique:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("OptBox:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type RefFieldsEnsureStruct struct {
    Unique []int32 `thrift:"unique,1,optional" json:"unique,omitempty" db:"unique"`
    SharedConst []int32 `thrift:"shared_const,2,optional" json:"shared_const,omitempty" db:"shared_const"`
    SharedMustable []int32 `thrift:"shared_mustable,3,optional" json:"shared_mustable,omitempty" db:"shared_mustable"`
    OptUnique []int32 `thrift:"opt_unique,4,optional" json:"opt_unique,omitempty" db:"opt_unique"`
    OptSharedConst []int32 `thrift:"opt_shared_const,5,optional" json:"opt_shared_const,omitempty" db:"opt_shared_const"`
    OptSharedMustable []int32 `thrift:"opt_shared_mustable,6,optional" json:"opt_shared_mustable,omitempty" db:"opt_shared_mustable"`
    OptBox []int32 `thrift:"opt_box,7,optional" json:"opt_box,omitempty" db:"opt_box"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RefFieldsEnsureStruct)(nil)

func NewRefFieldsEnsureStruct() *RefFieldsEnsureStruct {
    return (&RefFieldsEnsureStruct{})
}

func (x *RefFieldsEnsureStruct) GetUnique() []int32 {
    if !x.IsSetUnique() {
        return make([]int32, 0)
    }

    return x.Unique
}

func (x *RefFieldsEnsureStruct) GetSharedConst() []int32 {
    if !x.IsSetSharedConst() {
        return make([]int32, 0)
    }

    return x.SharedConst
}

func (x *RefFieldsEnsureStruct) GetSharedMustable() []int32 {
    if !x.IsSetSharedMustable() {
        return make([]int32, 0)
    }

    return x.SharedMustable
}

func (x *RefFieldsEnsureStruct) GetOptUnique() []int32 {
    if !x.IsSetOptUnique() {
        return make([]int32, 0)
    }

    return x.OptUnique
}

func (x *RefFieldsEnsureStruct) GetOptSharedConst() []int32 {
    if !x.IsSetOptSharedConst() {
        return make([]int32, 0)
    }

    return x.OptSharedConst
}

func (x *RefFieldsEnsureStruct) GetOptSharedMustable() []int32 {
    if !x.IsSetOptSharedMustable() {
        return make([]int32, 0)
    }

    return x.OptSharedMustable
}

func (x *RefFieldsEnsureStruct) GetOptBox() []int32 {
    if !x.IsSetOptBox() {
        return make([]int32, 0)
    }

    return x.OptBox
}

func (x *RefFieldsEnsureStruct) SetUniqueNonCompat(value []int32) *RefFieldsEnsureStruct {
    x.Unique = value
    return x
}

func (x *RefFieldsEnsureStruct) SetUnique(value []int32) *RefFieldsEnsureStruct {
    x.Unique = value
    return x
}

func (x *RefFieldsEnsureStruct) SetSharedConstNonCompat(value []int32) *RefFieldsEnsureStruct {
    x.SharedConst = value
    return x
}

func (x *RefFieldsEnsureStruct) SetSharedConst(value []int32) *RefFieldsEnsureStruct {
    x.SharedConst = value
    return x
}

func (x *RefFieldsEnsureStruct) SetSharedMustableNonCompat(value []int32) *RefFieldsEnsureStruct {
    x.SharedMustable = value
    return x
}

func (x *RefFieldsEnsureStruct) SetSharedMustable(value []int32) *RefFieldsEnsureStruct {
    x.SharedMustable = value
    return x
}

func (x *RefFieldsEnsureStruct) SetOptUniqueNonCompat(value []int32) *RefFieldsEnsureStruct {
    x.OptUnique = value
    return x
}

func (x *RefFieldsEnsureStruct) SetOptUnique(value []int32) *RefFieldsEnsureStruct {
    x.OptUnique = value
    return x
}

func (x *RefFieldsEnsureStruct) SetOptSharedConstNonCompat(value []int32) *RefFieldsEnsureStruct {
    x.OptSharedConst = value
    return x
}

func (x *RefFieldsEnsureStruct) SetOptSharedConst(value []int32) *RefFieldsEnsureStruct {
    x.OptSharedConst = value
    return x
}

func (x *RefFieldsEnsureStruct) SetOptSharedMustableNonCompat(value []int32) *RefFieldsEnsureStruct {
    x.OptSharedMustable = value
    return x
}

func (x *RefFieldsEnsureStruct) SetOptSharedMustable(value []int32) *RefFieldsEnsureStruct {
    x.OptSharedMustable = value
    return x
}

func (x *RefFieldsEnsureStruct) SetOptBoxNonCompat(value []int32) *RefFieldsEnsureStruct {
    x.OptBox = value
    return x
}

func (x *RefFieldsEnsureStruct) SetOptBox(value []int32) *RefFieldsEnsureStruct {
    x.OptBox = value
    return x
}

func (x *RefFieldsEnsureStruct) IsSetUnique() bool {
    return x != nil && x.Unique != nil
}

func (x *RefFieldsEnsureStruct) IsSetSharedConst() bool {
    return x != nil && x.SharedConst != nil
}

func (x *RefFieldsEnsureStruct) IsSetSharedMustable() bool {
    return x != nil && x.SharedMustable != nil
}

func (x *RefFieldsEnsureStruct) IsSetOptUnique() bool {
    return x != nil && x.OptUnique != nil
}

func (x *RefFieldsEnsureStruct) IsSetOptSharedConst() bool {
    return x != nil && x.OptSharedConst != nil
}

func (x *RefFieldsEnsureStruct) IsSetOptSharedMustable() bool {
    return x != nil && x.OptSharedMustable != nil
}

func (x *RefFieldsEnsureStruct) IsSetOptBox() bool {
    return x != nil && x.OptBox != nil
}

func (x *RefFieldsEnsureStruct) writeField1(p thrift.Format) error {  // Unique
    if !x.IsSetUnique() {
        return nil
    }

    if err := p.WriteFieldBegin("unique", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Unique
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsEnsureStruct) writeField2(p thrift.Format) error {  // SharedConst
    if !x.IsSetSharedConst() {
        return nil
    }

    if err := p.WriteFieldBegin("shared_const", thrift.LIST, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SharedConst
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsEnsureStruct) writeField3(p thrift.Format) error {  // SharedMustable
    if !x.IsSetSharedMustable() {
        return nil
    }

    if err := p.WriteFieldBegin("shared_mustable", thrift.LIST, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.SharedMustable
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsEnsureStruct) writeField4(p thrift.Format) error {  // OptUnique
    if !x.IsSetOptUnique() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_unique", thrift.LIST, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptUnique
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsEnsureStruct) writeField5(p thrift.Format) error {  // OptSharedConst
    if !x.IsSetOptSharedConst() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_shared_const", thrift.LIST, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSharedConst
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsEnsureStruct) writeField6(p thrift.Format) error {  // OptSharedMustable
    if !x.IsSetOptSharedMustable() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_shared_mustable", thrift.LIST, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptSharedMustable
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsEnsureStruct) writeField7(p thrift.Format) error {  // OptBox
    if !x.IsSetOptBox() {
        return nil
    }

    if err := p.WriteFieldBegin("opt_box", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.OptBox
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsEnsureStruct) readField1(p thrift.Format) error {  // Unique
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.Unique = result
    return nil
}

func (x *RefFieldsEnsureStruct) readField2(p thrift.Format) error {  // SharedConst
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SharedConst = result
    return nil
}

func (x *RefFieldsEnsureStruct) readField3(p thrift.Format) error {  // SharedMustable
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SharedMustable = result
    return nil
}

func (x *RefFieldsEnsureStruct) readField4(p thrift.Format) error {  // OptUnique
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptUnique = result
    return nil
}

func (x *RefFieldsEnsureStruct) readField5(p thrift.Format) error {  // OptSharedConst
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptSharedConst = result
    return nil
}

func (x *RefFieldsEnsureStruct) readField6(p thrift.Format) error {  // OptSharedMustable
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptSharedMustable = result
    return nil
}

func (x *RefFieldsEnsureStruct) readField7(p thrift.Format) error {  // OptBox
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.OptBox = result
    return nil
}

func (x *RefFieldsEnsureStruct) toString1() string {  // Unique
    return fmt.Sprintf("%v", x.Unique)
}

func (x *RefFieldsEnsureStruct) toString2() string {  // SharedConst
    return fmt.Sprintf("%v", x.SharedConst)
}

func (x *RefFieldsEnsureStruct) toString3() string {  // SharedMustable
    return fmt.Sprintf("%v", x.SharedMustable)
}

func (x *RefFieldsEnsureStruct) toString4() string {  // OptUnique
    return fmt.Sprintf("%v", x.OptUnique)
}

func (x *RefFieldsEnsureStruct) toString5() string {  // OptSharedConst
    return fmt.Sprintf("%v", x.OptSharedConst)
}

func (x *RefFieldsEnsureStruct) toString6() string {  // OptSharedMustable
    return fmt.Sprintf("%v", x.OptSharedMustable)
}

func (x *RefFieldsEnsureStruct) toString7() string {  // OptBox
    return fmt.Sprintf("%v", x.OptBox)
}



func (x *RefFieldsEnsureStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RefFieldsEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsEnsureStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.LIST)):  // unique
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.LIST)):  // shared_const
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.LIST)):  // shared_mustable
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.LIST)):  // opt_unique
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.LIST)):  // opt_shared_const
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.LIST)):  // opt_shared_mustable
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.LIST)):  // opt_box
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RefFieldsEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RefFieldsEnsureStruct({")
    sb.WriteString(fmt.Sprintf("Unique:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("SharedConst:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("SharedMustable:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("OptUnique:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("OptSharedConst:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("OptSharedMustable:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("OptBox:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type RefFieldsSafePatch struct {
    Version int32 `thrift:"version,1" json:"version" db:"version"`
    Data []byte `thrift:"data,2" json:"data" db:"data"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*RefFieldsSafePatch)(nil)

func NewRefFieldsSafePatch() *RefFieldsSafePatch {
    return (&RefFieldsSafePatch{}).
        SetVersionNonCompat(0).
        SetDataNonCompat([]byte(""))
}

func (x *RefFieldsSafePatch) GetVersion() int32 {
    return x.Version
}

func (x *RefFieldsSafePatch) GetData() []byte {
    if !x.IsSetData() {
        return []byte("")
    }

    return x.Data
}

func (x *RefFieldsSafePatch) SetVersionNonCompat(value int32) *RefFieldsSafePatch {
    x.Version = value
    return x
}

func (x *RefFieldsSafePatch) SetVersion(value int32) *RefFieldsSafePatch {
    x.Version = value
    return x
}

func (x *RefFieldsSafePatch) SetDataNonCompat(value []byte) *RefFieldsSafePatch {
    x.Data = value
    return x
}

func (x *RefFieldsSafePatch) SetData(value []byte) *RefFieldsSafePatch {
    x.Data = value
    return x
}

func (x *RefFieldsSafePatch) IsSetData() bool {
    return x != nil && x.Data != nil
}

func (x *RefFieldsSafePatch) writeField1(p thrift.Format) error {  // Version
    if err := p.WriteFieldBegin("version", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Version
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsSafePatch) writeField2(p thrift.Format) error {  // Data
    if err := p.WriteFieldBegin("data", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Data
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsSafePatch) readField1(p thrift.Format) error {  // Version
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.Version = result
    return nil
}

func (x *RefFieldsSafePatch) readField2(p thrift.Format) error {  // Data
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.Data = result
    return nil
}

func (x *RefFieldsSafePatch) toString1() string {  // Version
    return fmt.Sprintf("%v", x.Version)
}

func (x *RefFieldsSafePatch) toString2() string {  // Data
    return fmt.Sprintf("%v", x.Data)
}



func (x *RefFieldsSafePatch) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("RefFieldsSafePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RefFieldsSafePatch) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // version
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRING)):  // data
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RefFieldsSafePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RefFieldsSafePatch({")
    sb.WriteString(fmt.Sprintf("Version:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("test.dev/fixtures/patch/MyData", func() any { return NewMyData() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefault", func() any { return NewMyDataWithCustomDefault() })
    registry.RegisterType("test.dev/fixtures/patch/InnerUnion", func() any { return NewInnerUnion() })
    registry.RegisterType("test.dev/fixtures/patch/MyUnion", func() any { return NewMyUnion() })
    registry.RegisterType("test.dev/fixtures/patch/MyStruct", func() any { return NewMyStruct() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStruct", func() any { return NewLateDefStruct() })
    registry.RegisterType("test.dev/fixtures/patch/Recursive", func() any { return NewRecursive() })
    registry.RegisterType("test.dev/fixtures/patch/Bar", func() any { return NewBar() })
    registry.RegisterType("test.dev/fixtures/patch/Loop", func() any { return NewLoop() })
    registry.RegisterType("test.dev/fixtures/patch/RefFields", func() any { return NewRefFields() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataPatch", func() any { return NewMyDataPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataFieldPatch", func() any { return NewMyDataFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataEnsureStruct", func() any { return NewMyDataEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataSafePatch", func() any { return NewMyDataSafePatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefaultPatch", func() any { return NewMyDataWithCustomDefaultPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefaultFieldPatch", func() any { return NewMyDataWithCustomDefaultFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefaultEnsureStruct", func() any { return NewMyDataWithCustomDefaultEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefaultSafePatch", func() any { return NewMyDataWithCustomDefaultSafePatch() })
    registry.RegisterType("test.dev/fixtures/patch/InnerUnionPatch", func() any { return NewInnerUnionPatch() })
    registry.RegisterType("test.dev/fixtures/patch/InnerUnionFieldPatch", func() any { return NewInnerUnionFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/InnerUnionSafePatch", func() any { return NewInnerUnionSafePatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyUnionPatch", func() any { return NewMyUnionPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyUnionFieldPatch", func() any { return NewMyUnionFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyUnionSafePatch", func() any { return NewMyUnionSafePatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructPatch", func() any { return NewMyStructPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField10Patch", func() any { return NewMyStructField10Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField23Patch", func() any { return NewMyStructField23Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField26Patch", func() any { return NewMyStructField26Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField27Patch", func() any { return NewMyStructField27Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField28Patch", func() any { return NewMyStructField28Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField29Patch", func() any { return NewMyStructField29Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField30Patch", func() any { return NewMyStructField30Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField30Patch1", func() any { return NewMyStructField30Patch1() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructFieldPatch", func() any { return NewMyStructFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructEnsureStruct", func() any { return NewMyStructEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructSafePatch", func() any { return NewMyStructSafePatch() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStructPatch", func() any { return NewLateDefStructPatch() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStructFieldPatch", func() any { return NewLateDefStructFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStructEnsureStruct", func() any { return NewLateDefStructEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStructSafePatch", func() any { return NewLateDefStructSafePatch() })
    registry.RegisterType("test.dev/fixtures/patch/RecursivePatch", func() any { return NewRecursivePatch() })
    registry.RegisterType("test.dev/fixtures/patch/RecursiveField1Patch", func() any { return NewRecursiveField1Patch() })
    registry.RegisterType("test.dev/fixtures/patch/RecursiveFieldPatch", func() any { return NewRecursiveFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/RecursiveEnsureStruct", func() any { return NewRecursiveEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/RecursiveSafePatch", func() any { return NewRecursiveSafePatch() })
    registry.RegisterType("test.dev/fixtures/patch/BarPatch", func() any { return NewBarPatch() })
    registry.RegisterType("test.dev/fixtures/patch/BarFieldPatch", func() any { return NewBarFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/BarEnsureStruct", func() any { return NewBarEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/BarSafePatch", func() any { return NewBarSafePatch() })
    registry.RegisterType("test.dev/fixtures/patch/LoopPatch", func() any { return NewLoopPatch() })
    registry.RegisterType("test.dev/fixtures/patch/LoopSafePatch", func() any { return NewLoopSafePatch() })
    registry.RegisterType("test.dev/fixtures/patch/RefFieldsPatch", func() any { return NewRefFieldsPatch() })
    registry.RegisterType("test.dev/fixtures/patch/RefFieldsField1Patch", func() any { return NewRefFieldsField1Patch() })
    registry.RegisterType("test.dev/fixtures/patch/RefFieldsField4Patch", func() any { return NewRefFieldsField4Patch() })
    registry.RegisterType("test.dev/fixtures/patch/RefFieldsField7Patch", func() any { return NewRefFieldsField7Patch() })
    registry.RegisterType("test.dev/fixtures/patch/RefFieldsFieldPatch", func() any { return NewRefFieldsFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/RefFieldsEnsureStruct", func() any { return NewRefFieldsEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/RefFieldsSafePatch", func() any { return NewRefFieldsSafePatch() })

    registry.RegisterType("test.dev/fixtures/patch/MyEnum", func() any { return MyEnum(0) })
}
