{
  "__fbthrift": "@generated",
  "thrift_module" : "python",
  "includes": {
    "scope": "thrift/annotation/scope.thrift"
  },
  "namespaces": {
    "android": "com.facebook.thrift.annotation.python_deprecated",
    "go": "thrift.annotation.python",
    "java": "com.facebook.thrift.annotation.python_deprecated",
    "py": "thrift.annotation.python",
    "py.asyncio": "facebook_thrift_asyncio.annotation.python"
  },
  "package": {
    "domain_prefix": "facebook",
    "domain_suffix": "com",
    "path": "thrift/annotation/python",
    "filename": "python"
  },
  "structs" :
  {
      "Py3Hidden" : {
        "name" : "Py3Hidden",
        "structured_annotations": {
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Hides in thrift-py3 only, not in thrift-python\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 30
      },
      "Flags" : {
        "name" : "Flags",
        "structured_annotations": {
          "scope.Enum" : {
        "type" : {
  "type" : "struct",
  "name" : "Enum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 33
      },
      "Name" : {
        "name" : "Name",
        "structured_annotations": {
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "fields" : {
          "name" : {
            "name" : "name",
            "key" : 1,
            "lineno" : 38,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 36
      },
      "Adapter" : {
        "name" : "Adapter",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "An annotation that applies a Python adapter to typedef or field, or directly on struct.\nThis completely replaces the underlying type of a thrift for a custom implementation and\nuses the specified adapter to convert to and from the underlying Thrift type during (de)serialization.\n\nExample 1:\n\n  @python.Adapter{name = \"my.module.DatetimeAdapter\", typeHint = \"datetime.datetime\"}\n  typedef i64 Datetime\n\nHere the type 'Datetime' has the Python adapter `DatetimeAdapter`.\n\n\nExample 2:\n\n  struct User {\n    @python.Adapter{name = \"my.module.DatetimeAdapter\", typeHint = \"datetime.datetime\"}\n    1: i64 created_at;\n  }\nHere the field `created_at` has the Python adapter `DatetimeAdapter`.\n\n\nExample 3:\n\n\n  @python.Adapter{name = \"my.module.AnotherAdapter\", typeHint = \"my.module.AdaptedFoo\"}\n  struct Foo {\n    1: string bar;\n  }\n\nHere the struct `Foo` has the Python adapter `AnotherAdapter`.\n\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "docstring" : "Fully qualified name of a Python adapter class, which should inherit from thrift.python.adapter.Adapter\n",
            "key" : 1,
            "lineno" : 77,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "typeHint" : {
            "name" : "typeHint",
            "docstring" : "Fully qualified type hint the above implementation adapts to.\nIf ending with \"[]\", it becomes a generic, and the unadapted type will be filled between the brackets.\n",
            "key" : 2,
            "lineno" : 80,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 72
      },
      "UseCAPI" : {
        "name" : "UseCAPI",
        "structured_annotations": {
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Controls cpp <-> python FFI for a struct or union\nBy default, struct uses marshal C API unless cpp.Type or cpp.Adapter is present\non a field or a type\nUse this annotation to opt-in struct to marshal in spite of cpp.Type or cpp.Adapter\nAlternatively, use this struct with serialize = false to use serialization for FFI.\n",
        "fields" : {
          "serialize" : {
            "name" : "serialize",
            "default_value" : 0,
            "key" : 1,
            "lineno" : 90,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 88
      }
      },
  "source_path" : "thrift/annotation/python",
  "py_namespace" : "thrift.annotation.python"
}
