{
  "__fbthrift": "@generated",
  "thrift_module" : "cpp",
  "includes": {
    "scope": "thrift/annotation/scope.thrift",
    "thrift": "thrift/annotation/thrift.thrift"
  },
  "namespaces": {
    "android": "com.facebook.thrift.annotation.cpp_deprecated",
    "go": "thrift.annotation.cpp",
    "java": "com.facebook.thrift.annotation.cpp_deprecated",
    "js": "thrift.annotation.cpp",
    "py": "thrift.annotation.cpp",
    "py.asyncio": "facebook_thrift_asyncio.annotation.cpp"
  },
  "package": {
    "domain_prefix": "facebook",
    "domain_suffix": "com",
    "path": "thrift/annotation/cpp",
    "filename": "cpp"
  },

  "enumerations" :
  {
      "RefType" : {
        "name" : "RefType",
        "constants" : {
          "Unique" : {
            "name" : "Unique",
            "lineno" : 66,
            "value" : 0
          },
          "Shared" : {
            "name" : "Shared",
            "docstring" : "`std::unique_ptr<T>`\n",
            "lineno" : 67,
            "value" : 1
          },
          "SharedMutable" : {
            "name" : "SharedMutable",
            "docstring" : "`std::shared_ptr<const T> `\n",
            "lineno" : 68,
            "value" : 2
          }
        },
        "docstring" : "Optional, defaults to Unique\n",
        "lineno" : 65
      },
      "EnumUnderlyingType" : {
        "name" : "EnumUnderlyingType",
        "constants" : {
          "I8" : {
            "name" : "I8",
            "docstring" : "::std::int8_t\n",
            "lineno" : 277,
            "value" : 0
          },
          "U8" : {
            "name" : "U8",
            "docstring" : "::std::uint8_t\n",
            "lineno" : 279,
            "value" : 1
          },
          "I16" : {
            "name" : "I16",
            "docstring" : "::std::int16_t\n",
            "lineno" : 281,
            "value" : 2
          },
          "U16" : {
            "name" : "U16",
            "docstring" : "::std::uint16_t\n",
            "lineno" : 283,
            "value" : 3
          },
          "U32" : {
            "name" : "U32",
            "docstring" : "::std::uint32_t\n",
            "lineno" : 285,
            "value" : 4
          }
        },
        "docstring" : "Enum in C++ by default uses signed 32 bit integer. There is no need to specify\nunderlying type for signed 32 bit integer.\n64-bit is not supported to avoid truncation since enums are sent as 32-bit integers over the wire.\n",
        "lineno" : 275
      }
      },
  "structs" :
  {
      "Type" : {
        "name" : "Type",
        "structured_annotations": {
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Changes the native type of a Thrift object (the C++ type used in codegen) to the value of the `name` field.\nContainer types may instead provide the `template` field, in which case template parameters will be filled in by thrift.\n(e.g. `template = \"folly::sorted_vector_set\"` is equivalent to `type = \"folly::sorted_vector_set<T>\"` on `set<T>`)\n\nIt is also possible to add `cpp_include` to bring in additional data structures and use them here.\nIt is required that the custom type matches the specified Thrift type even for internal container types.\nPrefer types that can leverage `reserve(size_t)` as Thrift makes uses these optimizations.\n*Special Case*: This annotation can be used to define a string/binary type as `IOBuf` or `unique_ptr<IOBuf>` so that you can leverage Thrift's support for zero-copy buffer manipulation through `IOBuf`.\nDuring deserialization, thrift receives a buffer that is used to allocate the appropriate fields in the struct. When using smart pointers, instead of making a copy of the data, it only modifies the pointer to point to the address that is used by the buffer.\n\nThe custom type must provide the following methods\n* `list`: `push_back(T)`\n* `map`: `insert(std::pair<T1, T2>)`\n* `set`: `insert(T)`\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "key" : 1,
            "lineno" : 50,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "template" : {
            "name" : "template",
            "key" : 2,
            "lineno" : 51,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 47
      },
      "Ref" : {
        "name" : "Ref",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Allocates a field on the heap instead of inline.\nThis annotation is added to support recursive types. However, you can also use it to turn a field from a value to a smart pointer.\n`@cpp.Ref` is equivalent having type`@cpp.RefType.Unique`.\n\nNOTE: A struct may transitively contain itself as a field only if at least one of the fields in the inclusion chain is either an optional Ref field or a container. Otherwise the struct would have infinite size.\n",
        "fields" : {
          "type" : {
            "name" : "type",
            "key" : 1,
            "lineno" : 63,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "RefType"
}
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 61
      },
      "Name" : {
        "name" : "Name",
        "structured_annotations": {
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Changes the name of the definition in generated C++ code.\nIn most cases a much better solution is to rename the problematic Thrift field itself. Only use the `@cpp.Name` annotation if such renaming is problematic,\ne.g. when the field name appears in code as a string, particularly when using JSON serialization, and it is hard to change all usage sites.\n",
        "fields" : {
          "value" : {
            "name" : "value",
            "key" : 1,
            "lineno" : 78,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 76
      },
      "Lazy" : {
        "name" : "Lazy",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Lazily deserialize large field on first access.\n\n```\nFooWithLazyField foo;\napache::thrift::CompactSerializer::deserialize(serializedData, foo);\n\n// large_field is lazy field, it will be deserialized on first access\n// The data will be deserialized in method call large_field_ref()\nLOG(INFO) << foo.large_field_ref()->size();\n\n// Result will be cached, we won't deserialize again\nLOG(INFO) << foo.large_field_ref()->size();\n```\n\nRead more: /doc/fb/languages/cpp/lazy.md\n",
        "fields" : {
          "ref" : {
            "name" : "ref",
            "default_value" : 0,
            "key" : 1,
            "lineno" : 102,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 99
      },
      "DisableLazyChecksum" : {
        "name" : "DisableLazyChecksum",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 105
      },
      "Adapter" : {
        "name" : "Adapter",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Const" : {
        "type" : {
  "type" : "struct",
  "name" : "Const",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "An annotation that applies a C++ adapter to typedef, field, or struct.\n\nFor example:\n\n  @cpp.Adapter{name = \"::ns::IdAdapter\"}\n  typedef i64 MyI64;\n\nHere the type `MyI64` has the C++ adapter `IdAdapter`.\n\n  struct User {\n    @cpp.Adapter{name = \"::ns::IdAdapter\"}\n    1: i64 id;\n  }\n\nHere the field `id` has the C++ adapter `IdAdapter`.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "docstring" : "The name of a C++ adapter type used to convert between Thrift and native\nC++ representation.\n\nThe adapter can be either a Type or Field adapter, providing either of the following APIs:\n\n    struct ThriftTypeAdapter {\n      static AdaptedType fromThrift(ThriftType thrift);\n      static {const ThriftType& | ThriftType} toThrift(const AdaptedType& native);\n    };\n\n    struct ThriftFieldAdapter {\n      // Context is an instantiation of apache::thrift::FieldContext\n      template <class Context>\n      static void construct(AdaptedType& field, Context ctx);\n\n      template <class Context>\n      static AdaptedType fromThriftField(ThriftType value, Context ctx);\n\n      template <class Context>\n      static {const ThriftType& | ThriftType} toThrift(const AdaptedType& adapted, Context ctx);\n    };\n",
            "key" : 1,
            "lineno" : 153,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "adaptedType" : {
            "name" : "adaptedType",
            "docstring" : "It is sometimes necessary to specify AdaptedType here (in case the codegen would\nhave a circular depdenceny, which will cause the C++ build to fail).\n",
            "key" : 2,
            "lineno" : 159,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "underlyingName" : {
            "name" : "underlyingName",
            "docstring" : "The name and/or extra namespace to use when directly adapting a type\n(as opposed a typedef).\n\nIn this case, the IDL name of the type will refer to the adapted type in\nC++ and the underlying thrift type will be generated in a nested\nnamespace and/or with a different name.\n\nIf neither `underlyingName` or `extraNamespace` is provided, the\nunderlying type will be generated in a nested 'detail' namespace with\nthe same name.\n",
            "key" : 3,
            "lineno" : 173,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "extraNamespace" : {
            "name" : "extraNamespace",
            "key" : 4,
            "lineno" : 174,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "moveOnly" : {
            "name" : "moveOnly",
            "docstring" : "Must set to true when adapted type is not copyable.\n",
            "key" : 5,
            "lineno" : 177,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 125
      },
      "PackIsset" : {
        "name" : "PackIsset",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Packs isset bits into fewer bytes to save space at the cost of making access more expensive.\nPassing `atomic = false` reduces the access cost while making concurrent writes UB.\nRead more: /doc/fb/languages/cpp/isset-bitpacking.md\n",
        "fields" : {
          "atomic" : {
            "name" : "atomic",
            "default_value" : 1,
            "key" : 1,
            "lineno" : 187,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 185
      },
      "MinimizePadding" : {
        "name" : "MinimizePadding",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "This annotation enables reordering of fields in the generated C++ struct to minimize padding.\nThis is achieved by placing the fields in the order of decreasing alignments. The order of fields with the same alignment is preserved.\n\n```\n@cpp.MinimizePadding\nstruct Padded {\n  1: byte small\n  2: i64 big\n  3: i16 medium\n  4: i32 biggish\n  5: byte tiny\n}\n```\n\nFor example, the C++ fields for the `Padded` Thrift struct above will be generated in the following order:\n\n```\nint64_t big;\nint32_t biggish;\nint16_t medium;\nint8_t small;\nint8_t tiny;\n```\n\nwhich gives the size of 16 bytes compared to 32 bytes if `cpp.MinimizePadding` was not specified.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 217
      },
      "TriviallyRelocatable" : {
        "name" : "TriviallyRelocatable",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 220
      },
      "ScopedEnumAsUnionType" : {
        "name" : "ScopedEnumAsUnionType",
        "structured_annotations": {
          "scope.Union" : {
        "type" : {
  "type" : "struct",
  "name" : "Union",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 223
      },
      "FieldInterceptor" : {
        "name" : "FieldInterceptor",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental",
  "path" : "thrift/annotation/thrift.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "An annotation that intercepts field access with C++ field interceptor.\nUse with *caution* since this may introduce substantial performance overhead on each field access.\n\nFor example:\n\n    struct Foo {\n      @cpp.FieldInterceptor{name = \"MyFieldInterceptor\"}\n      1: i64 id;\n    }\n\nThe field interceptor `MyFieldInterceptor` will intercept with `interceptThriftFieldAccess`\nwhen the field `id` is accessed.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "docstring" : "The name of a field interceptor.\n\nThe field interceptor provides the following API:\n\n    struct ThriftFieldInterceptor {\n      template <typename T, typename Struct, int16_t FieldId>\n      static void interceptThriftFieldAccess(T&& field,\n                                             apache::thrift::FieldContext<Struct, FieldId>&& ctx);\n    };\n\nThe field interceptor intercepts with the field value and the field context.\nIt enforces an easily searchable function name `interceptThriftFieldAccess`.\n",
            "key" : 1,
            "lineno" : 257,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "noinline" : {
            "name" : "noinline",
            "docstring" : "Setting to true makes compiler not inline and erase function signature for\nthe intercepting field accessor.\n",
            "key" : 2,
            "lineno" : 263,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 240
      },
      "UseOpEncode" : {
        "name" : "UseOpEncode",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 266
      },
      "EnumType" : {
        "name" : "EnumType",
        "structured_annotations": {
          "scope.Enum" : {
        "type" : {
  "type" : "struct",
  "name" : "Enum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates an integer type for C++ to use as the underlying type of enum, for example:\n\n    @cpp.EnumType{type = cpp.EnumUnderlyingType.I8}\n    enum Fruit {\n      Apple = 0,\n      Banana = 1,\n    }\n\nwill be generated into the following:\n\n    enum class Fruit : ::std::int8_t {\n      Apple = 0,\n      Banana = 1,\n    };\n\n",
        "fields" : {
          "type" : {
            "name" : "type",
            "key" : 1,
            "lineno" : 307,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "EnumUnderlyingType"
}
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 305
      },
      "Frozen2Exclude" : {
        "name" : "Frozen2Exclude",
        "structured_annotations": {
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates that frozen types should not be generated for a given struct.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 313
      },
      "Frozen2RequiresCompleteContainerParams" : {
        "name" : "Frozen2RequiresCompleteContainerParams",
        "structured_annotations": {
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates that the container params must be complete at the time this type is instantiated.\nOnly required in rare cases where the build fails with a frozen-related assert failure.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 320
      },
      "ProcessInEbThreadUnsafe" : {
        "name" : "ProcessInEbThreadUnsafe",
        "structured_annotations": {
          "scope.Function" : {
        "type" : {
  "type" : "struct",
  "name" : "Function",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Interaction" : {
        "type" : {
  "type" : "struct",
  "name" : "Interaction",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Causes C++ handler code to run inline on the EventBase thread.\nDisables overload protection, use with caution.\nCannot be applied to individual functions in interactions.\n\nCauses the request to be executed on the event base thread directly instead of rescheduling onto a thread manager thread, provided the async_eb_ handler method is implemented.\nYou should only execute the request on the event base thread if it is very fast and you have measured that rescheduling is a substantial chunk of your service's CPU usage.\nIf a request executing on the event base thread blocks or takes a long time, all other requests sharing the same event base are affected and latency will increase significantly.\nWe strongly discourage the use of this annotation unless strictly necessary. You will have to implement the harder-to-use async_eb_ handler method.\nThis also disables queue timeouts, an important form of overload protection.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 334
      },
      "RuntimeAnnotation" : {
        "name" : "RuntimeAnnotation",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Applies to structured annotation that need to be accessed in Runtime.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 341
      },
      "UseCursorSerialization" : {
        "name" : "UseCursorSerialization",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Union" : {
        "type" : {
  "type" : "struct",
  "name" : "Union",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Transitive" : {
        "type" : {
  "type" : "struct",
  "name" : "Transitive",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "cpp.Adapter" : {
        "type" : {
  "type" : "struct",
  "name" : "Adapter"
},
        "value" : {"name": "::apache::thrift::CursorSerializationAdapter"}
      }
        },
        "docstring" : "Causes uses of the given structured type to be replaced with `CursorSerializationWrapper` to allow use of cursor-based serialization.\nMust add `cpp_include \"thrift/lib/cpp2/protocol/CursorBasedSerializer.h\"` to files that use this annotation.\nSee documentation for this class in CursorBasedSerializer.h\nCan only be applied to top-level structs (used as return type or sole argument to an RPC or serialized directly), not to types used as struct fields or container elements.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 350
      }
      },
  "source_path" : "thrift/annotation/cpp",
  "py_namespace" : "thrift.annotation.cpp"
}
