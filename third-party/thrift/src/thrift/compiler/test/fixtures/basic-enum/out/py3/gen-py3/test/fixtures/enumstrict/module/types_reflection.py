#
# Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-enum/src/module.thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#


import folly.iobuf as _fbthrift_iobuf

from thrift.py3.reflection import (
    NumberType as __NumberType,
    StructType as __StructType,
    Qualifier as __Qualifier,
    StructSpec as __StructSpec,
    ListSpec as __ListSpec,
    SetSpec as __SetSpec,
    MapSpec as __MapSpec,
    FieldSpec as __FieldSpec,
)


import test.fixtures.enumstrict.module.types as _test_fixtures_enumstrict_module_types



def get_reflection__MyStruct() -> __StructSpec:
    spec: __StructSpec = __StructSpec._fbthrift_create(
        name="MyStruct",
        kind=__StructType.STRUCT,
        annotations={
        },
    )
    defaults = _test_fixtures_enumstrict_module_types.MyStruct()
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=1,
            name="myEnum",
            py_name="myEnum",
            type=_test_fixtures_enumstrict_module_types.MyEnum,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=None,
            annotations={
            },
        ),
    )
    spec.add_field(
        __FieldSpec._fbthrift_create(
            id=2,
            name="myBigEnum",
            py_name="myBigEnum",
            type=_test_fixtures_enumstrict_module_types.MyBigEnum,
            kind=__NumberType.NOT_A_NUMBER,
            qualifier=__Qualifier.UNQUALIFIED,
            default=defaults.myBigEnum,
            annotations={
            },
        ),
    )
    return spec
def get_reflection__Map__MyEnum_string() -> __MapSpec:
    return __MapSpec._fbthrift_create(
        key=_test_fixtures_enumstrict_module_types.MyEnum,
        key_kind=__NumberType.NOT_A_NUMBER,
        value=str,
        value_kind=__NumberType.NOT_A_NUMBER,
    )

