// Autogenerated by Thrift for thrift/compiler/test/fixtures/namespace/src/extend.thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//  @generated

package test


import (
    "context"
    "fmt"
    "strings"

    test0 "my/namespacing/test"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

var _ = test0.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = context.Background
var _ = fmt.Printf
var _ = strings.Split
var _ = thrift.ZERO
var _ = metadata.GoUnusedProtection__



type ExtendTestService interface {
    // Inherited/extended service
    test0.HsTestService

    Check(ctx context.Context, struct1 *test0.HsFoo) (bool, error)
}

type ExtendTestServiceChannelClientInterface interface {
    thrift.ClientInterface
    ExtendTestService
}

type ExtendTestServiceClientInterface interface {
    thrift.ClientInterface
    Check(struct1 *test0.HsFoo) (bool, error)
}

type ExtendTestServiceContextClientInterface interface {
    ExtendTestServiceClientInterface
    // Inherited/extended service
    test0.HsTestServiceContextClientInterface

    CheckContext(ctx context.Context, struct1 *test0.HsFoo) (bool, error)
}

type ExtendTestServiceChannelClient struct {
    // Inherited/extended service
    *test0.HsTestServiceChannelClient
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ ExtendTestServiceChannelClientInterface = (*ExtendTestServiceChannelClient)(nil)

func NewExtendTestServiceChannelClient(channel thrift.RequestChannel) *ExtendTestServiceChannelClient {
    return &ExtendTestServiceChannelClient{
        HsTestServiceChannelClient: test0.NewHsTestServiceChannelClient(channel),
        ch: channel,
    }
}

func (c *ExtendTestServiceChannelClient) Close() error {
    return c.ch.Close()
}

type ExtendTestServiceClient struct {
    // Inherited/extended service
    *test0.HsTestServiceClient
    chClient *ExtendTestServiceChannelClient
}
// Compile time interface enforcer
var _ ExtendTestServiceClientInterface = (*ExtendTestServiceClient)(nil)
var _ ExtendTestServiceContextClientInterface = (*ExtendTestServiceClient)(nil)

func NewExtendTestServiceClient(prot thrift.Protocol) *ExtendTestServiceClient {
    return &ExtendTestServiceClient{
        HsTestServiceClient: test0.NewHsTestServiceClient(prot),
        chClient: NewExtendTestServiceChannelClient(
            thrift.NewSerialChannel(prot),
        ),
    }
}

func (c *ExtendTestServiceClient) Close() error {
    return c.chClient.Close()
}

func (c *ExtendTestServiceChannelClient) Check(ctx context.Context, struct1 *test0.HsFoo) (bool, error) {
    in := &reqExtendTestServiceCheck{
        Struct1: struct1,
    }
    out := newRespExtendTestServiceCheck()
    err := c.ch.Call(ctx, "check", in, out)
    if err != nil {
        return false, err
    }
    return out.GetSuccess(), nil
}

func (c *ExtendTestServiceClient) Check(struct1 *test0.HsFoo) (bool, error) {
    return c.chClient.Check(context.Background(), struct1)
}

func (c *ExtendTestServiceClient) CheckContext(ctx context.Context, struct1 *test0.HsFoo) (bool, error) {
    return c.chClient.Check(ctx, struct1)
}

type reqExtendTestServiceCheck struct {
    Struct1 *test0.HsFoo `thrift:"struct1,1" json:"struct1" db:"struct1"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*reqExtendTestServiceCheck)(nil)

// Deprecated: ExtendTestServiceCheckArgsDeprecated is deprecated, since it is supposed to be internal.
type ExtendTestServiceCheckArgsDeprecated = reqExtendTestServiceCheck

func newReqExtendTestServiceCheck() *reqExtendTestServiceCheck {
    return (&reqExtendTestServiceCheck{}).
        SetStruct1NonCompat(*test0.NewHsFoo())
}

func (x *reqExtendTestServiceCheck) GetStruct1() *test0.HsFoo {
    if !x.IsSetStruct1() {
        return nil
    }

    return x.Struct1
}

func (x *reqExtendTestServiceCheck) SetStruct1NonCompat(value test0.HsFoo) *reqExtendTestServiceCheck {
    x.Struct1 = &value
    return x
}

func (x *reqExtendTestServiceCheck) SetStruct1(value *test0.HsFoo) *reqExtendTestServiceCheck {
    x.Struct1 = value
    return x
}

func (x *reqExtendTestServiceCheck) IsSetStruct1() bool {
    return x != nil && x.Struct1 != nil
}

func (x *reqExtendTestServiceCheck) writeField1(p thrift.Format) error {  // Struct1
    if !x.IsSetStruct1() {
        return nil
    }

    if err := p.WriteFieldBegin("struct1", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.Struct1
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqExtendTestServiceCheck) readField1(p thrift.Format) error {  // Struct1
    result := *test0.NewHsFoo()
err := result.Read(p)
if err != nil {
    return err
}

    x.Struct1 = &result
    return nil
}

func (x *reqExtendTestServiceCheck) toString1() string {  // Struct1
    return fmt.Sprintf("%v", x.Struct1)
}

// Deprecated: Use newReqExtendTestServiceCheck().GetStruct1() instead.
func (x *reqExtendTestServiceCheck) DefaultGetStruct1() *test0.HsFoo {
    if !x.IsSetStruct1() {
        return test0.NewHsFoo()
    }
    return x.Struct1
}



func (x *reqExtendTestServiceCheck) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("reqExtendTestServiceCheck"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqExtendTestServiceCheck) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // struct1
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqExtendTestServiceCheck) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqExtendTestServiceCheck({")
    sb.WriteString(fmt.Sprintf("Struct1:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}
type respExtendTestServiceCheck struct {
    Success *bool `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = (*respExtendTestServiceCheck)(nil)
var _ thrift.WritableResult = (*respExtendTestServiceCheck)(nil)

// Deprecated: ExtendTestServiceCheckResultDeprecated is deprecated, since it is supposed to be internal.
type ExtendTestServiceCheckResultDeprecated = respExtendTestServiceCheck

func newRespExtendTestServiceCheck() *respExtendTestServiceCheck {
    return (&respExtendTestServiceCheck{})
}

func (x *respExtendTestServiceCheck) GetSuccess() bool {
    if !x.IsSetSuccess() {
        return false
    }

    return *x.Success
}

func (x *respExtendTestServiceCheck) SetSuccessNonCompat(value bool) *respExtendTestServiceCheck {
    x.Success = &value
    return x
}

func (x *respExtendTestServiceCheck) SetSuccess(value *bool) *respExtendTestServiceCheck {
    x.Success = value
    return x
}

func (x *respExtendTestServiceCheck) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respExtendTestServiceCheck) writeField0(p thrift.Format) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.Success
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respExtendTestServiceCheck) readField0(p thrift.Format) error {  // Success
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.Success = &result
    return nil
}

func (x *respExtendTestServiceCheck) toString0() string {  // Success
    if x.IsSetSuccess() {
        return fmt.Sprintf("%v", *x.Success)
    }
    return fmt.Sprintf("%v", x.Success)
}




func (x *respExtendTestServiceCheck) Exception() thrift.WritableException {
    return nil
}

func (x *respExtendTestServiceCheck) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("respExtendTestServiceCheck"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respExtendTestServiceCheck) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 0 && wireType == thrift.Type(thrift.BOOL)):  // success
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respExtendTestServiceCheck) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respExtendTestServiceCheck({")
    sb.WriteString(fmt.Sprintf("Success:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}


type ExtendTestServiceProcessor struct {
    // Inherited/extended processor
    *test0.HsTestServiceProcessor
}
// Compile time interface enforcer
var _ thrift.ProcessorContext = (*ExtendTestServiceProcessor)(nil)

func NewExtendTestServiceProcessor(handler ExtendTestService) *ExtendTestServiceProcessor {
    p := &ExtendTestServiceProcessor{
        test0.NewHsTestServiceProcessor(handler),
    }
    p.AddToProcessorMap("check", &procFuncExtendTestServiceCheck{handler: handler})
    p.AddToFunctionServiceMap("check", "ExtendTestService")

    return p
}

func (p *ExtendTestServiceProcessor) GetThriftMetadata() *metadata.ThriftMetadata {
    return GetThriftMetadataForService("extend.ExtendTestService")
}


type procFuncExtendTestServiceCheck struct {
    handler ExtendTestService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = (*procFuncExtendTestServiceCheck)(nil)

func (p *procFuncExtendTestServiceCheck) Read(iprot thrift.Format) (thrift.Struct, thrift.Exception) {
    args := newReqExtendTestServiceCheck()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncExtendTestServiceCheck) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Format) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("check", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncExtendTestServiceCheck) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqExtendTestServiceCheck)
    result := newRespExtendTestServiceCheck()
    retval, err := p.handler.Check(ctx, args.Struct1)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing Check: " + err.Error(), err)
        return x, x
    }

    result.Success = &retval
    return result, nil
}


