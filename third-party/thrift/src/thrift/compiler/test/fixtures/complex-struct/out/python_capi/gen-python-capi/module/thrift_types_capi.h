
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_types.h>

namespace apache {
namespace thrift {
namespace python {
namespace capi {
template <>
struct Extractor<::cpp2::MyStructFloatFieldThrowExp>
    : public BaseExtractor<::cpp2::MyStructFloatFieldThrowExp> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyStructFloatFieldThrowExp> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructFloatFieldThrowExp>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructFloatFieldThrowExp>> {
  ExtractorResult<::cpp2::MyStructFloatFieldThrowExp> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::MyStructFloatFieldThrowExp>
    : public BaseConstructor<::cpp2::MyStructFloatFieldThrowExp> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyStructFloatFieldThrowExp& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructFloatFieldThrowExp>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructFloatFieldThrowExp>> {
  PyObject* operator()(const ::cpp2::MyStructFloatFieldThrowExp& val);
};

template <>
struct Extractor<::cpp2::MyStructMapFloatThrowExp>
    : public BaseExtractor<::cpp2::MyStructMapFloatThrowExp> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyStructMapFloatThrowExp> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructMapFloatThrowExp>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructMapFloatThrowExp>> {
  ExtractorResult<::cpp2::MyStructMapFloatThrowExp> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::MyStructMapFloatThrowExp>
    : public BaseConstructor<::cpp2::MyStructMapFloatThrowExp> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyStructMapFloatThrowExp& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructMapFloatThrowExp>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructMapFloatThrowExp>> {
  PyObject* operator()(const ::cpp2::MyStructMapFloatThrowExp& val);
};

template <>
struct Extractor<::cpp2::MyStruct>
    : public BaseExtractor<::cpp2::MyStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct>> {
  ExtractorResult<::cpp2::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::MyStruct>
    : public BaseConstructor<::cpp2::MyStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct>> {
  PyObject* operator()(const ::cpp2::MyStruct& val);
};

template <>
struct Extractor<::cpp2::SimpleStruct>
    : public BaseExtractor<::cpp2::SimpleStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::SimpleStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::SimpleStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::SimpleStruct>> {
  ExtractorResult<::cpp2::SimpleStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::SimpleStruct>
    : public BaseConstructor<::cpp2::SimpleStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::SimpleStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::SimpleStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::SimpleStruct>> {
  PyObject* operator()(const ::cpp2::SimpleStruct& val);
};

template <>
struct Extractor<::cpp2::defaultStruct>
    : public BaseExtractor<::cpp2::defaultStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::defaultStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::defaultStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::defaultStruct>> {
  ExtractorResult<::cpp2::defaultStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::defaultStruct>
    : public BaseConstructor<::cpp2::defaultStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::defaultStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::defaultStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::defaultStruct>> {
  PyObject* operator()(const ::cpp2::defaultStruct& val);
};

template <>
struct Extractor<::cpp2::MyStructTypeDef>
    : public BaseExtractor<::cpp2::MyStructTypeDef> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyStructTypeDef> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructTypeDef>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructTypeDef>> {
  ExtractorResult<::cpp2::MyStructTypeDef> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::MyStructTypeDef>
    : public BaseConstructor<::cpp2::MyStructTypeDef> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyStructTypeDef& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructTypeDef>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructTypeDef>> {
  PyObject* operator()(const ::cpp2::MyStructTypeDef& val);
};

template <>
struct Extractor<::cpp2::MyDataItem>
    : public BaseExtractor<::cpp2::MyDataItem> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyDataItem> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem>> {
  ExtractorResult<::cpp2::MyDataItem> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::MyDataItem>
    : public BaseConstructor<::cpp2::MyDataItem> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyDataItem& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem>> {
  PyObject* operator()(const ::cpp2::MyDataItem& val);
};

template <>
struct Extractor<::cpp2::MyUnion>
    : public BaseExtractor<::cpp2::MyUnion> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyUnion> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnion>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnion>> {
  ExtractorResult<::cpp2::MyUnion> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::MyUnion>
    : public BaseConstructor<::cpp2::MyUnion> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyUnion& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnion>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnion>> {
  PyObject* operator()(const ::cpp2::MyUnion& val);
};

template <>
struct Extractor<::cpp2::MyUnionFloatFieldThrowExp>
    : public BaseExtractor<::cpp2::MyUnionFloatFieldThrowExp> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::MyUnionFloatFieldThrowExp> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnionFloatFieldThrowExp>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnionFloatFieldThrowExp>> {
  ExtractorResult<::cpp2::MyUnionFloatFieldThrowExp> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::MyUnionFloatFieldThrowExp>
    : public BaseConstructor<::cpp2::MyUnionFloatFieldThrowExp> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::MyUnionFloatFieldThrowExp& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnionFloatFieldThrowExp>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnionFloatFieldThrowExp>> {
  PyObject* operator()(const ::cpp2::MyUnionFloatFieldThrowExp& val);
};

template <>
struct Extractor<::cpp2::ComplexNestedStruct>
    : public BaseExtractor<::cpp2::ComplexNestedStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::ComplexNestedStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::ComplexNestedStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::ComplexNestedStruct>> {
  ExtractorResult<::cpp2::ComplexNestedStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::ComplexNestedStruct>
    : public BaseConstructor<::cpp2::ComplexNestedStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::ComplexNestedStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::ComplexNestedStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::ComplexNestedStruct>> {
  PyObject* operator()(const ::cpp2::ComplexNestedStruct& val);
};

template <>
struct Extractor<::cpp2::TypeRemapped>
    : public BaseExtractor<::cpp2::TypeRemapped> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::TypeRemapped> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::TypeRemapped>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::TypeRemapped>> {
  ExtractorResult<::cpp2::TypeRemapped> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::TypeRemapped>
    : public BaseConstructor<::cpp2::TypeRemapped> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::TypeRemapped& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::TypeRemapped>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::TypeRemapped>> {
  PyObject* operator()(const ::cpp2::TypeRemapped& val);
};

template <>
struct Extractor<::cpp2::emptyXcep>
    : public BaseExtractor<::cpp2::emptyXcep> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::emptyXcep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep>> {
  ExtractorResult<::cpp2::emptyXcep> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::emptyXcep>
    : public BaseConstructor<::cpp2::emptyXcep> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::emptyXcep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep>> {
  PyObject* operator()(const ::cpp2::emptyXcep& val);
};

template <>
struct Extractor<::cpp2::reqXcep>
    : public BaseExtractor<::cpp2::reqXcep> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::reqXcep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::reqXcep>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::reqXcep>> {
  ExtractorResult<::cpp2::reqXcep> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::reqXcep>
    : public BaseConstructor<::cpp2::reqXcep> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::reqXcep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::reqXcep>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::reqXcep>> {
  PyObject* operator()(const ::cpp2::reqXcep& val);
};

template <>
struct Extractor<::cpp2::optXcep>
    : public BaseExtractor<::cpp2::optXcep> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::optXcep> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::optXcep>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::optXcep>> {
  ExtractorResult<::cpp2::optXcep> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::optXcep>
    : public BaseConstructor<::cpp2::optXcep> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::optXcep& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::optXcep>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::optXcep>> {
  PyObject* operator()(const ::cpp2::optXcep& val);
};

template <>
struct Extractor<::cpp2::complexException>
    : public BaseExtractor<::cpp2::complexException> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::cpp2::complexException> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::complexException>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::complexException>> {
  ExtractorResult<::cpp2::complexException> operator()(PyObject* obj);
};

template <>
struct Constructor<::cpp2::complexException>
    : public BaseConstructor<::cpp2::complexException> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::cpp2::complexException& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::complexException>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::complexException>> {
  PyObject* operator()(const ::cpp2::complexException& val);
};

template <>
struct Extractor<::cpp2::MyEnum>
    : public BaseExtractor<::cpp2::MyEnum> {
  ExtractorResult<::cpp2::MyEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::cpp2::MyEnum> {
  PyObject* operator()(::cpp2::MyEnum val);
};

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
