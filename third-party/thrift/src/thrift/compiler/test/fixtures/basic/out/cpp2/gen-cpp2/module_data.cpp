/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/basic/gen-cpp2/module_data.h"

#include <thrift/lib/cpp2/gen/module_data_cpp.h>

FOLLY_CLANG_DISABLE_WARNING("-Wunused-macros")

#if defined(__GNUC__) && defined(__linux__) && !FOLLY_MOBILE
// These attributes are applied to the static data members to ensure that they
// are not stripped from the compiled binary, in order to keep them available
// for use by debuggers at runtime.
//
// The "used" attribute is required to ensure the compiler always emits unused
// data.
//
// The "section" attribute is required to stop the linker from stripping used
// data. It works by forcing all of the data members (both used and unused ones)
// into the same section. As the linker strips data on a per-section basis, it
// is then unable to remove unused data without also removing used data.
// This has a similar effect to the "retain" attribute, but works with older
// toolchains.
#define THRIFT_DATA_MEMBER [[gnu::used]] [[gnu::section(".rodata.thrift.data")]]
#else
#define THRIFT_DATA_MEMBER
#endif

namespace apache {
namespace thrift {

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::basic::MyStruct>::name = "MyStruct";
THRIFT_DATA_MEMBER const std::array<std::string_view, 9> TStructDataStorage<::test::fixtures::basic::MyStruct>::fields_names = { {
  "MyIntField"sv,
  "MyStringField"sv,
  "MyDataField"sv,
  "myEnum"sv,
  "oneway"sv,
  "readonly"sv,
  "idempotent"sv,
  "floatSet"sv,
  "no_hack_codegen_field"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 9> TStructDataStorage<::test::fixtures::basic::MyStruct>::fields_ids = { {
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 9> TStructDataStorage<::test::fixtures::basic::MyStruct>::fields_types = { {
  TType::T_I64,
  TType::T_STRING,
  TType::T_STRUCT,
  TType::T_I32,
  TType::T_BOOL,
  TType::T_BOOL,
  TType::T_BOOL,
  TType::T_SET,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 9> TStructDataStorage<::test::fixtures::basic::MyStruct>::storage_names = { {
  "__fbthrift_field_MyIntField"sv,
  "__fbthrift_field_MyStringField"sv,
  "__fbthrift_field_MyDataField"sv,
  "__fbthrift_field_myEnum"sv,
  "__fbthrift_field_oneway"sv,
  "__fbthrift_field_readonly"sv,
  "__fbthrift_field_idempotent"sv,
  "__fbthrift_field_floatSet"sv,
  "__fbthrift_field_no_hack_codegen_field"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 9> TStructDataStorage<::test::fixtures::basic::MyStruct>::isset_indexes = { {
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::basic::Containers>::name = "Containers";
THRIFT_DATA_MEMBER const std::array<std::string_view, 3> TStructDataStorage<::test::fixtures::basic::Containers>::fields_names = { {
  "I32List"sv,
  "StringSet"sv,
  "StringToI64Map"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 3> TStructDataStorage<::test::fixtures::basic::Containers>::fields_ids = { {
  1,
  2,
  3,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 3> TStructDataStorage<::test::fixtures::basic::Containers>::fields_types = { {
  TType::T_LIST,
  TType::T_SET,
  TType::T_MAP,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 3> TStructDataStorage<::test::fixtures::basic::Containers>::storage_names = { {
  "__fbthrift_field_I32List"sv,
  "__fbthrift_field_StringSet"sv,
  "__fbthrift_field_StringToI64Map"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 3> TStructDataStorage<::test::fixtures::basic::Containers>::isset_indexes = { {
  0,
  1,
  2,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::basic::MyDataItem>::name = "MyDataItem";
THRIFT_DATA_MEMBER const std::array<std::string_view, 0> TStructDataStorage<::test::fixtures::basic::MyDataItem>::fields_names = { {
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 0> TStructDataStorage<::test::fixtures::basic::MyDataItem>::fields_ids = { {
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 0> TStructDataStorage<::test::fixtures::basic::MyDataItem>::fields_types = { {
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 0> TStructDataStorage<::test::fixtures::basic::MyDataItem>::storage_names = { {
}};
THRIFT_DATA_MEMBER const std::array<int, 0> TStructDataStorage<::test::fixtures::basic::MyDataItem>::isset_indexes = { {
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::basic::MyUnion>::name = "MyUnion";
THRIFT_DATA_MEMBER const std::array<std::string_view, 4> TStructDataStorage<::test::fixtures::basic::MyUnion>::fields_names = { {
  "myEnum"sv,
  "myStruct"sv,
  "myDataItem"sv,
  "floatSet"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 4> TStructDataStorage<::test::fixtures::basic::MyUnion>::fields_ids = { {
  1,
  2,
  3,
  4,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 4> TStructDataStorage<::test::fixtures::basic::MyUnion>::fields_types = { {
  TType::T_I32,
  TType::T_STRUCT,
  TType::T_STRUCT,
  TType::T_SET,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 4> TStructDataStorage<::test::fixtures::basic::MyUnion>::storage_names = { {
  "myEnum"sv,
  "myStruct"sv,
  "myDataItem"sv,
  "floatSet"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 4> TStructDataStorage<::test::fixtures::basic::MyUnion>::isset_indexes = { {
  0,
  1,
  2,
  3,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::basic::MyException>::name = "MyException";
THRIFT_DATA_MEMBER const std::array<std::string_view, 4> TStructDataStorage<::test::fixtures::basic::MyException>::fields_names = { {
  "MyIntField"sv,
  "MyStringField"sv,
  "myStruct"sv,
  "myUnion"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 4> TStructDataStorage<::test::fixtures::basic::MyException>::fields_ids = { {
  1,
  2,
  3,
  4,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 4> TStructDataStorage<::test::fixtures::basic::MyException>::fields_types = { {
  TType::T_I64,
  TType::T_STRING,
  TType::T_STRUCT,
  TType::T_STRUCT,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 4> TStructDataStorage<::test::fixtures::basic::MyException>::storage_names = { {
  "__fbthrift_field_MyIntField"sv,
  "__fbthrift_field_MyStringField"sv,
  "__fbthrift_field_myStruct"sv,
  "__fbthrift_field_myUnion"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 4> TStructDataStorage<::test::fixtures::basic::MyException>::isset_indexes = { {
  0,
  1,
  2,
  3,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::basic::ReservedKeyword>::name = "ReservedKeyword";
THRIFT_DATA_MEMBER const std::array<std::string_view, 1> TStructDataStorage<::test::fixtures::basic::ReservedKeyword>::fields_names = { {
  "reserved_field"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 1> TStructDataStorage<::test::fixtures::basic::ReservedKeyword>::fields_ids = { {
  1,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 1> TStructDataStorage<::test::fixtures::basic::ReservedKeyword>::fields_types = { {
  TType::T_I32,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 1> TStructDataStorage<::test::fixtures::basic::ReservedKeyword>::storage_names = { {
  "__fbthrift_field_reserved_field"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 1> TStructDataStorage<::test::fixtures::basic::ReservedKeyword>::isset_indexes = { {
  0,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::basic::UnionToBeRenamed>::name = "UnionToBeRenamed";
THRIFT_DATA_MEMBER const std::array<std::string_view, 1> TStructDataStorage<::test::fixtures::basic::UnionToBeRenamed>::fields_names = { {
  "reserved_field"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 1> TStructDataStorage<::test::fixtures::basic::UnionToBeRenamed>::fields_ids = { {
  1,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 1> TStructDataStorage<::test::fixtures::basic::UnionToBeRenamed>::fields_types = { {
  TType::T_I32,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 1> TStructDataStorage<::test::fixtures::basic::UnionToBeRenamed>::storage_names = { {
  "reserved_field"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 1> TStructDataStorage<::test::fixtures::basic::UnionToBeRenamed>::isset_indexes = { {
  0,
}};

} // namespace thrift
} // namespace apache
