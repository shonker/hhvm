/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.basic;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyException extends Exception implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MyException");
  private static final TField MY_INT_FIELD_FIELD_DESC = new TField("MyIntField", TType.I64, (short)1);
  private static final TField MY_STRING_FIELD_FIELD_DESC = new TField("MyStringField", TType.STRING, (short)2);
  private static final TField MY_STRUCT_FIELD_DESC = new TField("myStruct", TType.STRUCT, (short)3);
  private static final TField MY_UNION_FIELD_DESC = new TField("myUnion", TType.STRUCT, (short)4);

  public long MyIntField;
  public String MyStringField;
  public MyStruct myStruct;
  public MyUnion myUnion;
  public static final int MYINTFIELD = 1;
  public static final int MYSTRINGFIELD = 2;
  public static final int MYSTRUCT = 3;
  public static final int MYUNION = 4;

  // isset id assignments
  private static final int __MYINTFIELD_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(MYINTFIELD, new FieldMetaData("MyIntField", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(MYSTRINGFIELD, new FieldMetaData("MyStringField", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(MYSTRUCT, new FieldMetaData("myStruct", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MyStruct.class)));
    tmpMetaDataMap.put(MYUNION, new FieldMetaData("myUnion", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, MyUnion.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(MyException.class, metaDataMap);
  }

  public MyException() {
  }

  public MyException(
      long MyIntField,
      String MyStringField,
      MyStruct myStruct,
      MyUnion myUnion) {
    this();
    this.MyIntField = MyIntField;
    setMyIntFieldIsSet(true);
    this.MyStringField = MyStringField;
    this.myStruct = myStruct;
    this.myUnion = myUnion;
  }

  public static class Builder {
    private long MyIntField;
    private String MyStringField;
    private MyStruct myStruct;
    private MyUnion myUnion;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setMyIntField(final long MyIntField) {
      this.MyIntField = MyIntField;
      __optional_isset.set(__MYINTFIELD_ISSET_ID, true);
      return this;
    }

    public Builder setMyStringField(final String MyStringField) {
      this.MyStringField = MyStringField;
      return this;
    }

    public Builder setMyStruct(final MyStruct myStruct) {
      this.myStruct = myStruct;
      return this;
    }

    public Builder setMyUnion(final MyUnion myUnion) {
      this.myUnion = myUnion;
      return this;
    }

    public MyException build() {
      MyException result = new MyException();
      if (__optional_isset.get(__MYINTFIELD_ISSET_ID)) {
        result.setMyIntField(this.MyIntField);
      }
      result.setMyStringField(this.MyStringField);
      result.setMyStruct(this.myStruct);
      result.setMyUnion(this.myUnion);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyException(MyException other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.MyIntField = TBaseHelper.deepCopy(other.MyIntField);
    if (other.isSetMyStringField()) {
      this.MyStringField = TBaseHelper.deepCopy(other.MyStringField);
    }
    if (other.isSetMyStruct()) {
      this.myStruct = TBaseHelper.deepCopy(other.myStruct);
    }
    if (other.isSetMyUnion()) {
      this.myUnion = TBaseHelper.deepCopy(other.myUnion);
    }
  }

  public MyException deepCopy() {
    return new MyException(this);
  }

  public long getMyIntField() {
    return this.MyIntField;
  }

  public MyException setMyIntField(long MyIntField) {
    this.MyIntField = MyIntField;
    setMyIntFieldIsSet(true);
    return this;
  }

  public void unsetMyIntField() {
    __isset_bit_vector.clear(__MYINTFIELD_ISSET_ID);
  }

  // Returns true if field MyIntField is set (has been assigned a value) and false otherwise
  public boolean isSetMyIntField() {
    return __isset_bit_vector.get(__MYINTFIELD_ISSET_ID);
  }

  public void setMyIntFieldIsSet(boolean __value) {
    __isset_bit_vector.set(__MYINTFIELD_ISSET_ID, __value);
  }

  public String getMyStringField() {
    return this.MyStringField;
  }

  public MyException setMyStringField(String MyStringField) {
    this.MyStringField = MyStringField;
    return this;
  }

  public void unsetMyStringField() {
    this.MyStringField = null;
  }

  // Returns true if field MyStringField is set (has been assigned a value) and false otherwise
  public boolean isSetMyStringField() {
    return this.MyStringField != null;
  }

  public void setMyStringFieldIsSet(boolean __value) {
    if (!__value) {
      this.MyStringField = null;
    }
  }

  public MyStruct getMyStruct() {
    return this.myStruct;
  }

  public MyException setMyStruct(MyStruct myStruct) {
    this.myStruct = myStruct;
    return this;
  }

  public void unsetMyStruct() {
    this.myStruct = null;
  }

  // Returns true if field myStruct is set (has been assigned a value) and false otherwise
  public boolean isSetMyStruct() {
    return this.myStruct != null;
  }

  public void setMyStructIsSet(boolean __value) {
    if (!__value) {
      this.myStruct = null;
    }
  }

  public MyUnion getMyUnion() {
    return this.myUnion;
  }

  public MyException setMyUnion(MyUnion myUnion) {
    this.myUnion = myUnion;
    return this;
  }

  public void unsetMyUnion() {
    this.myUnion = null;
  }

  // Returns true if field myUnion is set (has been assigned a value) and false otherwise
  public boolean isSetMyUnion() {
    return this.myUnion != null;
  }

  public void setMyUnionIsSet(boolean __value) {
    if (!__value) {
      this.myUnion = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case MYINTFIELD:
      if (__value == null) {
        unsetMyIntField();
      } else {
        setMyIntField((Long)__value);
      }
      break;

    case MYSTRINGFIELD:
      if (__value == null) {
        unsetMyStringField();
      } else {
        setMyStringField((String)__value);
      }
      break;

    case MYSTRUCT:
      if (__value == null) {
        unsetMyStruct();
      } else {
        setMyStruct((MyStruct)__value);
      }
      break;

    case MYUNION:
      if (__value == null) {
        unsetMyUnion();
      } else {
        setMyUnion((MyUnion)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case MYINTFIELD:
      return new Long(getMyIntField());

    case MYSTRINGFIELD:
      return getMyStringField();

    case MYSTRUCT:
      return getMyStruct();

    case MYUNION:
      return getMyUnion();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyException))
      return false;
    MyException that = (MyException)_that;

    if (!TBaseHelper.equalsNobinary(this.MyIntField, that.MyIntField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMyStringField(), that.isSetMyStringField(), this.MyStringField, that.MyStringField)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMyStruct(), that.isSetMyStruct(), this.myStruct, that.myStruct)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetMyUnion(), that.isSetMyUnion(), this.myUnion, that.myUnion)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {MyIntField, MyStringField, myStruct, myUnion});
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case MYINTFIELD:
          if (__field.type == TType.I64) {
            this.MyIntField = iprot.readI64();
            setMyIntFieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MYSTRINGFIELD:
          if (__field.type == TType.STRING) {
            this.MyStringField = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MYSTRUCT:
          if (__field.type == TType.STRUCT) {
            this.myStruct = new MyStruct();
            this.myStruct.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case MYUNION:
          if (__field.type == TType.STRUCT) {
            this.myUnion = new MyUnion();
            this.myUnion.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(MY_INT_FIELD_FIELD_DESC);
    oprot.writeI64(this.MyIntField);
    oprot.writeFieldEnd();
    if (this.MyStringField != null) {
      oprot.writeFieldBegin(MY_STRING_FIELD_FIELD_DESC);
      oprot.writeString(this.MyStringField);
      oprot.writeFieldEnd();
    }
    if (this.myStruct != null) {
      oprot.writeFieldBegin(MY_STRUCT_FIELD_DESC);
      this.myStruct.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.myUnion != null) {
      oprot.writeFieldBegin(MY_UNION_FIELD_DESC);
      this.myUnion.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("MyException");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("MyIntField");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getMyIntField(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("MyStringField");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMyStringField() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMyStringField(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("myStruct");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMyStruct() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMyStruct(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("myUnion");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getMyUnion() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getMyUnion(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

