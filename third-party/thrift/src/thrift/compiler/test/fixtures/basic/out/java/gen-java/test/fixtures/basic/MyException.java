/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.basic;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import com.google.common.collect.*;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct("MyException")
public final class MyException extends org.apache.thrift.TBaseException implements com.facebook.thrift.payload.ThriftSerializable {
    private static final long serialVersionUID = 1L;

    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();

    private static final TStruct STRUCT_DESC = new TStruct("MyException");
    private final long myIntField;
    public static final int _MYINTFIELD = 1;
    private static final TField MY_INT_FIELD_FIELD_DESC = new TField("myIntField", TType.I64, (short)1);
    private final String myStringField;
    public static final int _MYSTRINGFIELD = 2;
    private static final TField MY_STRING_FIELD_FIELD_DESC = new TField("myStringField", TType.STRING, (short)2);
    private final test.fixtures.basic.MyStruct myStruct;
    public static final int _MYSTRUCT = 3;
    private static final TField MY_STRUCT_FIELD_DESC = new TField("myStruct", TType.STRUCT, (short)3);
    private final test.fixtures.basic.MyUnion myUnion;
    public static final int _MYUNION = 4;
    private static final TField MY_UNION_FIELD_DESC = new TField("myUnion", TType.STRUCT, (short)4);

    static {
      NAMES_TO_IDS.put("myIntField", 1);
      THRIFT_NAMES_TO_IDS.put("MyIntField", 1);
      FIELD_METADATA.put(1, MY_INT_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("myStringField", 2);
      THRIFT_NAMES_TO_IDS.put("MyStringField", 2);
      FIELD_METADATA.put(2, MY_STRING_FIELD_FIELD_DESC);
      NAMES_TO_IDS.put("myStruct", 3);
      THRIFT_NAMES_TO_IDS.put("myStruct", 3);
      FIELD_METADATA.put(3, MY_STRUCT_FIELD_DESC);
      NAMES_TO_IDS.put("myUnion", 4);
      THRIFT_NAMES_TO_IDS.put("myUnion", 4);
      FIELD_METADATA.put(4, MY_UNION_FIELD_DESC);
      com.facebook.thrift.type.TypeRegistry.add(new com.facebook.thrift.type.Type(
        new com.facebook.thrift.type.UniversalName("test.dev/fixtures/basic/MyException"),
        MyException.class, MyException::read0));
    }

    @ThriftConstructor
    public MyException(
        @com.facebook.swift.codec.ThriftField(value=1, name="MyIntField", requiredness=Requiredness.NONE) final long myIntField,
        @com.facebook.swift.codec.ThriftField(value=2, name="MyStringField", requiredness=Requiredness.NONE) final String myStringField,
        @com.facebook.swift.codec.ThriftField(value=3, name="myStruct", requiredness=Requiredness.NONE) final test.fixtures.basic.MyStruct myStruct,
        @com.facebook.swift.codec.ThriftField(value=4, name="myUnion", requiredness=Requiredness.NONE) final test.fixtures.basic.MyUnion myUnion
    ) {
        this.myIntField = myIntField;
        this.myStringField = myStringField;
        this.myStruct = myStruct;
        this.myUnion = myUnion;
    }
    
    @ThriftConstructor
    protected MyException() {
      this.myIntField = 0L;
      this.myStringField = null;
      this.myStruct = null;
      this.myUnion = null;
    }
    
    public static class Builder {
        private long myIntField = 0L;
        private String myStringField = null;
        private test.fixtures.basic.MyStruct myStruct = null;
        private test.fixtures.basic.MyUnion myUnion = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="MyIntField", requiredness=Requiredness.NONE)
        public Builder setMyIntField(long myIntField) {
            this.myIntField = myIntField;
            return this;
        }
    
        public long getMyIntField() { return myIntField; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="MyStringField", requiredness=Requiredness.NONE)
        public Builder setMyStringField(String myStringField) {
            this.myStringField = myStringField;
            return this;
        }
    
        public String getMyStringField() { return myStringField; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="myStruct", requiredness=Requiredness.NONE)
        public Builder setMyStruct(test.fixtures.basic.MyStruct myStruct) {
            this.myStruct = myStruct;
            return this;
        }
    
        public test.fixtures.basic.MyStruct getMyStruct() { return myStruct; }
    
            @com.facebook.swift.codec.ThriftField(value=4, name="myUnion", requiredness=Requiredness.NONE)
        public Builder setMyUnion(test.fixtures.basic.MyUnion myUnion) {
            this.myUnion = myUnion;
            return this;
        }
    
        public test.fixtures.basic.MyUnion getMyUnion() { return myUnion; }
    
        public Builder() { }
        public Builder(MyException other) {
            this.myIntField = other.myIntField;
            this.myStringField = other.myStringField;
            this.myStruct = other.myStruct;
            this.myUnion = other.myUnion;
        }
    
        @ThriftConstructor
        public MyException build() {
            MyException result = new MyException (
                this.myIntField,
                this.myStringField,
                this.myStruct,
                this.myUnion
            );
            return result;
        }
    }
    
    
    
    @com.facebook.swift.codec.ThriftField(value=1, name="MyIntField", requiredness=Requiredness.NONE)
    public long getMyIntField() { return myIntField; }
        
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="MyStringField", requiredness=Requiredness.NONE)
    public String getMyStringField() { return myStringField; }
        
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=3, name="myStruct", requiredness=Requiredness.NONE)
    public test.fixtures.basic.MyStruct getMyStruct() { return myStruct; }
        
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=4, name="myUnion", requiredness=Requiredness.NONE)
    public test.fixtures.basic.MyUnion getMyUnion() { return myUnion; }
    
    
    public static com.facebook.thrift.payload.Reader<MyException> asReader() {
      return MyException::read0;
    }
    
    public static MyException read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(MyException.NAMES_TO_IDS, MyException.THRIFT_NAMES_TO_IDS, MyException.FIELD_METADATA);
      MyException.Builder builder = new MyException.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _MYINTFIELD:
          if (__field.type == TType.I64) {
            long myIntField = oprot.readI64();
            builder.setMyIntField(myIntField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MYSTRINGFIELD:
          if (__field.type == TType.STRING) {
            String myStringField = oprot.readString();
            builder.setMyStringField(myStringField);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MYSTRUCT:
          if (__field.type == TType.STRUCT) {
            test.fixtures.basic.MyStruct myStruct = test.fixtures.basic.MyStruct.read0(oprot);
            builder.setMyStruct(myStruct);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _MYUNION:
          if (__field.type == TType.STRUCT) {
            test.fixtures.basic.MyUnion myUnion = test.fixtures.basic.MyUnion.read0(oprot);
            builder.setMyUnion(myUnion);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MY_INT_FIELD_FIELD_DESC);
      oprot.writeI64(this.myIntField);
      oprot.writeFieldEnd();
      if (myStringField != null) {
        oprot.writeFieldBegin(MY_STRING_FIELD_FIELD_DESC);
        oprot.writeString(this.myStringField);
        oprot.writeFieldEnd();
      }
      if (myStruct != null) {
        oprot.writeFieldBegin(MY_STRUCT_FIELD_DESC);
        this.myStruct.write0(oprot);
        oprot.writeFieldEnd();
      }
      if (myUnion != null) {
        oprot.writeFieldBegin(MY_UNION_FIELD_DESC);
        this.myUnion.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    private static class _MyExceptionLazy {
        private static final MyException _DEFAULT = new MyException.Builder().build();
    }
    
    public static MyException defaultInstance() {
        return  _MyExceptionLazy._DEFAULT;
    }}
