/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.basic;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Containers implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Containers");
  private static final TField I32_LIST_FIELD_DESC = new TField("I32List", TType.LIST, (short)1);
  private static final TField STRING_SET_FIELD_DESC = new TField("StringSet", TType.SET, (short)2);
  private static final TField STRING_TO_I64_MAP_FIELD_DESC = new TField("StringToI64Map", TType.MAP, (short)3);

  public final List<Integer> I32List;
  public final Set<String> StringSet;
  public final Map<String,Long> StringToI64Map;
  public static final int I32LIST = 1;
  public static final int STRINGSET = 2;
  public static final int STRINGTOI64MAP = 3;

  public Containers(
      List<Integer> I32List,
      Set<String> StringSet,
      Map<String,Long> StringToI64Map) {
    this.I32List = I32List;
    this.StringSet = StringSet;
    this.StringToI64Map = StringToI64Map;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Containers(Containers other) {
    if (other.isSetI32List()) {
      this.I32List = TBaseHelper.deepCopy(other.I32List);
    } else {
      this.I32List = null;
    }
    if (other.isSetStringSet()) {
      this.StringSet = TBaseHelper.deepCopy(other.StringSet);
    } else {
      this.StringSet = null;
    }
    if (other.isSetStringToI64Map()) {
      this.StringToI64Map = TBaseHelper.deepCopy(other.StringToI64Map);
    } else {
      this.StringToI64Map = null;
    }
  }

  public Containers deepCopy() {
    return new Containers(this);
  }

  public List<Integer> getI32List() {
    return this.I32List;
  }

  // Returns true if field I32List is set (has been assigned a value) and false otherwise
  public boolean isSetI32List() {
    return this.I32List != null;
  }

  public Set<String> getStringSet() {
    return this.StringSet;
  }

  // Returns true if field StringSet is set (has been assigned a value) and false otherwise
  public boolean isSetStringSet() {
    return this.StringSet != null;
  }

  public Map<String,Long> getStringToI64Map() {
    return this.StringToI64Map;
  }

  // Returns true if field StringToI64Map is set (has been assigned a value) and false otherwise
  public boolean isSetStringToI64Map() {
    return this.StringToI64Map != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof Containers))
      return false;
    Containers that = (Containers)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetI32List(), that.isSetI32List(), this.I32List, that.I32List)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStringSet(), that.isSetStringSet(), this.StringSet, that.StringSet)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStringToI64Map(), that.isSetStringToI64Map(), this.StringToI64Map, that.StringToI64Map)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {I32List, StringSet, StringToI64Map});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static Containers deserialize(TProtocol iprot) throws TException {
    List<Integer> tmp_I32List = null;
    Set<String> tmp_StringSet = null;
    Map<String,Long> tmp_StringToI64Map = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case I32LIST:
          if (__field.type == TType.LIST) {
            {
              TList _list6 = iprot.readListBegin();
              tmp_I32List = new ArrayList<Integer>(Math.max(0, _list6.size));
              for (int _i7 = 0; 
                   (_list6.size < 0) ? iprot.peekList() : (_i7 < _list6.size); 
                   ++_i7)
              {
                Integer _elem8;
                _elem8 = iprot.readI32();
                tmp_I32List.add(_elem8);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRINGSET:
          if (__field.type == TType.SET) {
            {
              TSet _set9 = iprot.readSetBegin();
              tmp_StringSet = new HashSet<String>(Math.max(0, 2*_set9.size));
              for (int _i10 = 0; 
                   (_set9.size < 0) ? iprot.peekSet() : (_i10 < _set9.size); 
                   ++_i10)
              {
                String _elem11;
                _elem11 = iprot.readString();
                tmp_StringSet.add(_elem11);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRINGTOI64MAP:
          if (__field.type == TType.MAP) {
            {
              TMap _map12 = iprot.readMapBegin();
              tmp_StringToI64Map = new HashMap<String,Long>(Math.max(0, 2*_map12.size));
              for (int _i13 = 0; 
                   (_map12.size < 0) ? iprot.peekMap() : (_i13 < _map12.size); 
                   ++_i13)
              {
                String _key14;
                Long _val15;
                _key14 = iprot.readString();
                _val15 = iprot.readI64();
                tmp_StringToI64Map.put(_key14, _val15);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    Containers _that;
    _that = new Containers(
      tmp_I32List
      ,tmp_StringSet
      ,tmp_StringToI64Map
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.I32List != null) {
      oprot.writeFieldBegin(I32_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.I32List.size()));
        for (Integer _iter16 : this.I32List)        {
          oprot.writeI32(_iter16);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.StringSet != null) {
      oprot.writeFieldBegin(STRING_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.StringSet.size()));
        for (String _iter17 : this.StringSet)        {
          oprot.writeString(_iter17);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.StringToI64Map != null) {
      oprot.writeFieldBegin(STRING_TO_I64_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.StringToI64Map.size()));
        for (Map.Entry<String, Long> _iter18 : this.StringToI64Map.entrySet())        {
          oprot.writeString(_iter18.getKey());
          oprot.writeI64(_iter18.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

