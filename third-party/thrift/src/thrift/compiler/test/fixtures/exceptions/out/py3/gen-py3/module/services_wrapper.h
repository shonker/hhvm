/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/exceptions/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once
#if __has_include(<thrift/compiler/test/fixtures/exceptions/gen-cpp2/Raiser.h>)
#include <thrift/compiler/test/fixtures/exceptions/gen-cpp2/Raiser.h>
#else
#include <thrift/compiler/test/fixtures/exceptions/gen-cpp2/module_handlers.h>
#endif
#include <folly/python/futures.h>
#include <Python.h>

#include <memory>

namespace cpp2 {

class RaiserWrapper : virtual public RaiserSvIf {
  protected:
    PyObject *if_object;
    folly::Executor *executor;
  public:
    explicit RaiserWrapper(PyObject *if_object, folly::Executor *exc);
    void async_tm_doBland(apache::thrift::HandlerCallbackPtr<void> callback) override;
    void async_tm_doRaise(apache::thrift::HandlerCallbackPtr<void> callback) override;
    void async_tm_get200(apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::string>> callback) override;
    void async_tm_get500(apache::thrift::HandlerCallbackPtr<std::unique_ptr<std::string>> callback) override;
folly::SemiFuture<folly::Unit> semifuture_onStartServing() override;
folly::SemiFuture<folly::Unit> semifuture_onStopRequested() override;
};

std::shared_ptr<apache::thrift::ServerInterface> RaiserInterface(PyObject *if_object, folly::Executor *exc);
} // namespace cpp2
