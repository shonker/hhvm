/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/serialized_dep.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */

#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/serialized_dep_data.h"

#include <thrift/lib/cpp2/gen/module_data_cpp.h>

FOLLY_CLANG_DISABLE_WARNING("-Wunused-macros")

#if defined(__GNUC__) && defined(__linux__) && !FOLLY_MOBILE
// These attributes are applied to the static data members to ensure that they
// are not stripped from the compiled binary, in order to keep them available
// for use by debuggers at runtime.
//
// The "used" attribute is required to ensure the compiler always emits unused
// data.
//
// The "section" attribute is required to stop the linker from stripping used
// data. It works by forcing all of the data members (both used and unused ones)
// into the same section. As the linker strips data on a per-section basis, it
// is then unable to remove unused data without also removing used data.
// This has a similar effect to the "retain" attribute, but works with older
// toolchains.
#define THRIFT_DATA_MEMBER [[gnu::used]] [[gnu::section(".rodata.thrift.data")]]
#else
#define THRIFT_DATA_MEMBER
#endif

namespace apache {
namespace thrift {

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::python_capi::SerializedStruct>::name = "SerializedStruct";
THRIFT_DATA_MEMBER const std::array<std::string_view, 4> TStructDataStorage<::test::fixtures::python_capi::SerializedStruct>::fields_names = { {
  "s"sv,
  "i"sv,
  "os"sv,
  "rs"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 4> TStructDataStorage<::test::fixtures::python_capi::SerializedStruct>::fields_ids = { {
  1,
  2,
  3,
  4,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 4> TStructDataStorage<::test::fixtures::python_capi::SerializedStruct>::fields_types = { {
  TType::T_STRING,
  TType::T_I32,
  TType::T_STRING,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 4> TStructDataStorage<::test::fixtures::python_capi::SerializedStruct>::storage_names = { {
  "__fbthrift_field_s"sv,
  "__fbthrift_field_i"sv,
  "__fbthrift_field_os"sv,
  "__fbthrift_field_rs"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 4> TStructDataStorage<::test::fixtures::python_capi::SerializedStruct>::isset_indexes = { {
  0,
  1,
  2,
  -1,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::python_capi::SerializedUnion>::name = "SerializedUnion";
THRIFT_DATA_MEMBER const std::array<std::string_view, 2> TStructDataStorage<::test::fixtures::python_capi::SerializedUnion>::fields_names = { {
  "s"sv,
  "i"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 2> TStructDataStorage<::test::fixtures::python_capi::SerializedUnion>::fields_ids = { {
  1,
  2,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 2> TStructDataStorage<::test::fixtures::python_capi::SerializedUnion>::fields_types = { {
  TType::T_STRING,
  TType::T_I32,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 2> TStructDataStorage<::test::fixtures::python_capi::SerializedUnion>::storage_names = { {
  "s"sv,
  "i"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 2> TStructDataStorage<::test::fixtures::python_capi::SerializedUnion>::isset_indexes = { {
  0,
  1,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::python_capi::SerializedError>::name = "SerializedError";
THRIFT_DATA_MEMBER const std::array<std::string_view, 3> TStructDataStorage<::test::fixtures::python_capi::SerializedError>::fields_names = { {
  "msg"sv,
  "os"sv,
  "rs"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 3> TStructDataStorage<::test::fixtures::python_capi::SerializedError>::fields_ids = { {
  1,
  2,
  3,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 3> TStructDataStorage<::test::fixtures::python_capi::SerializedError>::fields_types = { {
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 3> TStructDataStorage<::test::fixtures::python_capi::SerializedError>::storage_names = { {
  "__fbthrift_field_msg"sv,
  "__fbthrift_field_os"sv,
  "__fbthrift_field_rs"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 3> TStructDataStorage<::test::fixtures::python_capi::SerializedError>::isset_indexes = { {
  0,
  1,
  -1,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::python_capi::MarshalStruct>::name = "MarshalStruct";
THRIFT_DATA_MEMBER const std::array<std::string_view, 4> TStructDataStorage<::test::fixtures::python_capi::MarshalStruct>::fields_names = { {
  "s"sv,
  "i"sv,
  "os"sv,
  "rs"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 4> TStructDataStorage<::test::fixtures::python_capi::MarshalStruct>::fields_ids = { {
  1,
  2,
  3,
  4,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 4> TStructDataStorage<::test::fixtures::python_capi::MarshalStruct>::fields_types = { {
  TType::T_STRING,
  TType::T_I32,
  TType::T_STRING,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 4> TStructDataStorage<::test::fixtures::python_capi::MarshalStruct>::storage_names = { {
  "__fbthrift_field_s"sv,
  "__fbthrift_field_i"sv,
  "__fbthrift_field_os"sv,
  "__fbthrift_field_rs"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 4> TStructDataStorage<::test::fixtures::python_capi::MarshalStruct>::isset_indexes = { {
  0,
  1,
  2,
  -1,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::python_capi::MarshalUnion>::name = "MarshalUnion";
THRIFT_DATA_MEMBER const std::array<std::string_view, 2> TStructDataStorage<::test::fixtures::python_capi::MarshalUnion>::fields_names = { {
  "s"sv,
  "i"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 2> TStructDataStorage<::test::fixtures::python_capi::MarshalUnion>::fields_ids = { {
  1,
  2,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 2> TStructDataStorage<::test::fixtures::python_capi::MarshalUnion>::fields_types = { {
  TType::T_STRING,
  TType::T_I32,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 2> TStructDataStorage<::test::fixtures::python_capi::MarshalUnion>::storage_names = { {
  "s"sv,
  "i"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 2> TStructDataStorage<::test::fixtures::python_capi::MarshalUnion>::isset_indexes = { {
  0,
  1,
}};

THRIFT_DATA_MEMBER const std::string_view TStructDataStorage<::test::fixtures::python_capi::MarshalError>::name = "MarshalError";
THRIFT_DATA_MEMBER const std::array<std::string_view, 3> TStructDataStorage<::test::fixtures::python_capi::MarshalError>::fields_names = { {
  "msg"sv,
  "os"sv,
  "rs"sv,
}};
THRIFT_DATA_MEMBER const std::array<int16_t, 3> TStructDataStorage<::test::fixtures::python_capi::MarshalError>::fields_ids = { {
  1,
  2,
  3,
}};
THRIFT_DATA_MEMBER const std::array<protocol::TType, 3> TStructDataStorage<::test::fixtures::python_capi::MarshalError>::fields_types = { {
  TType::T_STRING,
  TType::T_STRING,
  TType::T_STRING,
}};
THRIFT_DATA_MEMBER const std::array<std::string_view, 3> TStructDataStorage<::test::fixtures::python_capi::MarshalError>::storage_names = { {
  "__fbthrift_field_msg"sv,
  "__fbthrift_field_os"sv,
  "__fbthrift_field_rs"sv,
}};
THRIFT_DATA_MEMBER const std::array<int, 3> TStructDataStorage<::test::fixtures::python_capi::MarshalError>::isset_indexes = { {
  0,
  1,
  -1,
}};

} // namespace thrift
} // namespace apache
