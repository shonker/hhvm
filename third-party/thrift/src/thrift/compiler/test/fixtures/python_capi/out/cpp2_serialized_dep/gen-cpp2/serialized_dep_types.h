/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/serialized_dep.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace ident {
struct s;
struct i;
struct os;
struct rs;
struct s;
struct i;
struct msg;
struct os;
struct rs;
struct s;
struct i;
struct os;
struct rs;
struct s;
struct i;
struct msg;
struct os;
struct rs;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i
#define APACHE_THRIFT_ACCESSOR_i
APACHE_THRIFT_DEFINE_ACCESSOR(i);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_os
#define APACHE_THRIFT_ACCESSOR_os
APACHE_THRIFT_DEFINE_ACCESSOR(os);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rs
#define APACHE_THRIFT_ACCESSOR_rs
APACHE_THRIFT_DEFINE_ACCESSOR(rs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i
#define APACHE_THRIFT_ACCESSOR_i
APACHE_THRIFT_DEFINE_ACCESSOR(i);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_msg
#define APACHE_THRIFT_ACCESSOR_msg
APACHE_THRIFT_DEFINE_ACCESSOR(msg);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_os
#define APACHE_THRIFT_ACCESSOR_os
APACHE_THRIFT_DEFINE_ACCESSOR(os);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rs
#define APACHE_THRIFT_ACCESSOR_rs
APACHE_THRIFT_DEFINE_ACCESSOR(rs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i
#define APACHE_THRIFT_ACCESSOR_i
APACHE_THRIFT_DEFINE_ACCESSOR(i);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_os
#define APACHE_THRIFT_ACCESSOR_os
APACHE_THRIFT_DEFINE_ACCESSOR(os);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rs
#define APACHE_THRIFT_ACCESSOR_rs
APACHE_THRIFT_DEFINE_ACCESSOR(rs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i
#define APACHE_THRIFT_ACCESSOR_i
APACHE_THRIFT_DEFINE_ACCESSOR(i);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_msg
#define APACHE_THRIFT_ACCESSOR_msg
APACHE_THRIFT_DEFINE_ACCESSOR(msg);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_os
#define APACHE_THRIFT_ACCESSOR_os
APACHE_THRIFT_DEFINE_ACCESSOR(os);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_rs
#define APACHE_THRIFT_ACCESSOR_rs
APACHE_THRIFT_DEFINE_ACCESSOR(rs);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace test::fixtures::python_capi {
class SerializedStruct;
class SerializedUnion;
class SerializedError;
class MarshalStruct;
class MarshalUnion;
class MarshalError;
} // namespace test::fixtures::python_capi
// END forward_declare
namespace apache::thrift::detail::annotation {
} // namespace apache::thrift::detail::annotation

namespace apache::thrift::detail::qualifier {
} // namespace apache::thrift::detail::qualifier

// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test::fixtures::python_capi {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class SerializedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static const char* __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::s,
    ::apache::thrift::ident::i,
    ::apache::thrift::ident::os,
    ::apache::thrift::ident::rs
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SerializedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SerializedStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SerializedStruct(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t i__arg, ::std::string os__arg, ::std::string rs__arg);

  SerializedStruct(SerializedStruct&&) noexcept;

  SerializedStruct(const SerializedStruct& src);


  SerializedStruct& operator=(SerializedStruct&&) noexcept;
  SerializedStruct& operator=(const SerializedStruct& src);

  ~SerializedStruct();

 private:
  ::std::string __fbthrift_field_s;
 private:
  ::std::int32_t __fbthrift_field_i;
 private:
  ::std::string __fbthrift_field_os;
 private:
  ::std::string __fbthrift_field_rs;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SerializedStruct&) const;
  bool operator<(const SerializedStruct&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s_ref() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s_ref() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i_ref() const& {
    return {this->__fbthrift_field_i, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i_ref() & {
    return {this->__fbthrift_field_i, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i() const& {
    return {this->__fbthrift_field_i, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i() & {
    return {this->__fbthrift_field_i, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i() && {
    return {static_cast<T&&>(this->__fbthrift_field_i), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> os_ref() const& {
    return {this->__fbthrift_field_os, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> os_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_os), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> os_ref() & {
    return {this->__fbthrift_field_os, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> os_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_os), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> os() const& {
    return {this->__fbthrift_field_os, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> os() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_os), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> os() & {
    return {this->__fbthrift_field_os, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> os() && {
    return {static_cast<T&&>(this->__fbthrift_field_os), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> rs_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> rs_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> rs_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> rs_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> rs() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> rs() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> rs() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> rs() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_rs)};
  }

  const ::std::string& get_s() const& {
    return __fbthrift_field_s;
  }

  ::std::string get_s() && {
    return std::move(__fbthrift_field_s);
  }

  template <typename T_SerializedStruct_s_struct_setter = ::std::string>
  [[deprecated("Use `FOO.s_ref() = BAR;` instead of `FOO.set_s(BAR);`")]]
  ::std::string& set_s(T_SerializedStruct_s_struct_setter&& s_) {
    s_ref() = std::forward<T_SerializedStruct_s_struct_setter>(s_);
    return __fbthrift_field_s;
  }

  ::std::int32_t get_i() const {
    return __fbthrift_field_i;
  }

  [[deprecated("Use `FOO.i_ref() = BAR;` instead of `FOO.set_i(BAR);`")]]
  ::std::int32_t& set_i(::std::int32_t i_) {
    i_ref() = i_;
    return __fbthrift_field_i;
  }

  const ::std::string* get_os() const& {
    return os_ref() ? std::addressof(__fbthrift_field_os) : nullptr;
  }

  ::std::string* get_os() & {
    return os_ref() ? std::addressof(__fbthrift_field_os) : nullptr;
  }
  ::std::string* get_os() && = delete;

  template <typename T_SerializedStruct_os_struct_setter = ::std::string>
  [[deprecated("Use `FOO.os_ref() = BAR;` instead of `FOO.set_os(BAR);`")]]
  ::std::string& set_os(T_SerializedStruct_os_struct_setter&& os_) {
    os_ref() = std::forward<T_SerializedStruct_os_struct_setter>(os_);
    return __fbthrift_field_os;
  }

  const ::std::string& get_rs() const& {
    return __fbthrift_field_rs;
  }

  ::std::string get_rs() && {
    return std::move(__fbthrift_field_rs);
  }

  template <typename T_SerializedStruct_rs_struct_setter = ::std::string>
  [[deprecated("Use `FOO.rs_ref() = BAR;` instead of `FOO.set_rs(BAR);`")]]
  ::std::string& set_rs(T_SerializedStruct_rs_struct_setter&& rs_) {
    rs_ref() = std::forward<T_SerializedStruct_rs_struct_setter>(rs_);
    return __fbthrift_field_rs;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SerializedStruct>;
  friend void swap(SerializedStruct& a, SerializedStruct& b);
};

template <class Protocol_>
unsigned long SerializedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class SerializedUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static const char* __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::s,
    ::apache::thrift::ident::i
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SerializedUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    s = 1,
    i = 2,
  } ;

  SerializedUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  SerializedUnion(SerializedUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  SerializedUnion(const SerializedUnion& rhs);

  SerializedUnion& operator=(SerializedUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  SerializedUnion& operator=(const SerializedUnion& rhs);

  ~SerializedUnion();

  union storage_type {
    ::std::string s;
    ::std::int32_t i;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const SerializedUnion&) const;
  bool operator<(const SerializedUnion&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_s(::std::string const &t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::s);
    ::new (std::addressof(value_.s)) T(t);
    return value_.s;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_s(::std::string&& t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::s);
    ::new (std::addressof(value_.s)) T(std::move(t));
    return value_.s;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_s(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::s);
    ::new (std::addressof(value_.s)) ::std::string(std::forward<T>(t)...);
    return value_.s;
  }


  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::int32_t& set_i(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::int32_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::i);
    ::new (std::addressof(value_.i)) T(t);
    return value_.i;
  }


  ::std::string const& get_s() const {
    if (getType() != Type::s) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.s;
  }

  ::std::int32_t const& get_i() const {
    if (getType() != Type::i) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.i;
  }

  ::std::string& mutable_s() {
    assert(getType() == Type::s);
    return value_.s;
  }

  ::std::int32_t& mutable_i() {
    assert(getType() == Type::i);
    return value_.i;
  }

  ::std::string move_s() {
    assert(getType() == Type::s);
    return std::move(value_.s);
  }

  ::std::int32_t move_i() {
    assert(getType() == Type::i);
    return std::move(value_.i);
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> s_ref() const& {
    return {value_.s, type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> s_ref() const&& {
    return {std::move(value_.s), type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> s_ref() & {
    return {value_.s, type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> s_ref() && {
    return {std::move(value_.s), type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> i_ref() const& {
    return {value_.i, type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> i_ref() const&& {
    return {std::move(value_.i), type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> i_ref() & {
    return {value_.i, type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> i_ref() && {
    return {std::move(value_.i), type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SerializedUnion>;
  friend void swap(SerializedUnion& a, SerializedUnion& b);
};

template <class Protocol_>
unsigned long SerializedUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class FOLLY_EXPORT SerializedError : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static const char* __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::msg,
    ::apache::thrift::ident::os,
    ::apache::thrift::ident::rs
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = SerializedError;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  SerializedError();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SerializedError(apache::thrift::FragileConstructor, ::std::string msg__arg, ::std::string os__arg, ::std::string rs__arg);

  SerializedError(SerializedError&&) noexcept;

  SerializedError(const SerializedError& src);


  SerializedError& operator=(SerializedError&&) noexcept;
  SerializedError& operator=(const SerializedError& src);

  ~SerializedError() override;

 private:
  ::std::string __fbthrift_field_msg;
 private:
  ::std::string __fbthrift_field_os;
 private:
  ::std::string __fbthrift_field_rs;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SerializedError&) const;
  bool operator<(const SerializedError&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> msg_ref() const& {
    return {this->__fbthrift_field_msg, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> msg_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_msg), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> msg_ref() & {
    return {this->__fbthrift_field_msg, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> msg_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_msg), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> msg() const& {
    return {this->__fbthrift_field_msg, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> msg() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_msg), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> msg() & {
    return {this->__fbthrift_field_msg, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> msg() && {
    return {static_cast<T&&>(this->__fbthrift_field_msg), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> os_ref() const& {
    return {this->__fbthrift_field_os, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> os_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_os), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> os_ref() & {
    return {this->__fbthrift_field_os, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> os_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_os), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> os() const& {
    return {this->__fbthrift_field_os, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> os() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_os), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> os() & {
    return {this->__fbthrift_field_os, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> os() && {
    return {static_cast<T&&>(this->__fbthrift_field_os), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> rs_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> rs_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> rs_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> rs_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> rs() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> rs() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> rs() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> rs() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_rs)};
  }

  const ::std::string& get_msg() const& {
    return __fbthrift_field_msg;
  }

  ::std::string get_msg() && {
    return std::move(__fbthrift_field_msg);
  }

  template <typename T_SerializedError_msg_struct_setter = ::std::string>
  [[deprecated("Use `FOO.msg_ref() = BAR;` instead of `FOO.set_msg(BAR);`")]]
  ::std::string& set_msg(T_SerializedError_msg_struct_setter&& msg_) {
    msg_ref() = std::forward<T_SerializedError_msg_struct_setter>(msg_);
    return __fbthrift_field_msg;
  }

  const ::std::string* get_os() const& {
    return os_ref() ? std::addressof(__fbthrift_field_os) : nullptr;
  }

  ::std::string* get_os() & {
    return os_ref() ? std::addressof(__fbthrift_field_os) : nullptr;
  }
  ::std::string* get_os() && = delete;

  template <typename T_SerializedError_os_struct_setter = ::std::string>
  [[deprecated("Use `FOO.os_ref() = BAR;` instead of `FOO.set_os(BAR);`")]]
  ::std::string& set_os(T_SerializedError_os_struct_setter&& os_) {
    os_ref() = std::forward<T_SerializedError_os_struct_setter>(os_);
    return __fbthrift_field_os;
  }

  const ::std::string& get_rs() const& {
    return __fbthrift_field_rs;
  }

  ::std::string get_rs() && {
    return std::move(__fbthrift_field_rs);
  }

  template <typename T_SerializedError_rs_struct_setter = ::std::string>
  [[deprecated("Use `FOO.rs_ref() = BAR;` instead of `FOO.set_rs(BAR);`")]]
  ::std::string& set_rs(T_SerializedError_rs_struct_setter&& rs_) {
    rs_ref() = std::forward<T_SerializedError_rs_struct_setter>(rs_);
    return __fbthrift_field_rs;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::test::fixtures::python_capi::SerializedError";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SerializedError>;
  friend void swap(SerializedError& a, SerializedError& b);
};

template <class Protocol_>
unsigned long SerializedError::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MarshalStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static const char* __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::s,
    ::apache::thrift::ident::i,
    ::apache::thrift::ident::os,
    ::apache::thrift::ident::rs
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MarshalStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MarshalStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MarshalStruct(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t i__arg, ::std::string os__arg, ::std::string rs__arg);

  MarshalStruct(MarshalStruct&&) noexcept;

  MarshalStruct(const MarshalStruct& src);


  MarshalStruct& operator=(MarshalStruct&&) noexcept;
  MarshalStruct& operator=(const MarshalStruct& src);

  ~MarshalStruct();

 private:
  ::std::string __fbthrift_field_s;
 private:
  ::std::int32_t __fbthrift_field_i;
 private:
  ::std::string __fbthrift_field_os;
 private:
  ::std::string __fbthrift_field_rs;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MarshalStruct&) const;
  bool operator<(const MarshalStruct&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s_ref() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s_ref() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i_ref() const& {
    return {this->__fbthrift_field_i, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i_ref() & {
    return {this->__fbthrift_field_i, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i() const& {
    return {this->__fbthrift_field_i, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i() & {
    return {this->__fbthrift_field_i, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i() && {
    return {static_cast<T&&>(this->__fbthrift_field_i), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> os_ref() const& {
    return {this->__fbthrift_field_os, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> os_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_os), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> os_ref() & {
    return {this->__fbthrift_field_os, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> os_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_os), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> os() const& {
    return {this->__fbthrift_field_os, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> os() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_os), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> os() & {
    return {this->__fbthrift_field_os, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> os() && {
    return {static_cast<T&&>(this->__fbthrift_field_os), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> rs_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> rs_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> rs_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> rs_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> rs() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> rs() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> rs() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> rs() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_rs)};
  }

  const ::std::string& get_s() const& {
    return __fbthrift_field_s;
  }

  ::std::string get_s() && {
    return std::move(__fbthrift_field_s);
  }

  template <typename T_MarshalStruct_s_struct_setter = ::std::string>
  [[deprecated("Use `FOO.s_ref() = BAR;` instead of `FOO.set_s(BAR);`")]]
  ::std::string& set_s(T_MarshalStruct_s_struct_setter&& s_) {
    s_ref() = std::forward<T_MarshalStruct_s_struct_setter>(s_);
    return __fbthrift_field_s;
  }

  ::std::int32_t get_i() const {
    return __fbthrift_field_i;
  }

  [[deprecated("Use `FOO.i_ref() = BAR;` instead of `FOO.set_i(BAR);`")]]
  ::std::int32_t& set_i(::std::int32_t i_) {
    i_ref() = i_;
    return __fbthrift_field_i;
  }

  const ::std::string* get_os() const& {
    return os_ref() ? std::addressof(__fbthrift_field_os) : nullptr;
  }

  ::std::string* get_os() & {
    return os_ref() ? std::addressof(__fbthrift_field_os) : nullptr;
  }
  ::std::string* get_os() && = delete;

  template <typename T_MarshalStruct_os_struct_setter = ::std::string>
  [[deprecated("Use `FOO.os_ref() = BAR;` instead of `FOO.set_os(BAR);`")]]
  ::std::string& set_os(T_MarshalStruct_os_struct_setter&& os_) {
    os_ref() = std::forward<T_MarshalStruct_os_struct_setter>(os_);
    return __fbthrift_field_os;
  }

  const ::std::string& get_rs() const& {
    return __fbthrift_field_rs;
  }

  ::std::string get_rs() && {
    return std::move(__fbthrift_field_rs);
  }

  template <typename T_MarshalStruct_rs_struct_setter = ::std::string>
  [[deprecated("Use `FOO.rs_ref() = BAR;` instead of `FOO.set_rs(BAR);`")]]
  ::std::string& set_rs(T_MarshalStruct_rs_struct_setter&& rs_) {
    rs_ref() = std::forward<T_MarshalStruct_rs_struct_setter>(rs_);
    return __fbthrift_field_rs;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MarshalStruct>;
  friend void swap(MarshalStruct& a, MarshalStruct& b);
};

template <class Protocol_>
unsigned long MarshalStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MarshalUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static const char* __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::s,
    ::apache::thrift::ident::i
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_destruct();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MarshalUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    s = 1,
    i = 2,
  } ;

  MarshalUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  MarshalUnion(MarshalUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MarshalUnion(const MarshalUnion& rhs);

  MarshalUnion& operator=(MarshalUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        __fbthrift_clear();
        return *this;
      }
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      default:
      {
        assert(false);
        __fbthrift_clear();
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MarshalUnion& operator=(const MarshalUnion& rhs);

  ~MarshalUnion();

  union storage_type {
    ::std::string s;
    ::std::int32_t i;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MarshalUnion&) const;
  bool operator<(const MarshalUnion&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_s(::std::string const &t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::s);
    ::new (std::addressof(value_.s)) T(t);
    return value_.s;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_s(::std::string&& t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::s);
    ::new (std::addressof(value_.s)) T(std::move(t));
    return value_.s;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_s(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::s);
    ::new (std::addressof(value_.s)) ::std::string(std::forward<T>(t)...);
    return value_.s;
  }


  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::int32_t& set_i(::std::int32_t t = ::std::int32_t()) {
    using T0 = ::std::int32_t;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::i);
    ::new (std::addressof(value_.i)) T(t);
    return value_.i;
  }


  ::std::string const& get_s() const {
    if (getType() != Type::s) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.s;
  }

  ::std::int32_t const& get_i() const {
    if (getType() != Type::i) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.i;
  }

  ::std::string& mutable_s() {
    assert(getType() == Type::s);
    return value_.s;
  }

  ::std::int32_t& mutable_i() {
    assert(getType() == Type::i);
    return value_.i;
  }

  ::std::string move_s() {
    assert(getType() == Type::s);
    return std::move(value_.s);
  }

  ::std::int32_t move_i() {
    assert(getType() == Type::i);
    return std::move(value_.i);
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> s_ref() const& {
    return {value_.s, type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> s_ref() const&& {
    return {std::move(value_.s), type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> s_ref() & {
    return {value_.s, type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> s_ref() && {
    return {std::move(value_.s), type_, folly::to_underlying(Type::s), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> i_ref() const& {
    return {value_.i, type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> i_ref() const&& {
    return {std::move(value_.i), type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> i_ref() & {
    return {value_.i, type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> i_ref() && {
    return {std::move(value_.i), type_, folly::to_underlying(Type::i), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MarshalUnion>;
  friend void swap(MarshalUnion& a, MarshalUnion& b);
};

template <class Protocol_>
unsigned long MarshalUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class FOLLY_EXPORT MarshalError : public virtual apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_is_runtime_annotation = false;
  static const char* __fbthrift_thrift_uri();
  static std::string_view __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static std::string_view __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::msg,
    ::apache::thrift::ident::os,
    ::apache::thrift::ident::rs
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 3;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::SAFE;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = MarshalError;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;
  static constexpr bool __fbthrift_cpp2_uses_op_encode =
    false;


 public:

  MarshalError();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MarshalError(apache::thrift::FragileConstructor, ::std::string msg__arg, ::std::string os__arg, ::std::string rs__arg);

  MarshalError(MarshalError&&) noexcept;

  MarshalError(const MarshalError& src);


  MarshalError& operator=(MarshalError&&) noexcept;
  MarshalError& operator=(const MarshalError& src);

  ~MarshalError() override;

 private:
  ::std::string __fbthrift_field_msg;
 private:
  ::std::string __fbthrift_field_os;
 private:
  ::std::string __fbthrift_field_rs;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MarshalError&) const;
  bool operator<(const MarshalError&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> msg_ref() const& {
    return {this->__fbthrift_field_msg, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> msg_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_msg), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> msg_ref() & {
    return {this->__fbthrift_field_msg, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> msg_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_msg), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> msg() const& {
    return {this->__fbthrift_field_msg, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> msg() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_msg), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> msg() & {
    return {this->__fbthrift_field_msg, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> msg() && {
    return {static_cast<T&&>(this->__fbthrift_field_msg), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> os_ref() const& {
    return {this->__fbthrift_field_os, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> os_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_os), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> os_ref() & {
    return {this->__fbthrift_field_os, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> os_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_os), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> os() const& {
    return {this->__fbthrift_field_os, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> os() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_os), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> os() & {
    return {this->__fbthrift_field_os, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> os() && {
    return {static_cast<T&&>(this->__fbthrift_field_os), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> rs_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> rs_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> rs_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> rs_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> rs() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> rs() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_rs)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> rs() & {
    return ::apache::thrift::required_field_ref<T&>{this->__fbthrift_field_rs};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> rs() && {
    return ::apache::thrift::required_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_rs)};
  }

  const ::std::string& get_msg() const& {
    return __fbthrift_field_msg;
  }

  ::std::string get_msg() && {
    return std::move(__fbthrift_field_msg);
  }

  template <typename T_MarshalError_msg_struct_setter = ::std::string>
  [[deprecated("Use `FOO.msg_ref() = BAR;` instead of `FOO.set_msg(BAR);`")]]
  ::std::string& set_msg(T_MarshalError_msg_struct_setter&& msg_) {
    msg_ref() = std::forward<T_MarshalError_msg_struct_setter>(msg_);
    return __fbthrift_field_msg;
  }

  const ::std::string* get_os() const& {
    return os_ref() ? std::addressof(__fbthrift_field_os) : nullptr;
  }

  ::std::string* get_os() & {
    return os_ref() ? std::addressof(__fbthrift_field_os) : nullptr;
  }
  ::std::string* get_os() && = delete;

  template <typename T_MarshalError_os_struct_setter = ::std::string>
  [[deprecated("Use `FOO.os_ref() = BAR;` instead of `FOO.set_os(BAR);`")]]
  ::std::string& set_os(T_MarshalError_os_struct_setter&& os_) {
    os_ref() = std::forward<T_MarshalError_os_struct_setter>(os_);
    return __fbthrift_field_os;
  }

  const ::std::string& get_rs() const& {
    return __fbthrift_field_rs;
  }

  ::std::string get_rs() && {
    return std::move(__fbthrift_field_rs);
  }

  template <typename T_MarshalError_rs_struct_setter = ::std::string>
  [[deprecated("Use `FOO.rs_ref() = BAR;` instead of `FOO.set_rs(BAR);`")]]
  ::std::string& set_rs(T_MarshalError_rs_struct_setter&& rs_) {
    rs_ref() = std::forward<T_MarshalError_rs_struct_setter>(rs_);
    return __fbthrift_field_rs;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::test::fixtures::python_capi::MarshalError";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MarshalError>;
  friend void swap(MarshalError& a, MarshalError& b);
};

template <class Protocol_>
unsigned long MarshalError::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


} // namespace test::fixtures::python_capi

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test::fixtures::python_capi::SerializedUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::python_capi::SerializedUnion::Type> {
  using type = ::test::fixtures::python_capi::SerializedUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};

template <> struct TEnumDataStorage<::test::fixtures::python_capi::MarshalUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::python_capi::MarshalUnion::Type> {
  using type = ::test::fixtures::python_capi::MarshalUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<std::string_view const*> const names;

  static bool findName(type value, std::string_view* out) noexcept;
  static bool findValue(std::string_view name, type* out) noexcept;

  static char const* findName(type value) noexcept {
    std::string_view ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
