
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#pragma once

#include <thrift/lib/python/capi/constructor.h>
#include <thrift/lib/python/capi/extractor.h>

#include <thrift/compiler/test/fixtures/python_capi/gen-cpp2/module_types.h>

namespace apache {
namespace thrift {
namespace python {
namespace capi {
template <>
struct Extractor<::test::fixtures::python_capi::MyStruct>
    : public BaseExtractor<::test::fixtures::python_capi::MyStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::MyStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyStruct>> {
  ExtractorResult<::test::fixtures::python_capi::MyStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::MyStruct>
    : public BaseConstructor<::test::fixtures::python_capi::MyStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::MyStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyStruct>> {
  PyObject* operator()(const ::test::fixtures::python_capi::MyStruct& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::MyDataItem>
    : public BaseExtractor<::test::fixtures::python_capi::MyDataItem> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::MyDataItem> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyDataItem>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyDataItem>> {
  ExtractorResult<::test::fixtures::python_capi::MyDataItem> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::MyDataItem>
    : public BaseConstructor<::test::fixtures::python_capi::MyDataItem> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::MyDataItem& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyDataItem>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MyDataItem>> {
  PyObject* operator()(const ::test::fixtures::python_capi::MyDataItem& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::TransitiveDoubler>
    : public BaseExtractor<::test::fixtures::python_capi::TransitiveDoubler> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::TransitiveDoubler> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TransitiveDoubler>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TransitiveDoubler>> {
  ExtractorResult<::test::fixtures::python_capi::TransitiveDoubler> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::TransitiveDoubler>
    : public BaseConstructor<::test::fixtures::python_capi::TransitiveDoubler> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::TransitiveDoubler& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TransitiveDoubler>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::TransitiveDoubler>> {
  PyObject* operator()(const ::test::fixtures::python_capi::TransitiveDoubler& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::detail::DoubledPair>
    : public BaseExtractor<::test::fixtures::python_capi::detail::DoubledPair> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::detail::DoubledPair> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::detail::DoubledPair>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::detail::DoubledPair>> {
  ExtractorResult<::test::fixtures::python_capi::detail::DoubledPair> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::detail::DoubledPair>
    : public BaseConstructor<::test::fixtures::python_capi::detail::DoubledPair> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::detail::DoubledPair& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::detail::DoubledPair>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::detail::DoubledPair>> {
  PyObject* operator()(const ::test::fixtures::python_capi::detail::DoubledPair& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::StringPair>
    : public BaseExtractor<::test::fixtures::python_capi::StringPair> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::StringPair> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::StringPair>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::StringPair>> {
  ExtractorResult<::test::fixtures::python_capi::StringPair> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::StringPair>
    : public BaseConstructor<::test::fixtures::python_capi::StringPair> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::StringPair& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::StringPair>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::StringPair>> {
  PyObject* operator()(const ::test::fixtures::python_capi::StringPair& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::VapidStruct>
    : public BaseExtractor<::test::fixtures::python_capi::VapidStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::VapidStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::VapidStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::VapidStruct>> {
  ExtractorResult<::test::fixtures::python_capi::VapidStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::VapidStruct>
    : public BaseConstructor<::test::fixtures::python_capi::VapidStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::VapidStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::VapidStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::VapidStruct>> {
  PyObject* operator()(const ::test::fixtures::python_capi::VapidStruct& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::PrimitiveStruct>
    : public BaseExtractor<::test::fixtures::python_capi::PrimitiveStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::PrimitiveStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::PrimitiveStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::PrimitiveStruct>> {
  ExtractorResult<::test::fixtures::python_capi::PrimitiveStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::PrimitiveStruct>
    : public BaseConstructor<::test::fixtures::python_capi::PrimitiveStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::PrimitiveStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::PrimitiveStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::PrimitiveStruct>> {
  PyObject* operator()(const ::test::fixtures::python_capi::PrimitiveStruct& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::AdaptedFields>
    : public BaseExtractor<::test::fixtures::python_capi::AdaptedFields> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::AdaptedFields> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::AdaptedFields>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::AdaptedFields>> {
  ExtractorResult<::test::fixtures::python_capi::AdaptedFields> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::AdaptedFields>
    : public BaseConstructor<::test::fixtures::python_capi::AdaptedFields> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::AdaptedFields& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::AdaptedFields>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::AdaptedFields>> {
  PyObject* operator()(const ::test::fixtures::python_capi::AdaptedFields& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::ListStruct>
    : public BaseExtractor<::test::fixtures::python_capi::ListStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::ListStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ListStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ListStruct>> {
  ExtractorResult<::test::fixtures::python_capi::ListStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::ListStruct>
    : public BaseConstructor<::test::fixtures::python_capi::ListStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::ListStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ListStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ListStruct>> {
  PyObject* operator()(const ::test::fixtures::python_capi::ListStruct& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::SetStruct>
    : public BaseExtractor<::test::fixtures::python_capi::SetStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::SetStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SetStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SetStruct>> {
  ExtractorResult<::test::fixtures::python_capi::SetStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::SetStruct>
    : public BaseConstructor<::test::fixtures::python_capi::SetStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::SetStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SetStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::SetStruct>> {
  PyObject* operator()(const ::test::fixtures::python_capi::SetStruct& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::MapStruct>
    : public BaseExtractor<::test::fixtures::python_capi::MapStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::MapStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MapStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MapStruct>> {
  ExtractorResult<::test::fixtures::python_capi::MapStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::MapStruct>
    : public BaseConstructor<::test::fixtures::python_capi::MapStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::MapStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MapStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::MapStruct>> {
  PyObject* operator()(const ::test::fixtures::python_capi::MapStruct& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::ComposeStruct>
    : public BaseExtractor<::test::fixtures::python_capi::ComposeStruct> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::ComposeStruct> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ComposeStruct>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ComposeStruct>> {
  ExtractorResult<::test::fixtures::python_capi::ComposeStruct> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::ComposeStruct>
    : public BaseConstructor<::test::fixtures::python_capi::ComposeStruct> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::ComposeStruct& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ComposeStruct>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::ComposeStruct>> {
  PyObject* operator()(const ::test::fixtures::python_capi::ComposeStruct& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::Shallot>
    : public BaseExtractor<::test::fixtures::python_capi::Shallot> {
  static const bool kUsingMarshal = true;
  ExtractorResult<::test::fixtures::python_capi::Shallot> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Extractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::Shallot>>
    : public BaseExtractor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::Shallot>> {
  ExtractorResult<::test::fixtures::python_capi::Shallot> operator()(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::Shallot>
    : public BaseConstructor<::test::fixtures::python_capi::Shallot> {
  static const bool kUsingMarshal = true;
  PyObject* operator()(const ::test::fixtures::python_capi::Shallot& val);
};

template <>
struct Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::Shallot>>
    : public BaseConstructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::python_capi::Shallot>> {
  PyObject* operator()(const ::test::fixtures::python_capi::Shallot& val);
};

template <>
struct Extractor<::test::fixtures::python_capi::MyEnum>
    : public BaseExtractor<::test::fixtures::python_capi::MyEnum> {
  ExtractorResult<::test::fixtures::python_capi::MyEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::MyEnum> {
  PyObject* operator()(::test::fixtures::python_capi::MyEnum val);
};

template <>
struct Extractor<::test::fixtures::python_capi::NormalDecentEnum>
    : public BaseExtractor<::test::fixtures::python_capi::NormalDecentEnum> {
  ExtractorResult<::test::fixtures::python_capi::NormalDecentEnum> operator()(PyObject* obj);
  int typeCheck(PyObject* obj);
};

template <>
struct Constructor<::test::fixtures::python_capi::NormalDecentEnum> {
  PyObject* operator()(::test::fixtures::python_capi::NormalDecentEnum val);
};

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
